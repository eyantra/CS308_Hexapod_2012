__text_start:
__start:
     10E EFCF      LDI	R28,0xFF
     10F E2D1      LDI	R29,0x21
     110 BFCD      OUT	0x3D,R28
     111 BFDE      OUT	0x3E,R29
     112 51C0      SUBI	R28,0x10
     113 40D0      SBCI	R29,0
     114 EA0A      LDI	R16,0xAA
     115 8308      STD	Y+0,R16
     116 2400      CLR	R0
     117 E0EE      LDI	R30,0xE
     118 E0F2      LDI	R31,2
     119 E012      LDI	R17,2
     11A 35E9      CPI	R30,0x59
     11B 07F1      CPC	R31,R17
     11C F011      BEQ	0x011F
     11D 9201      ST	R0,Z+
     11E CFFB      RJMP	0x011A
     11F 8300      STD	Z+0,R16
     120 E0EE      LDI	R30,0xE
     121 E0F2      LDI	R31,2
     122 E0A0      LDI	R26,0
     123 E0B2      LDI	R27,2
     124 E012      LDI	R17,2
     125 E000      LDI	R16,0
     126 BF0B      OUT	0x3B,R16
     127 31EC      CPI	R30,0x1C
     128 07F1      CPC	R31,R17
     129 F021      BEQ	0x012E
     12A 95C8      LPM
     12B 9631      ADIW	R30,1
     12C 920D      ST	R0,X+
     12D CFF9      RJMP	0x0127
     12E 940E 0131 CALL	_main
_exit:
     130 CFFF      RJMP	_exit
_main:
  i                    --> R20
     131 9722      SBIW	R28,2
FILE: C:\Users\ERTSLA~1\Downloads\BUILDI~2\main.c
(0001) /**
(0002) @mainpage Building a locamotion based Hexapod Application
(0003) @author Group 6 Srijit Dutt 10305056
(0004) 
(0005) Mon 08 Nov 2010 12:49:10 AM IST 
(0006) 
(0007) ICC AVR 7
(0008) 
(0009) Conatins various functions for basic, advanced hexapod motions
(0010) 
(0011) 
(0012) */
(0013) 
(0014) /*********************************************************************************
(0015) 
(0016)    Copyright (c) 2010, ERTS Lab IIT Bombay erts@cse.iitb.ac.in               -*- c -*-
(0017)    All rights reserved.
(0018) 
(0019)    Redistribution and use in source and binary forms, with or without
(0020)    modification, are permitted provided that the following conditions are met:
(0021) 
(0022)    * Redistributions of source code must retain the above copyright
(0023)      notice, this list of conditions and the following disclaimer.
(0024) 
(0025)    * Redistributions in binary form must reproduce the above copyright
(0026)      notice, this list of conditions and the following disclaimer in
(0027)      the documentation and/or other materials provided with the
(0028)      distribution.
(0029) 
(0030)    * Neither the name of the copyright holders nor the names of
(0031)      contributors may be used to endorse or promote products derived
(0032)      from this software without specific prior written permission.
(0033) 
(0034)    * Source code can be used for academic purpose. 
(0035) 	 For commercial use permission form the author needs to be taken.
(0036) 
(0037)   THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
(0038)   AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
(0039)   IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
(0040)   ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
(0041)   LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
(0042)   CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
(0043)   SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
(0044)   INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
(0045)   CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
(0046)   ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
(0047)   POSSIBILITY OF SUCH DAMAGE. 
(0048) 
(0049)   Software released under Creative Commence cc by-nc-sa licence.
(0050)   For legal information refer to: 
(0051)   http://creativecommons.org/licenses/by-nc-sa/3.0/legalcode
(0052) 
(0053) ********************************************************************************/
(0054) 
(0055) 
(0056) #include <iom2560v.h>
(0057) #include <macros.h>
(0058) #include "hexapod_macro.h"
(0059) #include "hexapod.h"
(0060) #include "hexapod_basic.h"
(0061) #include "hexapod_motions.h"
(0062) #include "gait.h"
(0063) #include "keyboard.h"
(0064) 
(0065) extern unsigned char data;
(0066) unsigned char mode;
(0067) unsigned int legNo;
(0068) unsigned int dir;
(0069) unsigned int tempDir;
(0070) double movementScaling;
(0071) 
(0072) void main(void) 
(0073) {
(0074) 	int i = 100;
     132 E644      LDI	R20,0x64
     133 E050      LDI	R21,0
(0075) 	init_devices();
     134 940E 1166 CALL	_init_devices
(0076) 	//insert your functional code here...
(0077) 	servo_calibration(); //must be called as the first instruction
     136 940E 12FC CALL	_servo_calibration
(0078) 	servo_on();//turning on the servo supply
     138 940E 11C2 CALL	_servo_on
(0079) 	initializeAngles();
     13A 940E 14F9 CALL	_initializeAngles
(0080) 	delay(ONE_SEC);
     13C E900      LDI	R16,0x90
     13D E011      LDI	R17,1
     13E 940E 14C9 CALL	_delay
(0081) 	delay(ONE_SEC);
     140 E900      LDI	R16,0x90
     141 E011      LDI	R17,1
     142 940E 14C9 CALL	_delay
(0082) 	delay(ONE_SEC);
     144 E900      LDI	R16,0x90
     145 E011      LDI	R17,1
     146 940E 14C9 CALL	_delay
(0083) 
(0084) 	delay(ONE_SEC);
     148 E900      LDI	R16,0x90
     149 E011      LDI	R17,1
     14A 940E 14C9 CALL	_delay
(0085) 	
(0086) 	
(0087) 	/*ripple_gait(LEG_1, 10);
(0088) 	servo_calibration();
(0089) 	delay(ONE_SEC);*/
(0090) 
(0091) 	mode = 'z';
     14C E78A      LDI	R24,0x7A
     14D 9380 0218 STS	mode,R24
(0092) 	legNo = 1;
     14F E081      LDI	R24,1
     150 E090      LDI	R25,0
     151 9390 0217 STS	legNo+1,R25
     153 9380 0216 STS	legNo,R24
(0093) 	dir = CLOCK_WISE;
     155 9390 0215 STS	dir+1,R25
     157 9380 0214 STS	dir,R24
(0094) 	movementScaling = 1.0;
     159 E608      LDI	R16,0x68
     15A E011      LDI	R17,1
     15B 940E 1E0D CALL	elpm32
     15D 9310 020F STS	movementScaling+1,R17
     15F 9300 020E STS	movementScaling,R16
     161 9330 0211 STS	movementScaling+3,R19
     163 9320 0210 STS	movementScaling+2,R18
     165 C0D7      RJMP	0x023D
(0095) 						
(0096) 	while(1){
(0097) 	
(0098) 		switch(mode){
     166 9140 0218 LDS	R20,mode
     168 2755      CLR	R21
     169 3041      CPI	R20,1
     16A E0E0      LDI	R30,0
     16B 075E      CPC	R21,R30
     16C F40C      BGE	0x016E
     16D C0CF      RJMP	0x023D
     16E E188      LDI	R24,0x18
     16F E090      LDI	R25,0
     170 1784      CP	R24,R20
     171 0795      CPC	R25,R21
     172 F40C      BGE	0x0174
     173 C0C9      RJMP	0x023D
     174 E003      LDI	R16,3
     175 E010      LDI	R17,0
     176 019A      MOVW	R18,R20
     177 940E 1E21 CALL	empy16s
     179 01F8      MOVW	R30,R16
     17A EE81      LDI	R24,0xE1
     17B E090      LDI	R25,0
     17C 0FE8      ADD	R30,R24
     17D 1FF9      ADC	R31,R25
     17E 9027      ELPM	R2,Z+
     17F 9037      ELPM	R3,Z+
     180 9006      ELPM	R0,0(Z)
     181 BE0C      OUT	0x3C,R0
     182 01F1      MOVW	R30,R2
     183 9419      IJMP
(0099) 			case 1:
(0100) 				 tripod_gait(legNo, 1);
     184 E021      LDI	R18,1
     185 9100 0216 LDS	R16,legNo
     187 940E 0240 CALL	_tripod_gait
(0101) 				 break;
     189 C0B3      RJMP	0x023D
(0102) 			case 2:
(0103) 				 tripod_gait_2(legNo, 1);
     18A E021      LDI	R18,1
     18B 9100 0216 LDS	R16,legNo
     18D 940E 0332 CALL	_tripod_gait_2
(0104) 				 break;
     18F C0AD      RJMP	0x023D
(0105) 			case 3:
(0106) 				 tripod_gait_continuous(legNo, 1);
     190 E021      LDI	R18,1
     191 9100 0216 LDS	R16,legNo
     193 940E 0902 CALL	_tripod_gait_continuous
(0107) 				 break;
     195 C0A7      RJMP	0x023D
(0108) 			case 4:
(0109) 				 tripod_gait_insect_continuous(legNo, 1);
     196 E021      LDI	R18,1
     197 9100 0216 LDS	R16,legNo
     199 940E 0A11 CALL	_tripod_gait_insect_continuous
(0110) 				 break;
     19B C0A1      RJMP	0x023D
(0111) 			case 5:
(0112) 				 wave_gait(legNo, 1);
     19C E021      LDI	R18,1
     19D E030      LDI	R19,0
     19E 9100 0216 LDS	R16,legNo
     1A0 940E 0B2D CALL	_wave_gait
(0113) 				 break;
     1A2 C09A      RJMP	0x023D
(0114) 			case 6:
(0115) 				 ripple_gait(legNo, 1);
     1A3 E021      LDI	R18,1
     1A4 E030      LDI	R19,0
     1A5 9100 0216 LDS	R16,legNo
     1A7 940E 0C64 CALL	_ripple_gait
(0116) 				 break;
     1A9 C093      RJMP	0x023D
(0117) 			case 7:
(0118) 				 tempDir = ((legNo + 1) % 6) + 1;
     1AA E026      LDI	R18,6
     1AB E030      LDI	R19,0
     1AC 9100 0216 LDS	R16,legNo
     1AE 9110 0217 LDS	R17,legNo+1
     1B0 5F0F      SUBI	R16,0xFF
     1B1 4F1F      SBCI	R17,0xFF
     1B2 940E 1DD9 CALL	mod16u
     1B4 01C8      MOVW	R24,R16
     1B5 9601      ADIW	R24,1
     1B6 9390 0213 STS	tempDir+1,R25
     1B8 9380 0212 STS	tempDir,R24
(0119) 				 tempDir = ((tempDir + 1) % 6) + 1;
     1BA E026      LDI	R18,6
     1BB E030      LDI	R19,0
     1BC 018C      MOVW	R16,R24
     1BD 5F0F      SUBI	R16,0xFF
     1BE 4F1F      SBCI	R17,0xFF
     1BF 940E 1DD9 CALL	mod16u
     1C1 01C8      MOVW	R24,R16
     1C2 9601      ADIW	R24,1
     1C3 9390 0213 STS	tempDir+1,R25
     1C5 9380 0212 STS	tempDir,R24
(0120) 				 tempDir = 7 - tempDir;
     1C7 011C      MOVW	R2,R24
     1C8 E087      LDI	R24,7
     1C9 E090      LDI	R25,0
     1CA 1982      SUB	R24,R2
     1CB 0993      SBC	R25,R3
     1CC 9390 0213 STS	tempDir+1,R25
     1CE 9380 0212 STS	tempDir,R24
(0121) 				 two_leg_gait(legNo, tempDir, 1);
     1D0 E081      LDI	R24,1
     1D1 E090      LDI	R25,0
     1D2 8399      STD	Y+1,R25
     1D3 8388      STD	Y+0,R24
     1D4 9120 0212 LDS	R18,tempDir
     1D6 9100 0216 LDS	R16,legNo
     1D8 940E 0495 CALL	_two_leg_gait
(0122) 				 break;
     1DA C062      RJMP	0x023D
(0123) 			case 8:
(0124) 				 break;
(0125) 			case 9:
(0126) 				 break;
(0127) 			case 11:
(0128) 				 tripod_turn_gait(dir, 1);
     1DB E021      LDI	R18,1
     1DC 9100 0214 LDS	R16,dir
     1DE 940E 05AB CALL	_tripod_turn_gait
(0129) 				 break;
     1E0 C05C      RJMP	0x023D
(0130) 			case 12:
(0131) 				 tripod_turn_gait_continuous(dir, 1);
     1E1 E021      LDI	R18,1
     1E2 9100 0214 LDS	R16,dir
     1E4 940E 06BE CALL	_tripod_turn_gait_continuous
(0132) 				 break;
     1E6 C056      RJMP	0x023D
(0133) 			case 13:
(0134) 				 two_legged_turn_gait(dir, 1);
     1E7 E021      LDI	R18,1
     1E8 9100 0214 LDS	R16,dir
     1EA 940E 07E7 CALL	_two_legged_turn_gait
(0135) 				 break;	 
     1EC C050      RJMP	0x023D
(0136) 			case 14:
(0137) 				 if (dir == CLOCK_WISE){
     1ED 9180 0214 LDS	R24,dir
     1EF 9190 0215 LDS	R25,dir+1
     1F1 3081      CPI	R24,1
     1F2 E0E0      LDI	R30,0
     1F3 079E      CPC	R25,R30
     1F4 F419      BNE	0x01F8
(0138) 				 	robot_rotate_clockwise_7_5();
     1F5 940E 1399 CALL	_robot_rotate_clockwise_7_5
(0139) 				 }
     1F7 C045      RJMP	0x023D
(0140) 				 else{
(0141) 				 	  robot_rotate_anticlockwise_7_5();
     1F8 940E 13B8 CALL	_robot_rotate_anticlockwise_7_5
(0142) 				 }
(0143) 				 break;
     1FA C042      RJMP	0x023D
(0144) 		    case 21:
(0145) 				 tempDir = ((legNo + 1) % 6) + 1;
     1FB E026      LDI	R18,6
     1FC E030      LDI	R19,0
     1FD 9100 0216 LDS	R16,legNo
     1FF 9110 0217 LDS	R17,legNo+1
     201 5F0F      SUBI	R16,0xFF
     202 4F1F      SBCI	R17,0xFF
     203 940E 1DD9 CALL	mod16u
     205 01C8      MOVW	R24,R16
     206 9601      ADIW	R24,1
     207 9390 0213 STS	tempDir+1,R25
     209 9380 0212 STS	tempDir,R24
(0146) 				 tempDir = ((tempDir + 1) % 6) + 1;
     20B E026      LDI	R18,6
     20C E030      LDI	R19,0
     20D 018C      MOVW	R16,R24
     20E 5F0F      SUBI	R16,0xFF
     20F 4F1F      SBCI	R17,0xFF
     210 940E 1DD9 CALL	mod16u
     212 01C8      MOVW	R24,R16
     213 9601      ADIW	R24,1
     214 9390 0213 STS	tempDir+1,R25
     216 9380 0212 STS	tempDir,R24
(0147) 				 tempDir = 7 - tempDir;
     218 011C      MOVW	R2,R24
     219 E087      LDI	R24,7
     21A E090      LDI	R25,0
     21B 1982      SUB	R24,R2
     21C 0993      SBC	R25,R3
     21D 9390 0213 STS	tempDir+1,R25
     21F 9380 0212 STS	tempDir,R24
(0148) 				 pose(legNo, tempDir, 10);
     221 E08A      LDI	R24,0xA
     222 E090      LDI	R25,0
     223 8399      STD	Y+1,R25
     224 8388      STD	Y+0,R24
     225 9120 0212 LDS	R18,tempDir
     227 9100 0216 LDS	R16,legNo
     229 940E 16F7 CALL	_pose
(0149) 				 break;
     22B C011      RJMP	0x023D
(0150) 			case 22:
(0151) 				 sway(24, CLOCK_WISE);
     22C E021      LDI	R18,1
     22D E108      LDI	R16,0x18
     22E E010      LDI	R17,0
     22F 940E 1871 CALL	_sway
(0152) 				 break;
     231 C00B      RJMP	0x023D
(0153) 		    case 23:
(0154) 				 dance(4,5,6);
     232 E086      LDI	R24,6
     233 E090      LDI	R25,0
     234 8399      STD	Y+1,R25
     235 8388      STD	Y+0,R24
     236 E025      LDI	R18,5
     237 E004      LDI	R16,4
     238 940E 17C6 CALL	_dance
(0155) 				 break;
     23A C002      RJMP	0x023D
(0156) 			case 24:
(0157) 				 climb();
     23B 940E 197B CALL	_climb
     23D CF28      RJMP	0x0166
     23E 9622      ADIW	R28,2
     23F 9508      RET
_tripod_gait:
  step_forward         --> R20
  delay_time           --> R14
  step_side            --> R12
  dir6                 --> R10
  dir4                 --> Y,+4
  dir2                 --> Y,+3
  dir5                 --> Y,+2
  dir3                 --> Y,+1
  lift                 --> R22
  steps                --> Y,+17
  dir1                 --> Y,+15
     240 940E 1DB6 CALL	push_arg4
     242 940E 1E45 CALL	push_xgsetF0FC
     244 9725      SBIW	R28,5
FILE: C:\Users\ERTSLA~1\Downloads\BUILDI~2\gait.c
(0001) /***
(0002) Author : Srijit Dutt
(0003) Date Sun 07 Nov 2010 02:42:38 PM IST 
(0004) 
(0005) gait.c : File contains various walking motion functions for the hexapod
(0006) Please include gait.h file to call function from this file
(0007) 
(0008) */
(0009) 
(0010) 
(0011) /********************************************************************************
(0012) 
(0013)    Copyright (c) 2010, ERTS Lab IIT Bombay erts@cse.iitb.ac.in               -*- c -*-
(0014)    All rights reserved.
(0015) 
(0016)    Redistribution and use in source and binary forms, with or without
(0017)    modification, are permitted provided that the following conditions are met:
(0018) 
(0019)    * Redistributions of source code must retain the above copyright
(0020)      notice, this list of conditions and the following disclaimer.
(0021) 
(0022)    * Redistributions in binary form must reproduce the above copyright
(0023)      notice, this list of conditions and the following disclaimer in
(0024)      the documentation and/or other materials provided with the
(0025)      distribution.
(0026) 
(0027)    * Neither the name of the copyright holders nor the names of
(0028)      contributors may be used to endorse or promote products derived
(0029)      from this software without specific prior written permission.
(0030) 
(0031)    * Source code can be used for academic purpose. 
(0032) 	 For commercial use permission form the author needs to be taken.
(0033) 
(0034)   THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
(0035)   AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
(0036)   IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
(0037)   ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
(0038)   LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
(0039)   CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
(0040)   SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
(0041)   INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
(0042)   CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
(0043)   ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
(0044)   POSSIBILITY OF SUCH DAMAGE. 
(0045) 
(0046)   Software released under Creative Commence cc by-nc-sa licence.
(0047)   For legal information refer to: 
(0048)   http://creativecommons.org/licenses/by-nc-sa/3.0/legalcode
(0049) 
(0050) ********************************************************************************/
(0051) 
(0052) 
(0053) #include "hexapod_macro.h"
(0054) #include "hexapod_basic.h"
(0055) #include "hexapod.h"
(0056) 
(0057) extern double movementScaling;
(0058) 
(0059) /**
(0060) Tripod gait moves the hexapod in the direction dir1 for steps.
(0061) Three legs forming a tripod move first then the other three legs move  
(0062) Used for normal gait of the hexapod
(0063) @param dir1 : Direction of motion
(0064) @param steps : number of steps
(0065) */
(0066) void tripod_gait(unsigned char dir1, unsigned char steps) 
(0067) {
(0068) 	unsigned char dir3 = ((dir1 + 1) % 6) + 1;
     245 E016      LDI	R17,6
     246 850F      LDD	R16,Y+15
     247 5F0F      SUBI	R16,0xFF
     248 940E 1DF5 CALL	mod8u
     24A 2F80      MOV	R24,R16
     24B 5F8F      SUBI	R24,0xFF
     24C 8389      STD	Y+1,R24
(0069) 	unsigned char dir5 = ((dir3 + 1) % 6) + 1;
     24D E016      LDI	R17,6
     24E 2F08      MOV	R16,R24
     24F 5F0F      SUBI	R16,0xFF
     250 940E 1DF5 CALL	mod8u
     252 2F80      MOV	R24,R16
     253 5F8F      SUBI	R24,0xFF
     254 838A      STD	Y+2,R24
(0070) 	unsigned char dir2 = 7 - dir5;
     255 2E28      MOV	R2,R24
     256 E087      LDI	R24,7
     257 1982      SUB	R24,R2
     258 838B      STD	Y+3,R24
(0071) 	unsigned char dir4 = 7 - dir3;
     259 8029      LDD	R2,Y+1
     25A E087      LDI	R24,7
     25B 1982      SUB	R24,R2
     25C 838C      STD	Y+4,R24
(0072) 	unsigned char dir6 = 7 - dir1;
     25D E087      LDI	R24,7
     25E 2EA8      MOV	R10,R24
     25F 840F      LDD	R0,Y+15
     260 18A0      SUB	R10,R0
(0073) 	unsigned char step_forward = 70;
     261 E446      LDI	R20,0x46
(0074) 	unsigned char step_side = 50;
     262 E382      LDI	R24,0x32
     263 2EC8      MOV	R12,R24
(0075) 	unsigned char lift = 40;
     264 E268      LDI	R22,0x28
(0076) 	int delay_time = 150;//TWO_HUNDRED_FIFTY_MSEC;
     265 E986      LDI	R24,0x96
     266 E090      LDI	R25,0
     267 017C      MOVW	R14,R24
(0077) 	
(0078) 		
(0079) 	// The following is done to keep dir3 to the left of dir1 and dir5 to the right of dir1
(0080) 	if(dir1%2 == 0) 
     268 E012      LDI	R17,2
     269 2D00      MOV	R16,R0
     26A 940E 1DF5 CALL	mod8u
     26C 2300      TST	R16
     26D F009      BEQ	0x026F
     26E C0B5      RJMP	0x0324
(0081) 	{
(0082) 		swap(&dir2, &dir4);
     26F 019E      MOVW	R18,R28
     270 5F2C      SUBI	R18,0xFC
     271 4F3F      SBCI	R19,0xFF
     272 018E      MOVW	R16,R28
     273 5F0D      SUBI	R16,0xFD
     274 4F1F      SBCI	R17,0xFF
     275 940E 1629 CALL	_swap
(0083) 		swap(&dir3, &dir5);	  
     277 019E      MOVW	R18,R28
     278 5F2E      SUBI	R18,0xFE
     279 4F3F      SBCI	R19,0xFF
     27A 018E      MOVW	R16,R28
     27B 5F0F      SUBI	R16,0xFF
     27C 4F1F      SBCI	R17,0xFF
     27D 940E 1629 CALL	_swap
(0084) 	}
     27F C0A4      RJMP	0x0324
(0085) 	
(0086) 	while (steps-- > 0) 
(0087) 	{		
(0088) 		//picking up even tripod
(0089) 		angle(dir2, MOTOR_B, lift);
     280 8368      STD	Y+0,R22
     281 E422      LDI	R18,0x42
     282 810B      LDD	R16,Y+3
     283 940E 151C CALL	_angle
(0090) 		angle(dir4, MOTOR_B, lift);
     285 8368      STD	Y+0,R22
     286 E422      LDI	R18,0x42
     287 810C      LDD	R16,Y+4
     288 940E 151C CALL	_angle
(0091) 		angle(dir6, MOTOR_B, lift);
     28A 8368      STD	Y+0,R22
     28B E422      LDI	R18,0x42
     28C 2D0A      MOV	R16,R10
     28D 940E 151C CALL	_angle
(0092) 		
(0093) 		delay(delay_time);
     28F 0187      MOVW	R16,R14
     290 940E 14C9 CALL	_delay
(0094) 		
(0095) 		//moving body on odd tripod
(0096) 		angle(dir1, MOTOR_C, 90);
     292 E58A      LDI	R24,0x5A
     293 8388      STD	Y+0,R24
     294 E423      LDI	R18,0x43
     295 850F      LDD	R16,Y+15
     296 940E 151C CALL	_angle
(0097) 		angle(dir3, MOTOR_A, 90);
     298 E58A      LDI	R24,0x5A
     299 8388      STD	Y+0,R24
     29A E421      LDI	R18,0x41
     29B 8109      LDD	R16,Y+1
     29C 940E 151C CALL	_angle
(0098) 		angle(dir5, MOTOR_A, 90);
     29E E58A      LDI	R24,0x5A
     29F 8388      STD	Y+0,R24
     2A0 E421      LDI	R18,0x41
     2A1 810A      LDD	R16,Y+2
     2A2 940E 151C CALL	_angle
(0099) 		
(0100) 		//moving legs even forward in air
(0101) 		angle(dir2, MOTOR_A, 90 - step_side);
     2A4 E58A      LDI	R24,0x5A
     2A5 198C      SUB	R24,R12
     2A6 8388      STD	Y+0,R24
     2A7 E421      LDI	R18,0x41
     2A8 810B      LDD	R16,Y+3
     2A9 940E 151C CALL	_angle
(0102) 		angle(dir4, MOTOR_A, 90 + step_side);
     2AB 2D8C      MOV	R24,R12
     2AC 5A86      SUBI	R24,0xA6
     2AD 8388      STD	Y+0,R24
     2AE E421      LDI	R18,0x41
     2AF 810C      LDD	R16,Y+4
     2B0 940E 151C CALL	_angle
(0103) 		angle(dir6, MOTOR_C, 90 - step_forward);
     2B2 E58A      LDI	R24,0x5A
     2B3 1B84      SUB	R24,R20
     2B4 8388      STD	Y+0,R24
     2B5 E423      LDI	R18,0x43
     2B6 2D0A      MOV	R16,R10
     2B7 940E 151C CALL	_angle
(0104) 		
(0105) 		delay(delay_time);
     2B9 0187      MOVW	R16,R14
     2BA 940E 14C9 CALL	_delay
(0106) 
(0107) 		//putting down even legs
(0108) 		angle(dir2, MOTOR_B, 90);
     2BC E58A      LDI	R24,0x5A
     2BD 8388      STD	Y+0,R24
     2BE E422      LDI	R18,0x42
     2BF 810B      LDD	R16,Y+3
     2C0 940E 151C CALL	_angle
(0109) 		angle(dir4, MOTOR_B, 90);
     2C2 E58A      LDI	R24,0x5A
     2C3 8388      STD	Y+0,R24
     2C4 E422      LDI	R18,0x42
     2C5 810C      LDD	R16,Y+4
     2C6 940E 151C CALL	_angle
(0110) 		angle(dir6, MOTOR_B, 90);
     2C8 E58A      LDI	R24,0x5A
     2C9 8388      STD	Y+0,R24
     2CA E422      LDI	R18,0x42
     2CB 2D0A      MOV	R16,R10
     2CC 940E 151C CALL	_angle
(0111) 		
(0112) 		delay(HUNDRED_MSEC);
     2CE E208      LDI	R16,0x28
     2CF E010      LDI	R17,0
     2D0 940E 14C9 CALL	_delay
(0113) 		
(0114) 		//picking up odd legs
(0115) 		angle(dir1, MOTOR_B, lift);
     2D2 8368      STD	Y+0,R22
     2D3 E422      LDI	R18,0x42
     2D4 850F      LDD	R16,Y+15
     2D5 940E 151C CALL	_angle
(0116) 		angle(dir3, MOTOR_B, lift);
     2D7 8368      STD	Y+0,R22
     2D8 E422      LDI	R18,0x42
     2D9 8109      LDD	R16,Y+1
     2DA 940E 151C CALL	_angle
(0117) 		angle(dir5, MOTOR_B, lift);
     2DC 8368      STD	Y+0,R22
     2DD E422      LDI	R18,0x42
     2DE 810A      LDD	R16,Y+2
     2DF 940E 151C CALL	_angle
(0118) 		delay(delay_time);
     2E1 0187      MOVW	R16,R14
     2E2 940E 14C9 CALL	_delay
(0119) 
(0120) 		//moving the odd legs in air
(0121) 		angle(dir1, MOTOR_C, 90 + step_forward);
     2E4 2F84      MOV	R24,R20
     2E5 5A86      SUBI	R24,0xA6
     2E6 8388      STD	Y+0,R24
     2E7 E423      LDI	R18,0x43
     2E8 850F      LDD	R16,Y+15
     2E9 940E 151C CALL	_angle
(0122) 		angle(dir3, MOTOR_A, 90 - step_side);
     2EB E58A      LDI	R24,0x5A
     2EC 198C      SUB	R24,R12
     2ED 8388      STD	Y+0,R24
     2EE E421      LDI	R18,0x41
     2EF 8109      LDD	R16,Y+1
     2F0 940E 151C CALL	_angle
(0123) 		angle(dir5, MOTOR_A, 90 + step_side);
     2F2 2D8C      MOV	R24,R12
     2F3 5A86      SUBI	R24,0xA6
     2F4 8388      STD	Y+0,R24
     2F5 E421      LDI	R18,0x41
     2F6 810A      LDD	R16,Y+2
     2F7 940E 151C CALL	_angle
(0124) 
(0125) 		//moving the body forward on even tripod
(0126) 		angle(dir2, MOTOR_A, 90);
     2F9 E58A      LDI	R24,0x5A
     2FA 8388      STD	Y+0,R24
     2FB E421      LDI	R18,0x41
     2FC 810B      LDD	R16,Y+3
     2FD 940E 151C CALL	_angle
(0127) 		angle(dir4, MOTOR_A, 90);
     2FF E58A      LDI	R24,0x5A
     300 8388      STD	Y+0,R24
     301 E421      LDI	R18,0x41
     302 810C      LDD	R16,Y+4
     303 940E 151C CALL	_angle
(0128) 		angle(dir6, MOTOR_C, 90);
     305 E58A      LDI	R24,0x5A
     306 8388      STD	Y+0,R24
     307 E423      LDI	R18,0x43
     308 2D0A      MOV	R16,R10
     309 940E 151C CALL	_angle
(0129) 		
(0130) 		delay(delay_time);
     30B 0187      MOVW	R16,R14
     30C 940E 14C9 CALL	_delay
(0131) 		
(0132) 		//puuting down odd tripod
(0133) 		angle(dir1, MOTOR_B, 90);
     30E E58A      LDI	R24,0x5A
     30F 8388      STD	Y+0,R24
     310 E422      LDI	R18,0x42
     311 850F      LDD	R16,Y+15
     312 940E 151C CALL	_angle
(0134) 		angle(dir3, MOTOR_B, 90);
     314 E58A      LDI	R24,0x5A
     315 8388      STD	Y+0,R24
     316 E422      LDI	R18,0x42
     317 8109      LDD	R16,Y+1
     318 940E 151C CALL	_angle
(0135) 		angle(dir5, MOTOR_B, 90);
     31A E58A      LDI	R24,0x5A
     31B 8388      STD	Y+0,R24
     31C E422      LDI	R18,0x42
     31D 810A      LDD	R16,Y+2
     31E 940E 151C CALL	_angle
(0136) 		
(0137) 		delay(HUNDRED_MSEC);
     320 E208      LDI	R16,0x28
     321 E010      LDI	R17,0
     322 940E 14C9 CALL	_delay
     324 8829      LDD	R2,Y+17
     325 2433      CLR	R3
     326 2D82      MOV	R24,R2
     327 5081      SUBI	R24,1
     328 8B89      STD	Y+17,R24
     329 E080      LDI	R24,0
     32A 1582      CP	R24,R2
     32B F408      BCC	0x032D
     32C CF53      RJMP	0x0280
     32D 9625      ADIW	R28,5
     32E 940E 1E3A CALL	pop_xgsetF0FC
     330 9624      ADIW	R28,4
     331 9508      RET
_tripod_gait_2:
  delay_time1          --> R10
  step_forward         --> R20
  step_side            --> R14
  delay_time           --> R12
  lift                 --> R22
  dir6                 --> Y,+5
  dir4                 --> Y,+4
  dir2                 --> Y,+3
  dir5                 --> Y,+2
  dir3                 --> Y,+1
  steps                --> Y,+18
  dir1                 --> Y,+16
     332 940E 1DB6 CALL	push_arg4
     334 940E 1E45 CALL	push_xgsetF0FC
     336 9726      SBIW	R28,6
(0138) 	}
(0139) 	
(0140) }
(0141) 
(0142) /**
(0143) Tripod Gait 2 : Better suited for uneven terrain
(0144) @param dir1 : Direction of motion
(0145) @param steps : number of steps
(0146) */
(0147) void tripod_gait_2(unsigned char dir1, unsigned char steps) 
(0148) {
(0149) 	unsigned char dir3 = ((dir1 + 1) % 6) + 1;
     337 E016      LDI	R17,6
     338 8908      LDD	R16,Y+16
     339 5F0F      SUBI	R16,0xFF
     33A 940E 1DF5 CALL	mod8u
     33C 2F80      MOV	R24,R16
     33D 5F8F      SUBI	R24,0xFF
     33E 8389      STD	Y+1,R24
(0150) 	unsigned char dir5 = ((dir3 + 1) % 6) + 1;
     33F E016      LDI	R17,6
     340 2F08      MOV	R16,R24
     341 5F0F      SUBI	R16,0xFF
     342 940E 1DF5 CALL	mod8u
     344 2F80      MOV	R24,R16
     345 5F8F      SUBI	R24,0xFF
     346 838A      STD	Y+2,R24
(0151) 	unsigned char dir2 = 7 - dir5;
     347 2E28      MOV	R2,R24
     348 E087      LDI	R24,7
     349 1982      SUB	R24,R2
     34A 838B      STD	Y+3,R24
(0152) 	unsigned char dir4 = 7 - dir3;
     34B 8029      LDD	R2,Y+1
     34C E087      LDI	R24,7
     34D 1982      SUB	R24,R2
     34E 838C      STD	Y+4,R24
(0153) 	unsigned char dir6 = 7 - dir1;
     34F E087      LDI	R24,7
     350 8808      LDD	R0,Y+16
     351 1980      SUB	R24,R0
     352 838D      STD	Y+5,R24
(0154) 	unsigned char step_forward = 60;
     353 E34C      LDI	R20,0x3C
(0155) 	unsigned char step_side = 60;
     354 E38C      LDI	R24,0x3C
     355 2EE8      MOV	R14,R24
(0156) 	unsigned char lift = 40;
     356 E268      LDI	R22,0x28
(0157) 	int delay_time = ONE_SEC;
     357 E980      LDI	R24,0x90
     358 E091      LDI	R25,1
     359 016C      MOVW	R12,R24
(0158) 	int delay_time1 = ONE_SEC;
     35A 015C      MOVW	R10,R24
(0159) 	
(0160) 	if(dir1%2 == 0) 
     35B E012      LDI	R17,2
     35C 8908      LDD	R16,Y+16
     35D 940E 1DF5 CALL	mod8u
     35F 2300      TST	R16
     360 F009      BEQ	0x0362
     361 C125      RJMP	0x0487
(0161) 	{
(0162) 		swap(&dir2, &dir4);
     362 019E      MOVW	R18,R28
     363 5F2C      SUBI	R18,0xFC
     364 4F3F      SBCI	R19,0xFF
     365 018E      MOVW	R16,R28
     366 5F0D      SUBI	R16,0xFD
     367 4F1F      SBCI	R17,0xFF
     368 940E 1629 CALL	_swap
(0163) 		swap(&dir3, &dir5);	  
     36A 019E      MOVW	R18,R28
     36B 5F2E      SUBI	R18,0xFE
     36C 4F3F      SBCI	R19,0xFF
     36D 018E      MOVW	R16,R28
     36E 5F0F      SUBI	R16,0xFF
     36F 4F1F      SBCI	R17,0xFF
     370 940E 1629 CALL	_swap
(0164) 	}
     372 C114      RJMP	0x0487
(0165) 	
(0166) 	while (steps-- > 0) 
(0167) 	{
(0168) 		//puuting down odd tripod
(0169) 		angle(dir1, MOTOR_C, 90);
     373 E58A      LDI	R24,0x5A
     374 8388      STD	Y+0,R24
     375 E423      LDI	R18,0x43
     376 8908      LDD	R16,Y+16
     377 940E 151C CALL	_angle
(0170) 		angle(dir3, MOTOR_C, 90);
     379 E58A      LDI	R24,0x5A
     37A 8388      STD	Y+0,R24
     37B E423      LDI	R18,0x43
     37C 8109      LDD	R16,Y+1
     37D 940E 151C CALL	_angle
(0171) 		angle(dir5, MOTOR_C, 90);
     37F E58A      LDI	R24,0x5A
     380 8388      STD	Y+0,R24
     381 E423      LDI	R18,0x43
     382 810A      LDD	R16,Y+2
     383 940E 151C CALL	_angle
(0172) 		angle(dir1, MOTOR_B, 90);
     385 E58A      LDI	R24,0x5A
     386 8388      STD	Y+0,R24
     387 E422      LDI	R18,0x42
     388 8908      LDD	R16,Y+16
     389 940E 151C CALL	_angle
(0173) 		angle(dir3, MOTOR_B, 90);
     38B E58A      LDI	R24,0x5A
     38C 8388      STD	Y+0,R24
     38D E422      LDI	R18,0x42
     38E 8109      LDD	R16,Y+1
     38F 940E 151C CALL	_angle
(0174) 		angle(dir5, MOTOR_B, 90);
     391 E58A      LDI	R24,0x5A
     392 8388      STD	Y+0,R24
     393 E422      LDI	R18,0x42
     394 810A      LDD	R16,Y+2
     395 940E 151C CALL	_angle
(0175) 		
(0176) 		delay(delay_time1);
     397 0185      MOVW	R16,R10
     398 940E 14C9 CALL	_delay
(0177) 		
(0178) 		//picking up even tripod
(0179) 		angle(dir2, MOTOR_B, lift);
     39A 8368      STD	Y+0,R22
     39B E422      LDI	R18,0x42
     39C 810B      LDD	R16,Y+3
     39D 940E 151C CALL	_angle
(0180) 		angle(dir4, MOTOR_B, lift);
     39F 8368      STD	Y+0,R22
     3A0 E422      LDI	R18,0x42
     3A1 810C      LDD	R16,Y+4
     3A2 940E 151C CALL	_angle
(0181) 		angle(dir6, MOTOR_B, lift);
     3A4 8368      STD	Y+0,R22
     3A5 E422      LDI	R18,0x42
     3A6 810D      LDD	R16,Y+5
     3A7 940E 151C CALL	_angle
(0182) 		angle(dir2, MOTOR_C, 0);
     3A9 2422      CLR	R2
     3AA 8228      STD	Y+0,R2
     3AB E423      LDI	R18,0x43
     3AC 810B      LDD	R16,Y+3
     3AD 940E 151C CALL	_angle
(0183) 		angle(dir4, MOTOR_C, 0);
     3AF 2422      CLR	R2
     3B0 8228      STD	Y+0,R2
     3B1 E423      LDI	R18,0x43
     3B2 810C      LDD	R16,Y+4
     3B3 940E 151C CALL	_angle
(0184) 		angle(dir6, MOTOR_C, 0);
     3B5 2422      CLR	R2
     3B6 8228      STD	Y+0,R2
     3B7 E423      LDI	R18,0x43
     3B8 810D      LDD	R16,Y+5
     3B9 940E 151C CALL	_angle
(0185) 		delay(delay_time);
     3BB 0186      MOVW	R16,R12
     3BC 940E 14C9 CALL	_delay
(0186) 
(0187) 		//moving body on odd tripod
(0188) 		angle(dir1, MOTOR_A, 90);
     3BE E58A      LDI	R24,0x5A
     3BF 8388      STD	Y+0,R24
     3C0 E421      LDI	R18,0x41
     3C1 8908      LDD	R16,Y+16
     3C2 940E 151C CALL	_angle
(0189) 		angle(dir3, MOTOR_A, 90);
     3C4 E58A      LDI	R24,0x5A
     3C5 8388      STD	Y+0,R24
     3C6 E421      LDI	R18,0x41
     3C7 8109      LDD	R16,Y+1
     3C8 940E 151C CALL	_angle
(0190) 		angle(dir5, MOTOR_A, 90);
     3CA E58A      LDI	R24,0x5A
     3CB 8388      STD	Y+0,R24
     3CC E421      LDI	R18,0x41
     3CD 810A      LDD	R16,Y+2
     3CE 940E 151C CALL	_angle
(0191) 		
(0192) 		delay(delay_time);
     3D0 0186      MOVW	R16,R12
     3D1 940E 14C9 CALL	_delay
(0193) 		
(0194) 		//moving legs even forward in air
(0195) 		angle(dir2, MOTOR_C, 180);
     3D3 EB84      LDI	R24,0xB4
     3D4 8388      STD	Y+0,R24
     3D5 E423      LDI	R18,0x43
     3D6 810B      LDD	R16,Y+3
     3D7 940E 151C CALL	_angle
(0196) 		angle(dir4, MOTOR_C, 180);
     3D9 EB84      LDI	R24,0xB4
     3DA 8388      STD	Y+0,R24
     3DB E423      LDI	R18,0x43
     3DC 810C      LDD	R16,Y+4
     3DD 940E 151C CALL	_angle
(0197) 		angle(dir6, MOTOR_C, 180);
     3DF EB84      LDI	R24,0xB4
     3E0 8388      STD	Y+0,R24
     3E1 E423      LDI	R18,0x43
     3E2 810D      LDD	R16,Y+5
     3E3 940E 151C CALL	_angle
(0198) 		angle(dir2, MOTOR_A, 90 - step_side);
     3E5 E58A      LDI	R24,0x5A
     3E6 198E      SUB	R24,R14
     3E7 8388      STD	Y+0,R24
     3E8 E421      LDI	R18,0x41
     3E9 810B      LDD	R16,Y+3
     3EA 940E 151C CALL	_angle
(0199) 		angle(dir4, MOTOR_A, 90 + step_side);
     3EC 2D8E      MOV	R24,R14
     3ED 5A86      SUBI	R24,0xA6
     3EE 8388      STD	Y+0,R24
     3EF E421      LDI	R18,0x41
     3F0 810C      LDD	R16,Y+4
     3F1 940E 151C CALL	_angle
(0200) 		angle(dir6, MOTOR_A, 90 + step_forward);
     3F3 2F84      MOV	R24,R20
     3F4 5A86      SUBI	R24,0xA6
     3F5 8388      STD	Y+0,R24
     3F6 E421      LDI	R18,0x41
     3F7 810D      LDD	R16,Y+5
     3F8 940E 151C CALL	_angle
(0201) 		delay(delay_time);
     3FA 0186      MOVW	R16,R12
     3FB 940E 14C9 CALL	_delay
(0202) 
(0203) 		//putting down even legs
(0204) 		angle(dir2, MOTOR_C, 90);
     3FD E58A      LDI	R24,0x5A
     3FE 8388      STD	Y+0,R24
     3FF E423      LDI	R18,0x43
     400 810B      LDD	R16,Y+3
     401 940E 151C CALL	_angle
(0205) 		angle(dir4, MOTOR_C, 90);
     403 E58A      LDI	R24,0x5A
     404 8388      STD	Y+0,R24
     405 E423      LDI	R18,0x43
     406 810C      LDD	R16,Y+4
     407 940E 151C CALL	_angle
(0206) 		angle(dir6, MOTOR_C, 90);
     409 E58A      LDI	R24,0x5A
     40A 8388      STD	Y+0,R24
     40B E423      LDI	R18,0x43
     40C 810D      LDD	R16,Y+5
     40D 940E 151C CALL	_angle
(0207) 		angle(dir2, MOTOR_B, 90);
     40F E58A      LDI	R24,0x5A
     410 8388      STD	Y+0,R24
     411 E422      LDI	R18,0x42
     412 810B      LDD	R16,Y+3
     413 940E 151C CALL	_angle
(0208) 		angle(dir4, MOTOR_B, 90);
     415 E58A      LDI	R24,0x5A
     416 8388      STD	Y+0,R24
     417 E422      LDI	R18,0x42
     418 810C      LDD	R16,Y+4
     419 940E 151C CALL	_angle
(0209) 		angle(dir6, MOTOR_B, 90);
     41B E58A      LDI	R24,0x5A
     41C 8388      STD	Y+0,R24
     41D E422      LDI	R18,0x42
     41E 810D      LDD	R16,Y+5
     41F 940E 151C CALL	_angle
(0210) 		
(0211) 		delay(delay_time1);
     421 0185      MOVW	R16,R10
     422 940E 14C9 CALL	_delay
(0212) 		
(0213) 		//picking up odd legs
(0214) 		angle(dir1, MOTOR_B, lift);
     424 8368      STD	Y+0,R22
     425 E422      LDI	R18,0x42
     426 8908      LDD	R16,Y+16
     427 940E 151C CALL	_angle
(0215) 		angle(dir3, MOTOR_B, lift);
     429 8368      STD	Y+0,R22
     42A E422      LDI	R18,0x42
     42B 8109      LDD	R16,Y+1
     42C 940E 151C CALL	_angle
(0216) 		angle(dir5, MOTOR_B, lift);
     42E 8368      STD	Y+0,R22
     42F E422      LDI	R18,0x42
     430 810A      LDD	R16,Y+2
     431 940E 151C CALL	_angle
(0217) 		angle(dir1, MOTOR_C, 0);
     433 2422      CLR	R2
     434 8228      STD	Y+0,R2
     435 E423      LDI	R18,0x43
     436 8908      LDD	R16,Y+16
     437 940E 151C CALL	_angle
(0218) 		angle(dir3, MOTOR_C, 0);
     439 2422      CLR	R2
     43A 8228      STD	Y+0,R2
     43B E423      LDI	R18,0x43
     43C 8109      LDD	R16,Y+1
     43D 940E 151C CALL	_angle
(0219) 		angle(dir5, MOTOR_C, 0);
     43F 2422      CLR	R2
     440 8228      STD	Y+0,R2
     441 E423      LDI	R18,0x43
     442 810A      LDD	R16,Y+2
     443 940E 151C CALL	_angle
(0220) 		delay(delay_time);
     445 0186      MOVW	R16,R12
     446 940E 14C9 CALL	_delay
(0221) 
(0222) 		//moving the odd legs in air
(0223) 		angle(dir1, MOTOR_C, 180);
     448 EB84      LDI	R24,0xB4
     449 8388      STD	Y+0,R24
     44A E423      LDI	R18,0x43
     44B 8908      LDD	R16,Y+16
     44C 940E 151C CALL	_angle
(0224) 		angle(dir3, MOTOR_C, 180);
     44E EB84      LDI	R24,0xB4
     44F 8388      STD	Y+0,R24
     450 E423      LDI	R18,0x43
     451 8109      LDD	R16,Y+1
     452 940E 151C CALL	_angle
(0225) 		angle(dir5, MOTOR_C, 180);
     454 EB84      LDI	R24,0xB4
     455 8388      STD	Y+0,R24
     456 E423      LDI	R18,0x43
     457 810A      LDD	R16,Y+2
     458 940E 151C CALL	_angle
(0226) 		angle(dir1, MOTOR_A, 90 + step_forward);
     45A 2F84      MOV	R24,R20
     45B 5A86      SUBI	R24,0xA6
     45C 8388      STD	Y+0,R24
     45D E421      LDI	R18,0x41
     45E 8908      LDD	R16,Y+16
     45F 940E 151C CALL	_angle
(0227) 		angle(dir3, MOTOR_A, 90 - step_side);
     461 E58A      LDI	R24,0x5A
     462 198E      SUB	R24,R14
     463 8388      STD	Y+0,R24
     464 E421      LDI	R18,0x41
     465 8109      LDD	R16,Y+1
     466 940E 151C CALL	_angle
(0228) 		angle(dir5, MOTOR_A, 90 + step_side);
     468 2D8E      MOV	R24,R14
     469 5A86      SUBI	R24,0xA6
     46A 8388      STD	Y+0,R24
     46B E421      LDI	R18,0x41
     46C 810A      LDD	R16,Y+2
     46D 940E 151C CALL	_angle
(0229) 		delay(delay_time);
     46F 0186      MOVW	R16,R12
     470 940E 14C9 CALL	_delay
(0230) 		
(0231) 		//moving the body forward on even tripod
(0232) 		angle(dir2, MOTOR_A, 90);
     472 E58A      LDI	R24,0x5A
     473 8388      STD	Y+0,R24
     474 E421      LDI	R18,0x41
     475 810B      LDD	R16,Y+3
     476 940E 151C CALL	_angle
(0233) 		angle(dir4, MOTOR_A, 90);
     478 E58A      LDI	R24,0x5A
     479 8388      STD	Y+0,R24
     47A E421      LDI	R18,0x41
     47B 810C      LDD	R16,Y+4
     47C 940E 151C CALL	_angle
(0234) 		angle(dir6, MOTOR_A, 90);
     47E E58A      LDI	R24,0x5A
     47F 8388      STD	Y+0,R24
     480 E421      LDI	R18,0x41
     481 810D      LDD	R16,Y+5
     482 940E 151C CALL	_angle
(0235) 		delay(delay_time);
     484 0186      MOVW	R16,R12
     485 940E 14C9 CALL	_delay
     487 882A      LDD	R2,Y+18
     488 2433      CLR	R3
     489 2D82      MOV	R24,R2
     48A 5081      SUBI	R24,1
     48B 8B8A      STD	Y+18,R24
     48C E080      LDI	R24,0
     48D 1582      CP	R24,R2
     48E F408      BCC	0x0490
     48F CEE3      RJMP	0x0373
     490 9626      ADIW	R28,6
     491 940E 1E3A CALL	pop_xgsetF0FC
     493 9624      ADIW	R28,4
     494 9508      RET
_two_leg_gait:
  legs_clock           --> Y,+8
  legs_anticlock       --> Y,+1
  delay_time2          --> R10
  delay_time1          --> R14
  step_side            --> R12
  dir6                 --> Y,+18
  dir5                 --> Y,+17
  dir4                 --> Y,+16
  dir3                 --> Y,+15
  lift                 --> R22
  step_forward         --> R20
  steps                --> Y,+33
  dir2                 --> Y,+31
  dir1                 --> Y,+29
     495 940E 1DB6 CALL	push_arg4
     497 940E 1E45 CALL	push_xgsetF0FC
     499 9763      SBIW	R28,0x13
(0236) 	}
(0237) }
(0238) 
(0239) /*
(0240) Two leg gait in which two legs are moved at a time
(0241) @param dir1 : Direction of motion
(0242) @param dir2 : Direction of motion
(0243) @param steps : number of steps
(0244) */
(0245) void two_leg_gait(unsigned char dir1, unsigned char dir2, int steps) 
(0246) {
(0247) 	 unsigned char legs_anticlock[] = {0,2,3,6,1,4,5};
     49A E68C      LDI	R24,0x6C
     49B E091      LDI	R25,1
     49C 01FE      MOVW	R30,R28
     49D 9631      ADIW	R30,1
     49E E007      LDI	R16,7
     49F E010      LDI	R17,0
     4A0 93FA      ST	R31,-Y
     4A1 93EA      ST	R30,-Y
     4A2 939A      ST	R25,-Y
     4A3 938A      ST	R24,-Y
     4A4 940E 1E8D CALL	asgncblkx
(0248) 	 unsigned char legs_clock[] = {0,4,1,2,5,6,3}; 
     4A6 E783      LDI	R24,0x73
     4A7 E091      LDI	R25,1
     4A8 01FE      MOVW	R30,R28
     4A9 9638      ADIW	R30,0x8
     4AA E007      LDI	R16,7
     4AB E010      LDI	R17,0
     4AC 93FA      ST	R31,-Y
     4AD 93EA      ST	R30,-Y
     4AE 939A      ST	R25,-Y
     4AF 938A      ST	R24,-Y
     4B0 940E 1E8D CALL	asgncblkx
(0249) 	 unsigned char dir3 = legs_anticlock[dir2];
     4B2 01CE      MOVW	R24,R28
     4B3 9601      ADIW	R24,1
     4B4 8DEF      LDD	R30,Y+31
     4B5 27FF      CLR	R31
     4B6 0FE8      ADD	R30,R24
     4B7 1FF9      ADC	R31,R25
     4B8 8020      LDD	R2,Z+0
     4B9 862F      STD	Y+15,R2
(0250) 	 unsigned char dir4 = legs_clock[dir1];
     4BA 01CE      MOVW	R24,R28
     4BB 9608      ADIW	R24,0x8
     4BC 8DED      LDD	R30,Y+29
     4BD 27FF      CLR	R31
     4BE 0FE8      ADD	R30,R24
     4BF 1FF9      ADC	R31,R25
     4C0 8020      LDD	R2,Z+0
     4C1 8A28      STD	Y+16,R2
(0251) 	 unsigned char dir5 = legs_clock[dir4];
     4C2 01CE      MOVW	R24,R28
     4C3 9608      ADIW	R24,0x8
     4C4 2DE2      MOV	R30,R2
     4C5 27FF      CLR	R31
     4C6 0FE8      ADD	R30,R24
     4C7 1FF9      ADC	R31,R25
     4C8 8020      LDD	R2,Z+0
     4C9 8A29      STD	Y+17,R2
(0252) 	 unsigned char dir6= legs_anticlock[dir3];
     4CA 01CE      MOVW	R24,R28
     4CB 9601      ADIW	R24,1
     4CC 85EF      LDD	R30,Y+15
     4CD 27FF      CLR	R31
     4CE 0FE8      ADD	R30,R24
     4CF 1FF9      ADC	R31,R25
     4D0 8020      LDD	R2,Z+0
     4D1 8A2A      STD	Y+18,R2
(0253) 	 unsigned char step_forward = 50 * movementScaling;
     4D2 EA06      LDI	R16,0xA6
     4D3 E011      LDI	R17,1
     4D4 940E 1E0D CALL	elpm32
     4D6 E08E      LDI	R24,0xE
     4D7 E092      LDI	R25,2
     4D8 939A      ST	R25,-Y
     4D9 938A      ST	R24,-Y
     4DA 940E 2028 CALL	fpmule1
     4DC 940E 1F24 CALL	fpint
     4DE 2F40      MOV	R20,R16
(0254) 	 unsigned char step_side = 40 * movementScaling;
     4DF EA02      LDI	R16,0xA2
     4E0 E011      LDI	R17,1
     4E1 940E 1E0D CALL	elpm32
     4E3 E08E      LDI	R24,0xE
     4E4 E092      LDI	R25,2
     4E5 939A      ST	R25,-Y
     4E6 938A      ST	R24,-Y
     4E7 940E 2028 CALL	fpmule1
     4E9 940E 1F24 CALL	fpint
     4EB 2EC0      MOV	R12,R16
(0255) 	 unsigned char lift = 40;
     4EC E268      LDI	R22,0x28
(0256) 	 int delay_time1 = FIVE_HUNDRED_MSEC;
     4ED EC88      LDI	R24,0xC8
     4EE E090      LDI	R25,0
     4EF 017C      MOVW	R14,R24
(0257) 	 int delay_time2 = FIVE_HUNDRED_MSEC;
     4F0 015C      MOVW	R10,R24
     4F1 C0A8      RJMP	0x059A
(0258) 	 
(0259) 	 while(steps-- > 0) 
(0260) 	 {
(0261) 	    //putting down legs 5 & 6
(0262) 		angle(dir5, MOTOR_B, 90);
     4F2 E58A      LDI	R24,0x5A
     4F3 8388      STD	Y+0,R24
     4F4 E422      LDI	R18,0x42
     4F5 8909      LDD	R16,Y+17
     4F6 940E 151C CALL	_angle
(0263) 		angle(dir6, MOTOR_B, 90);
     4F8 E58A      LDI	R24,0x5A
     4F9 8388      STD	Y+0,R24
     4FA E422      LDI	R18,0x42
     4FB 890A      LDD	R16,Y+18
     4FC 940E 151C CALL	_angle
(0264) 	 
(0265) 	 	//picking up 1 & 2 legs
(0266) 		angle(dir1, MOTOR_B, lift);
     4FE 8368      STD	Y+0,R22
     4FF E422      LDI	R18,0x42
     500 8D0D      LDD	R16,Y+29
     501 940E 151C CALL	_angle
(0267) 		angle(dir2, MOTOR_B, lift);
     503 8368      STD	Y+0,R22
     504 E422      LDI	R18,0x42
     505 8D0F      LDD	R16,Y+31
     506 940E 151C CALL	_angle
(0268) 		
(0269) 		//delay
(0270) 		delay(delay_time1);
     508 0187      MOVW	R16,R14
     509 940E 14C9 CALL	_delay
(0271) 		
(0272) 		//moving body on legs 5 & 6
(0273) 		angle(dir5, MOTOR_A, 90 - step_forward);
     50B E58A      LDI	R24,0x5A
     50C 1B84      SUB	R24,R20
     50D 8388      STD	Y+0,R24
     50E E421      LDI	R18,0x41
     50F 8909      LDD	R16,Y+17
     510 940E 151C CALL	_angle
(0274) 		angle(dir6, MOTOR_A, 90 + step_forward);
     512 2F84      MOV	R24,R20
     513 5A86      SUBI	R24,0xA6
     514 8388      STD	Y+0,R24
     515 E421      LDI	R18,0x41
     516 890A      LDD	R16,Y+18
     517 940E 151C CALL	_angle
(0275) 		
(0276) 		//moving 1 & 2 legs in air 
(0277) 		angle(dir1, MOTOR_A, 90 + step_forward);
     519 2F84      MOV	R24,R20
     51A 5A86      SUBI	R24,0xA6
     51B 8388      STD	Y+0,R24
     51C E421      LDI	R18,0x41
     51D 8D0D      LDD	R16,Y+29
     51E 940E 151C CALL	_angle
(0278) 		angle(dir2, MOTOR_A, 90 - step_forward);
     520 E58A      LDI	R24,0x5A
     521 1B84      SUB	R24,R20
     522 8388      STD	Y+0,R24
     523 E421      LDI	R18,0x41
     524 8D0F      LDD	R16,Y+31
     525 940E 151C CALL	_angle
(0279) 		
(0280) 		//delay
(0281) 		delay(delay_time1);
     527 0187      MOVW	R16,R14
     528 940E 14C9 CALL	_delay
(0282) 		
(0283) 		//putting 1 & 2 legs down
(0284) 		angle(dir1, MOTOR_B, 90);
     52A E58A      LDI	R24,0x5A
     52B 8388      STD	Y+0,R24
     52C E422      LDI	R18,0x42
     52D 8D0D      LDD	R16,Y+29
     52E 940E 151C CALL	_angle
(0285) 		angle(dir2, MOTOR_B, 90);
     530 E58A      LDI	R24,0x5A
     531 8388      STD	Y+0,R24
     532 E422      LDI	R18,0x42
     533 8D0F      LDD	R16,Y+31
     534 940E 151C CALL	_angle
(0286) 		
(0287) 		//picking up 3 & 4 legs		   
(0288) 	 	angle(dir3, MOTOR_B, lift);
     536 8368      STD	Y+0,R22
     537 E422      LDI	R18,0x42
     538 850F      LDD	R16,Y+15
     539 940E 151C CALL	_angle
(0289) 		angle(dir4, MOTOR_B, lift);
     53B 8368      STD	Y+0,R22
     53C E422      LDI	R18,0x42
     53D 8908      LDD	R16,Y+16
     53E 940E 151C CALL	_angle
(0290) 		
(0291) 		delay(delay_time1);
     540 0187      MOVW	R16,R14
     541 940E 14C9 CALL	_delay
(0292) 		
(0293) 		//moving body on legs 1 & 2
(0294) 		angle(dir1, MOTOR_A, 90 - step_forward);
     543 E58A      LDI	R24,0x5A
     544 1B84      SUB	R24,R20
     545 8388      STD	Y+0,R24
     546 E421      LDI	R18,0x41
     547 8D0D      LDD	R16,Y+29
     548 940E 151C CALL	_angle
(0295) 		angle(dir2, MOTOR_A, 90 + step_forward);
     54A 2F84      MOV	R24,R20
     54B 5A86      SUBI	R24,0xA6
     54C 8388      STD	Y+0,R24
     54D E421      LDI	R18,0x41
     54E 8D0F      LDD	R16,Y+31
     54F 940E 151C CALL	_angle
(0296) 		
(0297) 		//moving legs 3 & 4 in air
(0298) 		angle(dir3, MOTOR_A, 90 - step_side);
     551 E58A      LDI	R24,0x5A
     552 198C      SUB	R24,R12
     553 8388      STD	Y+0,R24
     554 E421      LDI	R18,0x41
     555 850F      LDD	R16,Y+15
     556 940E 151C CALL	_angle
(0299) 		angle(dir4, MOTOR_A, 90 + step_side);
     558 2D8C      MOV	R24,R12
     559 5A86      SUBI	R24,0xA6
     55A 8388      STD	Y+0,R24
     55B E421      LDI	R18,0x41
     55C 8908      LDD	R16,Y+16
     55D 940E 151C CALL	_angle
(0300) 		
(0301) 		delay(delay_time2);
     55F 0185      MOVW	R16,R10
     560 940E 14C9 CALL	_delay
(0302) 		
(0303) 		//putting down legs 3 & 4
(0304) 		angle(dir3, MOTOR_B, 90);
     562 E58A      LDI	R24,0x5A
     563 8388      STD	Y+0,R24
     564 E422      LDI	R18,0x42
     565 850F      LDD	R16,Y+15
     566 940E 151C CALL	_angle
(0305) 		angle(dir4, MOTOR_B, 90);
     568 E58A      LDI	R24,0x5A
     569 8388      STD	Y+0,R24
     56A E422      LDI	R18,0x42
     56B 8908      LDD	R16,Y+16
     56C 940E 151C CALL	_angle
(0306) 		
(0307) 		//picking up legs 5 & 6
(0308) 		angle(dir5, MOTOR_B, lift);
     56E 8368      STD	Y+0,R22
     56F E422      LDI	R18,0x42
     570 8909      LDD	R16,Y+17
     571 940E 151C CALL	_angle
(0309) 		angle(dir6, MOTOR_B, lift);
     573 8368      STD	Y+0,R22
     574 E422      LDI	R18,0x42
     575 890A      LDD	R16,Y+18
     576 940E 151C CALL	_angle
(0310) 		
(0311) 		delay(delay_time1);
     578 0187      MOVW	R16,R14
     579 940E 14C9 CALL	_delay
(0312) 		
(0313) 		//moving body on legs 3 & 4
(0314) 		angle(dir3, MOTOR_A, 90 + step_side);
     57B 2D8C      MOV	R24,R12
     57C 5A86      SUBI	R24,0xA6
     57D 8388      STD	Y+0,R24
     57E E421      LDI	R18,0x41
     57F 850F      LDD	R16,Y+15
     580 940E 151C CALL	_angle
(0315) 		angle(dir4, MOTOR_A, 90 - step_side);
     582 E58A      LDI	R24,0x5A
     583 198C      SUB	R24,R12
     584 8388      STD	Y+0,R24
     585 E421      LDI	R18,0x41
     586 8908      LDD	R16,Y+16
     587 940E 151C CALL	_angle
(0316) 		
(0317) 		//moving legs 5 & 6 in air 
(0318) 		angle(dir5, MOTOR_A, 90 + step_forward);
     589 2F84      MOV	R24,R20
     58A 5A86      SUBI	R24,0xA6
     58B 8388      STD	Y+0,R24
     58C E421      LDI	R18,0x41
     58D 8909      LDD	R16,Y+17
     58E 940E 151C CALL	_angle
(0319) 		angle(dir6, MOTOR_A, 90 - step_forward);
     590 E58A      LDI	R24,0x5A
     591 1B84      SUB	R24,R20
     592 8388      STD	Y+0,R24
     593 E421      LDI	R18,0x41
     594 890A      LDD	R16,Y+18
     595 940E 151C CALL	_angle
(0320) 		
(0321) 		delay(delay_time2);
     597 0185      MOVW	R16,R10
     598 940E 14C9 CALL	_delay
     59A A049      LDD	R4,Y+33
     59B A05A      LDD	R5,Y+34
     59C 01C2      MOVW	R24,R4
     59D 9701      SBIW	R24,1
     59E A39A      STD	Y+34,R25
     59F A389      STD	Y+33,R24
     5A0 2422      CLR	R2
     5A1 2433      CLR	R3
     5A2 1424      CP	R2,R4
     5A3 0435      CPC	R3,R5
     5A4 F40C      BGE	0x05A6
     5A5 CF4C      RJMP	0x04F2
     5A6 9663      ADIW	R28,0x13
     5A7 940E 1E3A CALL	pop_xgsetF0FC
     5A9 9624      ADIW	R28,4
     5AA 9508      RET
_tripod_turn_gait:
  delay_time           --> R14
  dir6                 --> R12
  dir4                 --> Y,+4
  dir2                 --> Y,+3
  dir5                 --> Y,+2
  dir3                 --> Y,+1
  dir1                 --> Y,+5
  lift                 --> R10
  step_side            --> R20
  steps                --> Y,+16
  rot_dir              --> R22
     5AB 933A      ST	R19,-Y
     5AC 932A      ST	R18,-Y
     5AD 940E 1E45 CALL	push_xgsetF0FC
     5AF 2F60      MOV	R22,R16
     5B0 9726      SBIW	R28,6
(0322) 	 }
(0323) }
(0324) 
(0325) /**
(0326) Tripod turn gait in which two legs are moved at a time
(0327) @param dir1 : Direction of motion
(0328) @param dir2 : Direction of motion
(0329) @param steps : number of steps
(0330) */
(0331) void tripod_turn_gait(unsigned char rot_dir, unsigned char steps) 
(0332) {
(0333)  	// making the LEG_1 as default leg for our movement
(0334)  	unsigned char dir1 = LEG_1;				 
     5B1 2400      CLR	R0
     5B2 9403      INC	R0
     5B3 820D      STD	Y+5,R0
(0335)     unsigned char dir3 = ((dir1 + 1) % 6) + 1;
     5B4 E016      LDI	R17,6
     5B5 2D00      MOV	R16,R0
     5B6 5F0F      SUBI	R16,0xFF
     5B7 940E 1DF5 CALL	mod8u
     5B9 2F80      MOV	R24,R16
     5BA 5F8F      SUBI	R24,0xFF
     5BB 8389      STD	Y+1,R24
(0336)     unsigned char dir5 = ((dir3 + 1) % 6) + 1;
     5BC E016      LDI	R17,6
     5BD 2F08      MOV	R16,R24
     5BE 5F0F      SUBI	R16,0xFF
     5BF 940E 1DF5 CALL	mod8u
     5C1 2F80      MOV	R24,R16
     5C2 5F8F      SUBI	R24,0xFF
     5C3 838A      STD	Y+2,R24
(0337)     unsigned char dir2 = 7 - dir5;
     5C4 2E28      MOV	R2,R24
     5C5 E087      LDI	R24,7
     5C6 1982      SUB	R24,R2
     5C7 838B      STD	Y+3,R24
(0338)     unsigned char dir4 = 7 - dir3;
     5C8 8029      LDD	R2,Y+1
     5C9 E087      LDI	R24,7
     5CA 1982      SUB	R24,R2
     5CB 838C      STD	Y+4,R24
(0339)     unsigned char dir6 = 7 - dir1;
     5CC E087      LDI	R24,7
     5CD 2EC8      MOV	R12,R24
     5CE 800D      LDD	R0,Y+5
     5CF 18C0      SUB	R12,R0
(0340)     int step_side = 50;
     5D0 E342      LDI	R20,0x32
     5D1 E050      LDI	R21,0
(0341)     unsigned char lift = 40 * movementScaling;
     5D2 EA02      LDI	R16,0xA2
     5D3 E011      LDI	R17,1
     5D4 940E 1E0D CALL	elpm32
     5D6 E08E      LDI	R24,0xE
     5D7 E092      LDI	R25,2
     5D8 939A      ST	R25,-Y
     5D9 938A      ST	R24,-Y
     5DA 940E 2028 CALL	fpmule1
     5DC 940E 1F24 CALL	fpint
     5DE 2EA0      MOV	R10,R16
(0342)     int delay_time = 150;//TWO_HUNDRED_FIFTY_MSEC;
     5DF E986      LDI	R24,0x96
     5E0 E090      LDI	R25,0
     5E1 017C      MOVW	R14,R24
(0343) 	
(0344)     // if rotation direction is anti-clockwise rot_dir = 0 else rot_dir = 1
(0345) 	step_side = step_side*(1 - 2*rot_dir);
     5E2 2E26      MOV	R2,R22
     5E3 2433      CLR	R3
     5E4 0C22      LSL	R2
     5E5 1C33      ROL	R3
     5E6 E021      LDI	R18,1
     5E7 E030      LDI	R19,0
     5E8 1922      SUB	R18,R2
     5E9 0933      SBC	R19,R3
     5EA 018A      MOVW	R16,R20
     5EB 940E 1E21 CALL	empy16s
     5ED 01A8      MOVW	R20,R16
(0346) 	
(0347)     // The following is done to keep dir3 to the left of dir1 and dir5 to the right of dir1
(0348)     if(dir1%2 == 0) 
     5EE E012      LDI	R17,2
     5EF 810D      LDD	R16,Y+5
     5F0 940E 1DF5 CALL	mod8u
     5F2 2300      TST	R16
     5F3 F009      BEQ	0x05F5
     5F4 C0BB      RJMP	0x06B0
(0349) 	{
(0350)         swap(&dir2, &dir4);
     5F5 019E      MOVW	R18,R28
     5F6 5F2C      SUBI	R18,0xFC
     5F7 4F3F      SBCI	R19,0xFF
     5F8 018E      MOVW	R16,R28
     5F9 5F0D      SUBI	R16,0xFD
     5FA 4F1F      SBCI	R17,0xFF
     5FB 940E 1629 CALL	_swap
(0351)         swap(&dir3, &dir5);
     5FD 019E      MOVW	R18,R28
     5FE 5F2E      SUBI	R18,0xFE
     5FF 4F3F      SBCI	R19,0xFF
     600 018E      MOVW	R16,R28
     601 5F0F      SUBI	R16,0xFF
     602 4F1F      SBCI	R17,0xFF
     603 940E 1629 CALL	_swap
(0352)     }
     605 C0AA      RJMP	0x06B0
(0353) 	
(0354)     while (steps-- > 0) 
(0355) 	{        
(0356)         //picking up even tripod
(0357)         angle(dir2, MOTOR_B, lift);
     606 82A8      STD	Y+0,R10
     607 E422      LDI	R18,0x42
     608 810B      LDD	R16,Y+3
     609 940E 151C CALL	_angle
(0358)         angle(dir4, MOTOR_B, lift);
     60B 82A8      STD	Y+0,R10
     60C E422      LDI	R18,0x42
     60D 810C      LDD	R16,Y+4
     60E 940E 151C CALL	_angle
(0359)         angle(dir6, MOTOR_B, lift);
     610 82A8      STD	Y+0,R10
     611 E422      LDI	R18,0x42
     612 2D0C      MOV	R16,R12
     613 940E 151C CALL	_angle
(0360)     
(0361)         delay(delay_time);
     615 0187      MOVW	R16,R14
     616 940E 14C9 CALL	_delay
(0362) 
(0363)         //moving body on odd tripod
(0364)         angle(dir1, MOTOR_A, 90);
     618 E58A      LDI	R24,0x5A
     619 8388      STD	Y+0,R24
     61A E421      LDI	R18,0x41
     61B 810D      LDD	R16,Y+5
     61C 940E 151C CALL	_angle
(0365)         angle(dir3, MOTOR_A, 90);
     61E E58A      LDI	R24,0x5A
     61F 8388      STD	Y+0,R24
     620 E421      LDI	R18,0x41
     621 8109      LDD	R16,Y+1
     622 940E 151C CALL	_angle
(0366)         angle(dir5, MOTOR_A, 90);
     624 E58A      LDI	R24,0x5A
     625 8388      STD	Y+0,R24
     626 E421      LDI	R18,0x41
     627 810A      LDD	R16,Y+2
     628 940E 151C CALL	_angle
(0367)         
(0368)         //rotating legs even in air
(0369)         angle(dir2, MOTOR_A, 90 + step_side);
     62A 01CA      MOVW	R24,R20
     62B 5A86      SUBI	R24,0xA6
     62C 4F9F      SBCI	R25,0xFF
     62D 8388      STD	Y+0,R24
     62E E421      LDI	R18,0x41
     62F 810B      LDD	R16,Y+3
     630 940E 151C CALL	_angle
(0370)         angle(dir4, MOTOR_A, 90 + step_side);
     632 01CA      MOVW	R24,R20
     633 5A86      SUBI	R24,0xA6
     634 4F9F      SBCI	R25,0xFF
     635 8388      STD	Y+0,R24
     636 E421      LDI	R18,0x41
     637 810C      LDD	R16,Y+4
     638 940E 151C CALL	_angle
(0371)         angle(dir6, MOTOR_A, 90 + step_side);
     63A 01CA      MOVW	R24,R20
     63B 5A86      SUBI	R24,0xA6
     63C 4F9F      SBCI	R25,0xFF
     63D 8388      STD	Y+0,R24
     63E E421      LDI	R18,0x41
     63F 2D0C      MOV	R16,R12
     640 940E 151C CALL	_angle
(0372)         
(0373)         delay(delay_time);
     642 0187      MOVW	R16,R14
     643 940E 14C9 CALL	_delay
(0374) 
(0375)         //putting down even legs
(0376)         angle(dir2, MOTOR_B, 90);
     645 E58A      LDI	R24,0x5A
     646 8388      STD	Y+0,R24
     647 E422      LDI	R18,0x42
     648 810B      LDD	R16,Y+3
     649 940E 151C CALL	_angle
(0377)         angle(dir4, MOTOR_B, 90);
     64B E58A      LDI	R24,0x5A
     64C 8388      STD	Y+0,R24
     64D E422      LDI	R18,0x42
     64E 810C      LDD	R16,Y+4
     64F 940E 151C CALL	_angle
(0378)         angle(dir6, MOTOR_B, 90);
     651 E58A      LDI	R24,0x5A
     652 8388      STD	Y+0,R24
     653 E422      LDI	R18,0x42
     654 2D0C      MOV	R16,R12
     655 940E 151C CALL	_angle
(0379)         
(0380)         delay(HUNDRED_MSEC);
     657 E208      LDI	R16,0x28
     658 E010      LDI	R17,0
     659 940E 14C9 CALL	_delay
(0381)         
(0382)         //picking up odd legs
(0383)         angle(dir1, MOTOR_B, lift);
     65B 82A8      STD	Y+0,R10
     65C E422      LDI	R18,0x42
     65D 810D      LDD	R16,Y+5
     65E 940E 151C CALL	_angle
(0384)         angle(dir3, MOTOR_B, lift);
     660 82A8      STD	Y+0,R10
     661 E422      LDI	R18,0x42
     662 8109      LDD	R16,Y+1
     663 940E 151C CALL	_angle
(0385)         angle(dir5, MOTOR_B, lift);
     665 82A8      STD	Y+0,R10
     666 E422      LDI	R18,0x42
     667 810A      LDD	R16,Y+2
     668 940E 151C CALL	_angle
(0386)         delay(delay_time);
     66A 0187      MOVW	R16,R14
     66B 940E 14C9 CALL	_delay
(0387) 
(0388)         //moving the odd legs in air
(0389)         angle(dir1, MOTOR_A, 90 + step_side);
     66D 01CA      MOVW	R24,R20
     66E 5A86      SUBI	R24,0xA6
     66F 4F9F      SBCI	R25,0xFF
     670 8388      STD	Y+0,R24
     671 E421      LDI	R18,0x41
     672 810D      LDD	R16,Y+5
     673 940E 151C CALL	_angle
(0390)         angle(dir3, MOTOR_A, 90 + step_side);
     675 01CA      MOVW	R24,R20
     676 5A86      SUBI	R24,0xA6
     677 4F9F      SBCI	R25,0xFF
     678 8388      STD	Y+0,R24
     679 E421      LDI	R18,0x41
     67A 8109      LDD	R16,Y+1
     67B 940E 151C CALL	_angle
(0391)         angle(dir5, MOTOR_A, 90 + step_side);
     67D 01CA      MOVW	R24,R20
     67E 5A86      SUBI	R24,0xA6
     67F 4F9F      SBCI	R25,0xFF
     680 8388      STD	Y+0,R24
     681 E421      LDI	R18,0x41
     682 810A      LDD	R16,Y+2
     683 940E 151C CALL	_angle
(0392) 
(0393)         //rotating the body on even tripod
(0394)         angle(dir2, MOTOR_A, 90);
     685 E58A      LDI	R24,0x5A
     686 8388      STD	Y+0,R24
     687 E421      LDI	R18,0x41
     688 810B      LDD	R16,Y+3
     689 940E 151C CALL	_angle
(0395)         angle(dir4, MOTOR_A, 90);
     68B E58A      LDI	R24,0x5A
     68C 8388      STD	Y+0,R24
     68D E421      LDI	R18,0x41
     68E 810C      LDD	R16,Y+4
     68F 940E 151C CALL	_angle
(0396)         angle(dir6, MOTOR_A, 90);
     691 E58A      LDI	R24,0x5A
     692 8388      STD	Y+0,R24
     693 E421      LDI	R18,0x41
     694 2D0C      MOV	R16,R12
     695 940E 151C CALL	_angle
(0397)         
(0398)         delay(delay_time);
     697 0187      MOVW	R16,R14
     698 940E 14C9 CALL	_delay
(0399)         
(0400)         //puuting down odd tripod
(0401)         angle(dir1, MOTOR_B, 90);
     69A E58A      LDI	R24,0x5A
     69B 8388      STD	Y+0,R24
     69C E422      LDI	R18,0x42
     69D 810D      LDD	R16,Y+5
     69E 940E 151C CALL	_angle
(0402)         angle(dir3, MOTOR_B, 90);
     6A0 E58A      LDI	R24,0x5A
     6A1 8388      STD	Y+0,R24
     6A2 E422      LDI	R18,0x42
     6A3 8109      LDD	R16,Y+1
     6A4 940E 151C CALL	_angle
(0403)         angle(dir5, MOTOR_B, 90);
     6A6 E58A      LDI	R24,0x5A
     6A7 8388      STD	Y+0,R24
     6A8 E422      LDI	R18,0x42
     6A9 810A      LDD	R16,Y+2
     6AA 940E 151C CALL	_angle
(0404)         
(0405)         delay(HUNDRED_MSEC);
     6AC E208      LDI	R16,0x28
     6AD E010      LDI	R17,0
     6AE 940E 14C9 CALL	_delay
     6B0 8828      LDD	R2,Y+16
     6B1 2433      CLR	R3
     6B2 2D82      MOV	R24,R2
     6B3 5081      SUBI	R24,1
     6B4 8B88      STD	Y+16,R24
     6B5 E080      LDI	R24,0
     6B6 1582      CP	R24,R2
     6B7 F408      BCC	0x06B9
     6B8 CF4D      RJMP	0x0606
     6B9 9626      ADIW	R28,6
     6BA 940E 1E3A CALL	pop_xgsetF0FC
     6BC 9622      ADIW	R28,2
     6BD 9508      RET
_tripod_turn_gait_continuous:
  delay_time           --> R14
  dir6                 --> R12
  dir4                 --> Y,+4
  dir2                 --> Y,+3
  dir5                 --> Y,+2
  dir3                 --> Y,+1
  dir1                 --> Y,+5
  lift                 --> R10
  step_side            --> R20
  steps                --> Y,+16
  rot_dir              --> R22
     6BE 933A      ST	R19,-Y
     6BF 932A      ST	R18,-Y
     6C0 940E 1E45 CALL	push_xgsetF0FC
     6C2 2F60      MOV	R22,R16
     6C3 9726      SBIW	R28,6
(0406)     }
(0407) }
(0408) 
(0409) /**
(0410) Tripod gait moves the hexapod in the direction dir1 for steps.
(0411) Three legs forming a tripod move first then the other three legs move  
(0412) Used for normal gait of the hexapod
(0413) @param rot_dir : Direction of rotation
(0414) @param steps : number of steps
(0415) */
(0416) void tripod_turn_gait_continuous(unsigned char rot_dir, unsigned char steps) 
(0417) {
(0418)  	unsigned char dir1 = LEG_1;
     6C4 2400      CLR	R0
     6C5 9403      INC	R0
     6C6 820D      STD	Y+5,R0
(0419)     unsigned char dir3 = ((dir1 + 1) % 6) + 1;
     6C7 E016      LDI	R17,6
     6C8 2D00      MOV	R16,R0
     6C9 5F0F      SUBI	R16,0xFF
     6CA 940E 1DF5 CALL	mod8u
     6CC 2F80      MOV	R24,R16
     6CD 5F8F      SUBI	R24,0xFF
     6CE 8389      STD	Y+1,R24
(0420)     unsigned char dir5 = ((dir3 + 1) % 6) + 1;
     6CF E016      LDI	R17,6
     6D0 2F08      MOV	R16,R24
     6D1 5F0F      SUBI	R16,0xFF
     6D2 940E 1DF5 CALL	mod8u
     6D4 2F80      MOV	R24,R16
     6D5 5F8F      SUBI	R24,0xFF
     6D6 838A      STD	Y+2,R24
(0421)     unsigned char dir2 = 7 - dir5;
     6D7 2E28      MOV	R2,R24
     6D8 E087      LDI	R24,7
     6D9 1982      SUB	R24,R2
     6DA 838B      STD	Y+3,R24
(0422)     unsigned char dir4 = 7 - dir3;
     6DB 8029      LDD	R2,Y+1
     6DC E087      LDI	R24,7
     6DD 1982      SUB	R24,R2
     6DE 838C      STD	Y+4,R24
(0423)     unsigned char dir6 = 7 - dir1;
     6DF E087      LDI	R24,7
     6E0 2EC8      MOV	R12,R24
     6E1 800D      LDD	R0,Y+5
     6E2 18C0      SUB	R12,R0
(0424)     int step_side = 45 * movementScaling;
     6E3 E90E      LDI	R16,0x9E
     6E4 E011      LDI	R17,1
     6E5 940E 1E0D CALL	elpm32
     6E7 E08E      LDI	R24,0xE
     6E8 E092      LDI	R25,2
     6E9 939A      ST	R25,-Y
     6EA 938A      ST	R24,-Y
     6EB 940E 2028 CALL	fpmule1
     6ED 940E 1F24 CALL	fpint
(0425) 	
(0426)     unsigned char lift = 40;
     6EF E288      LDI	R24,0x28
     6F0 2EA8      MOV	R10,R24
(0427)     int delay_time = 150;//TWO_HUNDRED_FIFTY_MSEC;
     6F1 E986      LDI	R24,0x96
     6F2 E090      LDI	R25,0
     6F3 017C      MOVW	R14,R24
(0428)     
(0429) 	// if rotation direction is anti-clockwise rot_dir = 0 else rot_dir = 1
(0430) 	step_side = step_side*(1 - 2*rot_dir);
     6F4 2E26      MOV	R2,R22
     6F5 2433      CLR	R3
     6F6 0C22      LSL	R2
     6F7 1C33      ROL	R3
     6F8 E021      LDI	R18,1
     6F9 E030      LDI	R19,0
     6FA 1922      SUB	R18,R2
     6FB 0933      SBC	R19,R3
     6FC 940E 1E21 CALL	empy16s
     6FE 01A8      MOVW	R20,R16
(0431) 	
(0432)     // The following is done to keep dir3 to the left of dir1 and dir5 to the right of dir1
(0433)     if(dir1%2 == 0) 
     6FF E012      LDI	R17,2
     700 810D      LDD	R16,Y+5
     701 940E 1DF5 CALL	mod8u
     703 2300      TST	R16
     704 F009      BEQ	0x0706
     705 C0D3      RJMP	0x07D9
(0434) 	{
(0435)         swap(&dir2, &dir4);
     706 019E      MOVW	R18,R28
     707 5F2C      SUBI	R18,0xFC
     708 4F3F      SBCI	R19,0xFF
     709 018E      MOVW	R16,R28
     70A 5F0D      SUBI	R16,0xFD
     70B 4F1F      SBCI	R17,0xFF
     70C 940E 1629 CALL	_swap
(0436)         swap(&dir3, &dir5);
     70E 019E      MOVW	R18,R28
     70F 5F2E      SUBI	R18,0xFE
     710 4F3F      SBCI	R19,0xFF
     711 018E      MOVW	R16,R28
     712 5F0F      SUBI	R16,0xFF
     713 4F1F      SBCI	R17,0xFF
     714 940E 1629 CALL	_swap
(0437)     }
     716 C0C2      RJMP	0x07D9
(0438)     
(0439)     while (steps-- > 0) 
(0440) 	{        
(0441)         //picking up even tripod
(0442)         angle(dir2, MOTOR_B, lift);
     717 82A8      STD	Y+0,R10
     718 E422      LDI	R18,0x42
     719 810B      LDD	R16,Y+3
     71A 940E 151C CALL	_angle
(0443)         angle(dir4, MOTOR_B, lift);
     71C 82A8      STD	Y+0,R10
     71D E422      LDI	R18,0x42
     71E 810C      LDD	R16,Y+4
     71F 940E 151C CALL	_angle
(0444)         angle(dir6, MOTOR_B, lift);
     721 82A8      STD	Y+0,R10
     722 E422      LDI	R18,0x42
     723 2D0C      MOV	R16,R12
     724 940E 151C CALL	_angle
(0445)     
(0446)         delay(delay_time);
     726 0187      MOVW	R16,R14
     727 940E 14C9 CALL	_delay
(0447) 
(0448)         //moving body on odd tripod
(0449)         angle(dir1, MOTOR_A, 90 - step_side);
     729 E58A      LDI	R24,0x5A
     72A E090      LDI	R25,0
     72B 011C      MOVW	R2,R24
     72C 1A24      SUB	R2,R20
     72D 0A35      SBC	R3,R21
     72E 8228      STD	Y+0,R2
     72F E421      LDI	R18,0x41
     730 810D      LDD	R16,Y+5
     731 940E 151C CALL	_angle
(0450)         angle(dir3, MOTOR_A, 90 - step_side);
     733 E58A      LDI	R24,0x5A
     734 E090      LDI	R25,0
     735 011C      MOVW	R2,R24
     736 1A24      SUB	R2,R20
     737 0A35      SBC	R3,R21
     738 8228      STD	Y+0,R2
     739 E421      LDI	R18,0x41
     73A 8109      LDD	R16,Y+1
     73B 940E 151C CALL	_angle
(0451)         angle(dir5, MOTOR_A, 90 - step_side);
     73D E58A      LDI	R24,0x5A
     73E E090      LDI	R25,0
     73F 011C      MOVW	R2,R24
     740 1A24      SUB	R2,R20
     741 0A35      SBC	R3,R21
     742 8228      STD	Y+0,R2
     743 E421      LDI	R18,0x41
     744 810A      LDD	R16,Y+2
     745 940E 151C CALL	_angle
(0452)         
(0453)         //rotating legs even in air
(0454)         angle(dir2, MOTOR_A, 90 + step_side);
     747 01CA      MOVW	R24,R20
     748 5A86      SUBI	R24,0xA6
     749 4F9F      SBCI	R25,0xFF
     74A 8388      STD	Y+0,R24
     74B E421      LDI	R18,0x41
     74C 810B      LDD	R16,Y+3
     74D 940E 151C CALL	_angle
(0455)         angle(dir4, MOTOR_A, 90 + step_side);
     74F 01CA      MOVW	R24,R20
     750 5A86      SUBI	R24,0xA6
     751 4F9F      SBCI	R25,0xFF
     752 8388      STD	Y+0,R24
     753 E421      LDI	R18,0x41
     754 810C      LDD	R16,Y+4
     755 940E 151C CALL	_angle
(0456)         angle(dir6, MOTOR_A, 90 + step_side);
     757 01CA      MOVW	R24,R20
     758 5A86      SUBI	R24,0xA6
     759 4F9F      SBCI	R25,0xFF
     75A 8388      STD	Y+0,R24
     75B E421      LDI	R18,0x41
     75C 2D0C      MOV	R16,R12
     75D 940E 151C CALL	_angle
(0457)         
(0458)         delay(delay_time);
     75F 0187      MOVW	R16,R14
     760 940E 14C9 CALL	_delay
(0459) 
(0460)         //putting down even legs
(0461)         angle(dir2, MOTOR_B, 90);
     762 E58A      LDI	R24,0x5A
     763 8388      STD	Y+0,R24
     764 E422      LDI	R18,0x42
     765 810B      LDD	R16,Y+3
     766 940E 151C CALL	_angle
(0462)         angle(dir4, MOTOR_B, 90);
     768 E58A      LDI	R24,0x5A
     769 8388      STD	Y+0,R24
     76A E422      LDI	R18,0x42
     76B 810C      LDD	R16,Y+4
     76C 940E 151C CALL	_angle
(0463)         angle(dir6, MOTOR_B, 90);
     76E E58A      LDI	R24,0x5A
     76F 8388      STD	Y+0,R24
     770 E422      LDI	R18,0x42
     771 2D0C      MOV	R16,R12
     772 940E 151C CALL	_angle
(0464)         
(0465)         delay(HUNDRED_MSEC);
     774 E208      LDI	R16,0x28
     775 E010      LDI	R17,0
     776 940E 14C9 CALL	_delay
(0466)         
(0467)         //picking up odd legs
(0468)         angle(dir1, MOTOR_B, lift);
     778 82A8      STD	Y+0,R10
     779 E422      LDI	R18,0x42
     77A 810D      LDD	R16,Y+5
     77B 940E 151C CALL	_angle
(0469)         angle(dir3, MOTOR_B, lift);
     77D 82A8      STD	Y+0,R10
     77E E422      LDI	R18,0x42
     77F 8109      LDD	R16,Y+1
     780 940E 151C CALL	_angle
(0470)         angle(dir5, MOTOR_B, lift);
     782 82A8      STD	Y+0,R10
     783 E422      LDI	R18,0x42
     784 810A      LDD	R16,Y+2
     785 940E 151C CALL	_angle
(0471)         delay(delay_time);
     787 0187      MOVW	R16,R14
     788 940E 14C9 CALL	_delay
(0472) 
(0473)         //moving the odd legs in air
(0474)         angle(dir1, MOTOR_A, 90 + step_side);
     78A 01CA      MOVW	R24,R20
     78B 5A86      SUBI	R24,0xA6
     78C 4F9F      SBCI	R25,0xFF
     78D 8388      STD	Y+0,R24
     78E E421      LDI	R18,0x41
     78F 810D      LDD	R16,Y+5
     790 940E 151C CALL	_angle
(0475)         angle(dir3, MOTOR_A, 90 + step_side);
     792 01CA      MOVW	R24,R20
     793 5A86      SUBI	R24,0xA6
     794 4F9F      SBCI	R25,0xFF
     795 8388      STD	Y+0,R24
     796 E421      LDI	R18,0x41
     797 8109      LDD	R16,Y+1
     798 940E 151C CALL	_angle
(0476)         angle(dir5, MOTOR_A, 90 + step_side);
     79A 01CA      MOVW	R24,R20
     79B 5A86      SUBI	R24,0xA6
     79C 4F9F      SBCI	R25,0xFF
     79D 8388      STD	Y+0,R24
     79E E421      LDI	R18,0x41
     79F 810A      LDD	R16,Y+2
     7A0 940E 151C CALL	_angle
(0477) 
(0478)         //rotating the body on even tripod
(0479)         angle(dir2, MOTOR_A, 90 - step_side);
     7A2 E58A      LDI	R24,0x5A
     7A3 E090      LDI	R25,0
     7A4 011C      MOVW	R2,R24
     7A5 1A24      SUB	R2,R20
     7A6 0A35      SBC	R3,R21
     7A7 8228      STD	Y+0,R2
     7A8 E421      LDI	R18,0x41
     7A9 810B      LDD	R16,Y+3
     7AA 940E 151C CALL	_angle
(0480)         angle(dir4, MOTOR_A, 90 - step_side);
     7AC E58A      LDI	R24,0x5A
     7AD E090      LDI	R25,0
     7AE 011C      MOVW	R2,R24
     7AF 1A24      SUB	R2,R20
     7B0 0A35      SBC	R3,R21
     7B1 8228      STD	Y+0,R2
     7B2 E421      LDI	R18,0x41
     7B3 810C      LDD	R16,Y+4
     7B4 940E 151C CALL	_angle
(0481)         angle(dir6, MOTOR_A, 90 - step_side);
     7B6 E58A      LDI	R24,0x5A
     7B7 E090      LDI	R25,0
     7B8 011C      MOVW	R2,R24
     7B9 1A24      SUB	R2,R20
     7BA 0A35      SBC	R3,R21
     7BB 8228      STD	Y+0,R2
     7BC E421      LDI	R18,0x41
     7BD 2D0C      MOV	R16,R12
     7BE 940E 151C CALL	_angle
(0482)         
(0483)         delay(delay_time);
     7C0 0187      MOVW	R16,R14
     7C1 940E 14C9 CALL	_delay
(0484)         
(0485)         //puuting down odd tripod
(0486)         angle(dir1, MOTOR_B, 90);
     7C3 E58A      LDI	R24,0x5A
     7C4 8388      STD	Y+0,R24
     7C5 E422      LDI	R18,0x42
     7C6 810D      LDD	R16,Y+5
     7C7 940E 151C CALL	_angle
(0487)         angle(dir3, MOTOR_B, 90);
     7C9 E58A      LDI	R24,0x5A
     7CA 8388      STD	Y+0,R24
     7CB E422      LDI	R18,0x42
     7CC 8109      LDD	R16,Y+1
     7CD 940E 151C CALL	_angle
(0488)         angle(dir5, MOTOR_B, 90);
     7CF E58A      LDI	R24,0x5A
     7D0 8388      STD	Y+0,R24
     7D1 E422      LDI	R18,0x42
     7D2 810A      LDD	R16,Y+2
     7D3 940E 151C CALL	_angle
(0489)         
(0490)         delay(HUNDRED_MSEC);
     7D5 E208      LDI	R16,0x28
     7D6 E010      LDI	R17,0
     7D7 940E 14C9 CALL	_delay
     7D9 8828      LDD	R2,Y+16
     7DA 2433      CLR	R3
     7DB 2D82      MOV	R24,R2
     7DC 5081      SUBI	R24,1
     7DD 8B88      STD	Y+16,R24
     7DE E080      LDI	R24,0
     7DF 1582      CP	R24,R2
     7E0 F408      BCC	0x07E2
     7E1 CF35      RJMP	0x0717
     7E2 9626      ADIW	R28,6
     7E3 940E 1E3A CALL	pop_xgsetF0FC
     7E5 9622      ADIW	R28,2
     7E6 9508      RET
_two_legged_turn_gait:
  dir6                 --> R14
  dir4                 --> Y,+4
  dir2                 --> Y,+3
  dir5                 --> Y,+2
  dir3                 --> Y,+1
  dir1                 --> Y,+5
  delay_time           --> R12
  lift                 --> R10
  step_side            --> R20
  steps                --> Y,+16
  rot_dir              --> R22
     7E7 933A      ST	R19,-Y
     7E8 932A      ST	R18,-Y
     7E9 940E 1E45 CALL	push_xgsetF0FC
     7EB 2F60      MOV	R22,R16
     7EC 9726      SBIW	R28,6
(0491)     }
(0492) }
(0493) 
(0494) void two_legged_turn_gait(unsigned char rot_dir, unsigned char steps) {
(0495) 	unsigned char dir1 = LEG_1;
     7ED 2400      CLR	R0
     7EE 9403      INC	R0
     7EF 820D      STD	Y+5,R0
(0496)     unsigned char dir3 = ((dir1 + 1) % 6) + 1;
     7F0 E016      LDI	R17,6
     7F1 2D00      MOV	R16,R0
     7F2 5F0F      SUBI	R16,0xFF
     7F3 940E 1DF5 CALL	mod8u
     7F5 2F80      MOV	R24,R16
     7F6 5F8F      SUBI	R24,0xFF
     7F7 8389      STD	Y+1,R24
(0497)     unsigned char dir5 = ((dir3 + 1) % 6) + 1;
     7F8 E016      LDI	R17,6
     7F9 2F08      MOV	R16,R24
     7FA 5F0F      SUBI	R16,0xFF
     7FB 940E 1DF5 CALL	mod8u
     7FD 2F80      MOV	R24,R16
     7FE 5F8F      SUBI	R24,0xFF
     7FF 838A      STD	Y+2,R24
(0498)     unsigned char dir2 = 7 - dir5;
     800 2E28      MOV	R2,R24
     801 E087      LDI	R24,7
     802 1982      SUB	R24,R2
     803 838B      STD	Y+3,R24
(0499)     unsigned char dir4 = 7 - dir3;
     804 8029      LDD	R2,Y+1
     805 E087      LDI	R24,7
     806 1982      SUB	R24,R2
     807 838C      STD	Y+4,R24
(0500)     unsigned char dir6 = 7 - dir1;
     808 E087      LDI	R24,7
     809 2EE8      MOV	R14,R24
     80A 800D      LDD	R0,Y+5
     80B 18E0      SUB	R14,R0
(0501) 
(0502)     int step_side = 50 * movementScaling;
     80C EA06      LDI	R16,0xA6
     80D E011      LDI	R17,1
     80E 940E 1E0D CALL	elpm32
     810 E08E      LDI	R24,0xE
     811 E092      LDI	R25,2
     812 939A      ST	R25,-Y
     813 938A      ST	R24,-Y
     814 940E 2028 CALL	fpmule1
     816 940E 1F24 CALL	fpint
(0503)     unsigned char lift = 40;
     818 E288      LDI	R24,0x28
     819 2EA8      MOV	R10,R24
(0504)     int delay_time = 150;//TWO_HUNDRED_FIFTY_MSEC;
     81A E986      LDI	R24,0x96
     81B E090      LDI	R25,0
     81C 016C      MOVW	R12,R24
(0505) 
(0506) 	// if rotation direction is anti-clockwise rot_dir = 0 else rot_dir = 1
(0507) 	step_side = step_side*(1 - 2*rot_dir);
     81D 2E26      MOV	R2,R22
     81E 2433      CLR	R3
     81F 0C22      LSL	R2
     820 1C33      ROL	R3
     821 E021      LDI	R18,1
     822 E030      LDI	R19,0
     823 1922      SUB	R18,R2
     824 0933      SBC	R19,R3
     825 940E 1E21 CALL	empy16s
     827 01A8      MOVW	R20,R16
(0508)     
(0509)     // The following is done to keep dir3 to the left of dir1 and dir5 to the right of dir1
(0510)     if(dir1%2 == 0) {
     828 E012      LDI	R17,2
     829 810D      LDD	R16,Y+5
     82A 940E 1DF5 CALL	mod8u
     82C 2300      TST	R16
     82D F009      BEQ	0x082F
     82E C0C5      RJMP	0x08F4
(0511)         swap(&dir2, &dir4);
     82F 019E      MOVW	R18,R28
     830 5F2C      SUBI	R18,0xFC
     831 4F3F      SBCI	R19,0xFF
     832 018E      MOVW	R16,R28
     833 5F0D      SUBI	R16,0xFD
     834 4F1F      SBCI	R17,0xFF
     835 940E 1629 CALL	_swap
(0512)         swap(&dir3, &dir5);
     837 019E      MOVW	R18,R28
     838 5F2E      SUBI	R18,0xFE
     839 4F3F      SBCI	R19,0xFF
     83A 018E      MOVW	R16,R28
     83B 5F0F      SUBI	R16,0xFF
     83C 4F1F      SBCI	R17,0xFF
     83D 940E 1629 CALL	_swap
(0513)     }
     83F C0B4      RJMP	0x08F4
(0514)     while (steps-- > 0) {
(0515)         //picking up first duplet
(0516)         angle(dir1, MOTOR_B, lift);
     840 82A8      STD	Y+0,R10
     841 E422      LDI	R18,0x42
     842 810D      LDD	R16,Y+5
     843 940E 151C CALL	_angle
(0517)         angle(dir6, MOTOR_B, lift);
     845 82A8      STD	Y+0,R10
     846 E422      LDI	R18,0x42
     847 2D0E      MOV	R16,R14
     848 940E 151C CALL	_angle
(0518)     
(0519)         delay(delay_time);
     84A 0186      MOVW	R16,R12
     84B 940E 14C9 CALL	_delay
(0520) 
(0521)         //moving body on second duplet
(0522)         angle(dir2, MOTOR_A, 90);
     84D E58A      LDI	R24,0x5A
     84E 8388      STD	Y+0,R24
     84F E421      LDI	R18,0x41
     850 810B      LDD	R16,Y+3
     851 940E 151C CALL	_angle
(0523)         angle(dir5, MOTOR_A, 90);
     853 E58A      LDI	R24,0x5A
     854 8388      STD	Y+0,R24
     855 E421      LDI	R18,0x41
     856 810A      LDD	R16,Y+2
     857 940E 151C CALL	_angle
(0524)         
(0525)         //rotating first duplet in air
(0526)         angle(dir1, MOTOR_A, 90 + step_side);
     859 01CA      MOVW	R24,R20
     85A 5A86      SUBI	R24,0xA6
     85B 4F9F      SBCI	R25,0xFF
     85C 8388      STD	Y+0,R24
     85D E421      LDI	R18,0x41
     85E 810D      LDD	R16,Y+5
     85F 940E 151C CALL	_angle
(0527)         angle(dir6, MOTOR_A, 90 + step_side);
     861 01CA      MOVW	R24,R20
     862 5A86      SUBI	R24,0xA6
     863 4F9F      SBCI	R25,0xFF
     864 8388      STD	Y+0,R24
     865 E421      LDI	R18,0x41
     866 2D0E      MOV	R16,R14
     867 940E 151C CALL	_angle
(0528)         
(0529)         delay(delay_time);
     869 0186      MOVW	R16,R12
     86A 940E 14C9 CALL	_delay
(0530) 
(0531)         //putting down first duplet
(0532)         angle(dir1, MOTOR_B, 90);
     86C E58A      LDI	R24,0x5A
     86D 8388      STD	Y+0,R24
     86E E422      LDI	R18,0x42
     86F 810D      LDD	R16,Y+5
     870 940E 151C CALL	_angle
(0533)         angle(dir6, MOTOR_B, 90);
     872 E58A      LDI	R24,0x5A
     873 8388      STD	Y+0,R24
     874 E422      LDI	R18,0x42
     875 2D0E      MOV	R16,R14
     876 940E 151C CALL	_angle
(0534)         
(0535)         delay(HUNDRED_MSEC);
     878 E208      LDI	R16,0x28
     879 E010      LDI	R17,0
     87A 940E 14C9 CALL	_delay
(0536)         
(0537)         //picking up third duplet
(0538)         angle(dir3, MOTOR_B, lift);
     87C 82A8      STD	Y+0,R10
     87D E422      LDI	R18,0x42
     87E 8109      LDD	R16,Y+1
     87F 940E 151C CALL	_angle
(0539)         angle(dir4, MOTOR_B, lift);
     881 82A8      STD	Y+0,R10
     882 E422      LDI	R18,0x42
     883 810C      LDD	R16,Y+4
     884 940E 151C CALL	_angle
(0540)         
(0541) 		delay(delay_time);
     886 0186      MOVW	R16,R12
     887 940E 14C9 CALL	_delay
(0542) 
(0543)         //moving the third duplet in air
(0544)         angle(dir3, MOTOR_A, 90 + step_side);
     889 01CA      MOVW	R24,R20
     88A 5A86      SUBI	R24,0xA6
     88B 4F9F      SBCI	R25,0xFF
     88C 8388      STD	Y+0,R24
     88D E421      LDI	R18,0x41
     88E 8109      LDD	R16,Y+1
     88F 940E 151C CALL	_angle
(0545)         angle(dir4, MOTOR_A, 90 + step_side);
     891 01CA      MOVW	R24,R20
     892 5A86      SUBI	R24,0xA6
     893 4F9F      SBCI	R25,0xFF
     894 8388      STD	Y+0,R24
     895 E421      LDI	R18,0x41
     896 810C      LDD	R16,Y+4
     897 940E 151C CALL	_angle
(0546) 
(0547)         //rotating the body on first duplet
(0548)         angle(dir1, MOTOR_A, 90);
     899 E58A      LDI	R24,0x5A
     89A 8388      STD	Y+0,R24
     89B E421      LDI	R18,0x41
     89C 810D      LDD	R16,Y+5
     89D 940E 151C CALL	_angle
(0549)         angle(dir6, MOTOR_A, 90);
     89F E58A      LDI	R24,0x5A
     8A0 8388      STD	Y+0,R24
     8A1 E421      LDI	R18,0x41
     8A2 2D0E      MOV	R16,R14
     8A3 940E 151C CALL	_angle
(0550)         
(0551)         delay(delay_time);
     8A5 0186      MOVW	R16,R12
     8A6 940E 14C9 CALL	_delay
(0552)         
(0553)         //putting down third duplet
(0554)         angle(dir3, MOTOR_B, 90);
     8A8 E58A      LDI	R24,0x5A
     8A9 8388      STD	Y+0,R24
     8AA E422      LDI	R18,0x42
     8AB 8109      LDD	R16,Y+1
     8AC 940E 151C CALL	_angle
(0555)         angle(dir4, MOTOR_B, 90);
     8AE E58A      LDI	R24,0x5A
     8AF 8388      STD	Y+0,R24
     8B0 E422      LDI	R18,0x42
     8B1 810C      LDD	R16,Y+4
     8B2 940E 151C CALL	_angle
(0556)         
(0557)         delay(HUNDRED_MSEC);
     8B4 E208      LDI	R16,0x28
     8B5 E010      LDI	R17,0
     8B6 940E 14C9 CALL	_delay
(0558) 		//picking up second duplet
(0559)         angle(dir2, MOTOR_B, lift);
     8B8 82A8      STD	Y+0,R10
     8B9 E422      LDI	R18,0x42
     8BA 810B      LDD	R16,Y+3
     8BB 940E 151C CALL	_angle
(0560)         angle(dir5, MOTOR_B, lift);
     8BD 82A8      STD	Y+0,R10
     8BE E422      LDI	R18,0x42
     8BF 810A      LDD	R16,Y+2
     8C0 940E 151C CALL	_angle
(0561)         
(0562) 		delay(delay_time);
     8C2 0186      MOVW	R16,R12
     8C3 940E 14C9 CALL	_delay
(0563) 
(0564)         //moving the second duplet in air
(0565)         angle(dir2, MOTOR_A, 90 + step_side);
     8C5 01CA      MOVW	R24,R20
     8C6 5A86      SUBI	R24,0xA6
     8C7 4F9F      SBCI	R25,0xFF
     8C8 8388      STD	Y+0,R24
     8C9 E421      LDI	R18,0x41
     8CA 810B      LDD	R16,Y+3
     8CB 940E 151C CALL	_angle
(0566)         angle(dir5, MOTOR_A, 90 + step_side);
     8CD 01CA      MOVW	R24,R20
     8CE 5A86      SUBI	R24,0xA6
     8CF 4F9F      SBCI	R25,0xFF
     8D0 8388      STD	Y+0,R24
     8D1 E421      LDI	R18,0x41
     8D2 810A      LDD	R16,Y+2
     8D3 940E 151C CALL	_angle
(0567) 
(0568)         //rotating the body on third duplet
(0569)         angle(dir3, MOTOR_A, 90);
     8D5 E58A      LDI	R24,0x5A
     8D6 8388      STD	Y+0,R24
     8D7 E421      LDI	R18,0x41
     8D8 8109      LDD	R16,Y+1
     8D9 940E 151C CALL	_angle
(0570)         angle(dir4, MOTOR_A, 90);
     8DB E58A      LDI	R24,0x5A
     8DC 8388      STD	Y+0,R24
     8DD E421      LDI	R18,0x41
     8DE 810C      LDD	R16,Y+4
     8DF 940E 151C CALL	_angle
(0571)         
(0572)         delay(delay_time);
     8E1 0186      MOVW	R16,R12
     8E2 940E 14C9 CALL	_delay
(0573)         
(0574)         //putting down second duplet
(0575)         angle(dir2, MOTOR_B, 90);
     8E4 E58A      LDI	R24,0x5A
     8E5 8388      STD	Y+0,R24
     8E6 E422      LDI	R18,0x42
     8E7 810B      LDD	R16,Y+3
     8E8 940E 151C CALL	_angle
(0576)         angle(dir5, MOTOR_B, 90);
     8EA E58A      LDI	R24,0x5A
     8EB 8388      STD	Y+0,R24
     8EC E422      LDI	R18,0x42
     8ED 810A      LDD	R16,Y+2
     8EE 940E 151C CALL	_angle
(0577)         
(0578)         delay(HUNDRED_MSEC);
     8F0 E208      LDI	R16,0x28
     8F1 E010      LDI	R17,0
     8F2 940E 14C9 CALL	_delay
     8F4 8828      LDD	R2,Y+16
     8F5 2433      CLR	R3
     8F6 2D82      MOV	R24,R2
     8F7 5081      SUBI	R24,1
     8F8 8B88      STD	Y+16,R24
     8F9 E080      LDI	R24,0
     8FA 1582      CP	R24,R2
     8FB F408      BCC	0x08FD
     8FC CF43      RJMP	0x0840
     8FD 9626      ADIW	R28,6
     8FE 940E 1E3A CALL	pop_xgsetF0FC
     900 9622      ADIW	R28,2
     901 9508      RET
_tripod_gait_continuous:
  delay_time           --> R22
  step_forward         --> R14
  dir6                 --> R12
  dir4                 --> Y,+4
  dir2                 --> Y,+3
  dir5                 --> Y,+2
  dir3                 --> Y,+1
  lift                 --> R10
  step_side            --> R20
  steps                --> Y,+17
  dir1                 --> Y,+15
     902 940E 1DB6 CALL	push_arg4
     904 940E 1E45 CALL	push_xgsetF0FC
     906 9725      SBIW	R28,5
(0579)     }
(0580) }
(0581) 
(0582) /**
(0583) Tripod gait moves the hexapod in the direction dir1 for steps.
(0584) Three legs forming a tripod move first then the other three legs move  
(0585) Used for normal gait of the hexapod
(0586) @param dir1 : Direction of motion
(0587) @param steps : number of steps
(0588) */
(0589) void tripod_gait_continuous(unsigned char dir1, unsigned char steps) 
(0590) {
(0591)     unsigned char dir3 = ((dir1 + 1) % 6) + 1;
     907 E016      LDI	R17,6
     908 850F      LDD	R16,Y+15
     909 5F0F      SUBI	R16,0xFF
     90A 940E 1DF5 CALL	mod8u
     90C 2F80      MOV	R24,R16
     90D 5F8F      SUBI	R24,0xFF
     90E 8389      STD	Y+1,R24
(0592)     unsigned char dir5 = ((dir3 + 1) % 6) + 1;
     90F E016      LDI	R17,6
     910 2F08      MOV	R16,R24
     911 5F0F      SUBI	R16,0xFF
     912 940E 1DF5 CALL	mod8u
     914 2F80      MOV	R24,R16
     915 5F8F      SUBI	R24,0xFF
     916 838A      STD	Y+2,R24
(0593)     unsigned char dir2 = 7 - dir5;
     917 2E28      MOV	R2,R24
     918 E087      LDI	R24,7
     919 1982      SUB	R24,R2
     91A 838B      STD	Y+3,R24
(0594)     unsigned char dir4 = 7 - dir3;
     91B 8029      LDD	R2,Y+1
     91C E087      LDI	R24,7
     91D 1982      SUB	R24,R2
     91E 838C      STD	Y+4,R24
(0595)     unsigned char dir6 = 7 - dir1;
     91F E087      LDI	R24,7
     920 2EC8      MOV	R12,R24
     921 840F      LDD	R0,Y+15
     922 18C0      SUB	R12,R0
(0596)     unsigned char step_forward = 50 * movementScaling;
     923 EA06      LDI	R16,0xA6
     924 E011      LDI	R17,1
     925 940E 1E0D CALL	elpm32
     927 E08E      LDI	R24,0xE
     928 E092      LDI	R25,2
     929 939A      ST	R25,-Y
     92A 938A      ST	R24,-Y
     92B 940E 2028 CALL	fpmule1
     92D 940E 1F24 CALL	fpint
     92F 2EE0      MOV	R14,R16
(0597)     unsigned char step_side = 55 * movementScaling;
     930 E90A      LDI	R16,0x9A
     931 E011      LDI	R17,1
     932 940E 1E0D CALL	elpm32
     934 E08E      LDI	R24,0xE
     935 E092      LDI	R25,2
     936 939A      ST	R25,-Y
     937 938A      ST	R24,-Y
     938 940E 2028 CALL	fpmule1
     93A 940E 1F24 CALL	fpint
     93C 2F40      MOV	R20,R16
(0598)     unsigned char lift = 40;
     93D E288      LDI	R24,0x28
     93E 2EA8      MOV	R10,R24
(0599)     int delay_time = 150;//TWO_HUNDRED_FIFTY_MSEC;
     93F E966      LDI	R22,0x96
     940 E070      LDI	R23,0
(0600)     
(0601)     // The following is done to keep dir3 to the left of dir1 and dir5 to the right of dir1
(0602)     if(dir1%2 == 0) 
     941 E012      LDI	R17,2
     942 850F      LDD	R16,Y+15
     943 940E 1DF5 CALL	mod8u
     945 2300      TST	R16
     946 F009      BEQ	0x0948
     947 C0BB      RJMP	0x0A03
(0603) 	{
(0604)         swap(&dir2, &dir4);
     948 019E      MOVW	R18,R28
     949 5F2C      SUBI	R18,0xFC
     94A 4F3F      SBCI	R19,0xFF
     94B 018E      MOVW	R16,R28
     94C 5F0D      SUBI	R16,0xFD
     94D 4F1F      SBCI	R17,0xFF
     94E 940E 1629 CALL	_swap
(0605)         swap(&dir3, &dir5);      
     950 019E      MOVW	R18,R28
     951 5F2E      SUBI	R18,0xFE
     952 4F3F      SBCI	R19,0xFF
     953 018E      MOVW	R16,R28
     954 5F0F      SUBI	R16,0xFF
     955 4F1F      SBCI	R17,0xFF
     956 940E 1629 CALL	_swap
(0606)     }
     958 C0AA      RJMP	0x0A03
(0607)     	
(0608)     while (steps-- > 0) 
(0609) 	{        
(0610)         //picking up even tripod
(0611)         angle(dir2, MOTOR_B, lift);
     959 82A8      STD	Y+0,R10
     95A E422      LDI	R18,0x42
     95B 810B      LDD	R16,Y+3
     95C 940E 151C CALL	_angle
(0612)         angle(dir4, MOTOR_B, lift);
     95E 82A8      STD	Y+0,R10
     95F E422      LDI	R18,0x42
     960 810C      LDD	R16,Y+4
     961 940E 151C CALL	_angle
(0613)         angle(dir6, MOTOR_B, lift);
     963 82A8      STD	Y+0,R10
     964 E422      LDI	R18,0x42
     965 2D0C      MOV	R16,R12
     966 940E 151C CALL	_angle
(0614)     
(0615)         delay(delay_time);
     968 018B      MOVW	R16,R22
     969 940E 14C9 CALL	_delay
(0616) 
(0617)         //moving body on odd tripod
(0618)         angle(dir1, MOTOR_C, 90 - step_forward);
     96B E58A      LDI	R24,0x5A
     96C 198E      SUB	R24,R14
     96D 8388      STD	Y+0,R24
     96E E423      LDI	R18,0x43
     96F 850F      LDD	R16,Y+15
     970 940E 151C CALL	_angle
(0619)         angle(dir3, MOTOR_A, 90 + step_side);
     972 2F84      MOV	R24,R20
     973 5A86      SUBI	R24,0xA6
     974 8388      STD	Y+0,R24
     975 E421      LDI	R18,0x41
     976 8109      LDD	R16,Y+1
     977 940E 151C CALL	_angle
(0620)         angle(dir5, MOTOR_A, 90 - step_side);
     979 E58A      LDI	R24,0x5A
     97A 1B84      SUB	R24,R20
     97B 8388      STD	Y+0,R24
     97C E421      LDI	R18,0x41
     97D 810A      LDD	R16,Y+2
     97E 940E 151C CALL	_angle
(0621)         
(0622)         //moving legs even forward in air
(0623)         angle(dir2, MOTOR_A, 90 - step_side);
     980 E58A      LDI	R24,0x5A
     981 1B84      SUB	R24,R20
     982 8388      STD	Y+0,R24
     983 E421      LDI	R18,0x41
     984 810B      LDD	R16,Y+3
     985 940E 151C CALL	_angle
(0624)         angle(dir4, MOTOR_A, 90 + step_side);
     987 2F84      MOV	R24,R20
     988 5A86      SUBI	R24,0xA6
     989 8388      STD	Y+0,R24
     98A E421      LDI	R18,0x41
     98B 810C      LDD	R16,Y+4
     98C 940E 151C CALL	_angle
(0625)         angle(dir6, MOTOR_C, 90 - step_forward);
     98E E58A      LDI	R24,0x5A
     98F 198E      SUB	R24,R14
     990 8388      STD	Y+0,R24
     991 E423      LDI	R18,0x43
     992 2D0C      MOV	R16,R12
     993 940E 151C CALL	_angle
(0626)         
(0627)         delay(delay_time);
     995 018B      MOVW	R16,R22
     996 940E 14C9 CALL	_delay
(0628) 
(0629)         //putting down even legs
(0630)         angle(dir2, MOTOR_B, 90);
     998 E58A      LDI	R24,0x5A
     999 8388      STD	Y+0,R24
     99A E422      LDI	R18,0x42
     99B 810B      LDD	R16,Y+3
     99C 940E 151C CALL	_angle
(0631)         angle(dir4, MOTOR_B, 90);
     99E E58A      LDI	R24,0x5A
     99F 8388      STD	Y+0,R24
     9A0 E422      LDI	R18,0x42
     9A1 810C      LDD	R16,Y+4
     9A2 940E 151C CALL	_angle
(0632)         angle(dir6, MOTOR_B, 90);
     9A4 E58A      LDI	R24,0x5A
     9A5 8388      STD	Y+0,R24
     9A6 E422      LDI	R18,0x42
     9A7 2D0C      MOV	R16,R12
     9A8 940E 151C CALL	_angle
(0633)         
(0634)         delay(HUNDRED_MSEC);
     9AA E208      LDI	R16,0x28
     9AB E010      LDI	R17,0
     9AC 940E 14C9 CALL	_delay
(0635)         
(0636)         //picking up odd legs
(0637)         angle(dir1, MOTOR_B, lift);
     9AE 82A8      STD	Y+0,R10
     9AF E422      LDI	R18,0x42
     9B0 850F      LDD	R16,Y+15
     9B1 940E 151C CALL	_angle
(0638)         angle(dir3, MOTOR_B, lift);
     9B3 82A8      STD	Y+0,R10
     9B4 E422      LDI	R18,0x42
     9B5 8109      LDD	R16,Y+1
     9B6 940E 151C CALL	_angle
(0639)         angle(dir5, MOTOR_B, lift);
     9B8 82A8      STD	Y+0,R10
     9B9 E422      LDI	R18,0x42
     9BA 810A      LDD	R16,Y+2
     9BB 940E 151C CALL	_angle
(0640)         delay(delay_time);
     9BD 018B      MOVW	R16,R22
     9BE 940E 14C9 CALL	_delay
(0641) 
(0642)         //moving the odd legs in air
(0643)         angle(dir1, MOTOR_C, 90 + step_forward);
     9C0 2D8E      MOV	R24,R14
     9C1 5A86      SUBI	R24,0xA6
     9C2 8388      STD	Y+0,R24
     9C3 E423      LDI	R18,0x43
     9C4 850F      LDD	R16,Y+15
     9C5 940E 151C CALL	_angle
(0644)         angle(dir3, MOTOR_A, 90 - step_side);
     9C7 E58A      LDI	R24,0x5A
     9C8 1B84      SUB	R24,R20
     9C9 8388      STD	Y+0,R24
     9CA E421      LDI	R18,0x41
     9CB 8109      LDD	R16,Y+1
     9CC 940E 151C CALL	_angle
(0645)         angle(dir5, MOTOR_A, 90 + step_side);
     9CE 2F84      MOV	R24,R20
     9CF 5A86      SUBI	R24,0xA6
     9D0 8388      STD	Y+0,R24
     9D1 E421      LDI	R18,0x41
     9D2 810A      LDD	R16,Y+2
     9D3 940E 151C CALL	_angle
(0646) 
(0647)         //moving the body forward on even tripod
(0648)         angle(dir2, MOTOR_A, 90 + step_side);
     9D5 2F84      MOV	R24,R20
     9D6 5A86      SUBI	R24,0xA6
     9D7 8388      STD	Y+0,R24
     9D8 E421      LDI	R18,0x41
     9D9 810B      LDD	R16,Y+3
     9DA 940E 151C CALL	_angle
(0649)         angle(dir4, MOTOR_A, 90 - step_side);
     9DC E58A      LDI	R24,0x5A
     9DD 1B84      SUB	R24,R20
     9DE 8388      STD	Y+0,R24
     9DF E421      LDI	R18,0x41
     9E0 810C      LDD	R16,Y+4
     9E1 940E 151C CALL	_angle
(0650)         angle(dir6, MOTOR_C, 90 + step_forward);
     9E3 2D8E      MOV	R24,R14
     9E4 5A86      SUBI	R24,0xA6
     9E5 8388      STD	Y+0,R24
     9E6 E423      LDI	R18,0x43
     9E7 2D0C      MOV	R16,R12
     9E8 940E 151C CALL	_angle
(0651)         
(0652)         delay(delay_time);
     9EA 018B      MOVW	R16,R22
     9EB 940E 14C9 CALL	_delay
(0653)         
(0654)         //putting down odd tripod
(0655)         angle(dir1, MOTOR_B, 90);
     9ED E58A      LDI	R24,0x5A
     9EE 8388      STD	Y+0,R24
     9EF E422      LDI	R18,0x42
     9F0 850F      LDD	R16,Y+15
     9F1 940E 151C CALL	_angle
(0656)         angle(dir3, MOTOR_B, 90);
     9F3 E58A      LDI	R24,0x5A
     9F4 8388      STD	Y+0,R24
     9F5 E422      LDI	R18,0x42
     9F6 8109      LDD	R16,Y+1
     9F7 940E 151C CALL	_angle
(0657)         angle(dir5, MOTOR_B, 90);
     9F9 E58A      LDI	R24,0x5A
     9FA 8388      STD	Y+0,R24
     9FB E422      LDI	R18,0x42
     9FC 810A      LDD	R16,Y+2
     9FD 940E 151C CALL	_angle
(0658)         
(0659)         delay(HUNDRED_MSEC);
     9FF E208      LDI	R16,0x28
     A00 E010      LDI	R17,0
     A01 940E 14C9 CALL	_delay
     A03 8829      LDD	R2,Y+17
     A04 2433      CLR	R3
     A05 2D82      MOV	R24,R2
     A06 5081      SUBI	R24,1
     A07 8B89      STD	Y+17,R24
     A08 E080      LDI	R24,0
     A09 1582      CP	R24,R2
     A0A F408      BCC	0x0A0C
     A0B CF4D      RJMP	0x0959
     A0C 9625      ADIW	R28,5
     A0D 940E 1E3A CALL	pop_xgsetF0FC
     A0F 9624      ADIW	R28,4
     A10 9508      RET
_tripod_gait_insect_continuous:
  delay_time           --> R10
  step_side            --> R20
  step_front_backward  --> R14
  step_front_forward   --> R12
  dir6                 --> Y,+5
  dir4                 --> Y,+4
  dir2                 --> Y,+3
  dir5                 --> Y,+2
  dir3                 --> Y,+1
  lift                 --> R22
  steps                --> Y,+18
  dir1                 --> Y,+16
     A11 940E 1DB6 CALL	push_arg4
     A13 940E 1E45 CALL	push_xgsetF0FC
     A15 9726      SBIW	R28,6
(0660)     }
(0661) }
(0662) 
(0663) /**
(0664) Tripod gait moves the hexapod in the direction dir1 for steps.
(0665) Three legs forming a tripod move first then the other three legs move  
(0666) Used for normal gait of the hexapod
(0667) @param dir1 : Direction of motion
(0668) @param steps : number of steps
(0669) */
(0670) void tripod_gait_insect_continuous(unsigned char dir1, unsigned char steps) 
(0671) {
(0672)     unsigned char dir3 = ((dir1 + 1) % 6) + 1;
     A16 E016      LDI	R17,6
     A17 8908      LDD	R16,Y+16
     A18 5F0F      SUBI	R16,0xFF
     A19 940E 1DF5 CALL	mod8u
     A1B 2F80      MOV	R24,R16
     A1C 5F8F      SUBI	R24,0xFF
     A1D 8389      STD	Y+1,R24
(0673)     unsigned char dir5 = ((dir3 + 1) % 6) + 1;
     A1E E016      LDI	R17,6
     A1F 2F08      MOV	R16,R24
     A20 5F0F      SUBI	R16,0xFF
     A21 940E 1DF5 CALL	mod8u
     A23 2F80      MOV	R24,R16
     A24 5F8F      SUBI	R24,0xFF
     A25 838A      STD	Y+2,R24
(0674)     unsigned char dir2 = 7 - dir5;
     A26 2E28      MOV	R2,R24
     A27 E087      LDI	R24,7
     A28 1982      SUB	R24,R2
     A29 838B      STD	Y+3,R24
(0675)     unsigned char dir4 = 7 - dir3;
     A2A 8029      LDD	R2,Y+1
     A2B E087      LDI	R24,7
     A2C 1982      SUB	R24,R2
     A2D 838C      STD	Y+4,R24
(0676)     unsigned char dir6 = 7 - dir1;
     A2E E087      LDI	R24,7
     A2F 8808      LDD	R0,Y+16
     A30 1980      SUB	R24,R0
     A31 838D      STD	Y+5,R24
(0677) 	unsigned char step_front_forward = 30 * movementScaling;
     A32 E906      LDI	R16,0x96
     A33 E011      LDI	R17,1
     A34 940E 1E0D CALL	elpm32
     A36 E08E      LDI	R24,0xE
     A37 E092      LDI	R25,2
     A38 939A      ST	R25,-Y
     A39 938A      ST	R24,-Y
     A3A 940E 2028 CALL	fpmule1
     A3C 940E 1F24 CALL	fpint
     A3E 2EC0      MOV	R12,R16
(0678)     unsigned char step_front_backward = 70 * movementScaling;
     A3F E902      LDI	R16,0x92
     A40 E011      LDI	R17,1
     A41 940E 1E0D CALL	elpm32
     A43 E08E      LDI	R24,0xE
     A44 E092      LDI	R25,2
     A45 939A      ST	R25,-Y
     A46 938A      ST	R24,-Y
     A47 940E 2028 CALL	fpmule1
     A49 940E 1F24 CALL	fpint
     A4B 2EE0      MOV	R14,R16
(0679)     unsigned char step_side =40 * movementScaling;
     A4C EA02      LDI	R16,0xA2
     A4D E011      LDI	R17,1
     A4E 940E 1E0D CALL	elpm32
     A50 E08E      LDI	R24,0xE
     A51 E092      LDI	R25,2
     A52 939A      ST	R25,-Y
     A53 938A      ST	R24,-Y
     A54 940E 2028 CALL	fpmule1
     A56 940E 1F24 CALL	fpint
     A58 2F40      MOV	R20,R16
(0680)     unsigned char lift = 40;
     A59 E268      LDI	R22,0x28
(0681)     int delay_time = 150;//TWO_HUNDRED_FIFTY_MSEC;
     A5A E986      LDI	R24,0x96
     A5B E090      LDI	R25,0
     A5C 015C      MOVW	R10,R24
(0682)     
(0683)     // The following is done to keep dir3 to the left of dir1 and dir5 to the right of dir1
(0684)     if(dir1%2 == 0) 
     A5D E012      LDI	R17,2
     A5E 8908      LDD	R16,Y+16
     A5F 940E 1DF5 CALL	mod8u
     A61 2300      TST	R16
     A62 F009      BEQ	0x0A64
     A63 C0BB      RJMP	0x0B1F
(0685) 	{
(0686)         swap(&dir2, &dir4);
     A64 019E      MOVW	R18,R28
     A65 5F2C      SUBI	R18,0xFC
     A66 4F3F      SBCI	R19,0xFF
     A67 018E      MOVW	R16,R28
     A68 5F0D      SUBI	R16,0xFD
     A69 4F1F      SBCI	R17,0xFF
     A6A 940E 1629 CALL	_swap
(0687)         swap(&dir3, &dir5);      
     A6C 019E      MOVW	R18,R28
     A6D 5F2E      SUBI	R18,0xFE
     A6E 4F3F      SBCI	R19,0xFF
     A6F 018E      MOVW	R16,R28
     A70 5F0F      SUBI	R16,0xFF
     A71 4F1F      SBCI	R17,0xFF
     A72 940E 1629 CALL	_swap
(0688)     }
     A74 C0AA      RJMP	0x0B1F
(0689)     
(0690) 	while (steps-- > 0) 
(0691) 	{        
(0692)         //picking up even tripod
(0693)         angle(dir2, MOTOR_B, lift);
     A75 8368      STD	Y+0,R22
     A76 E422      LDI	R18,0x42
     A77 810B      LDD	R16,Y+3
     A78 940E 151C CALL	_angle
(0694)         angle(dir4, MOTOR_B, lift);
     A7A 8368      STD	Y+0,R22
     A7B E422      LDI	R18,0x42
     A7C 810C      LDD	R16,Y+4
     A7D 940E 151C CALL	_angle
(0695)         angle(dir6, MOTOR_B, lift);
     A7F 8368      STD	Y+0,R22
     A80 E422      LDI	R18,0x42
     A81 810D      LDD	R16,Y+5
     A82 940E 151C CALL	_angle
(0696)     
(0697)         delay(delay_time);
     A84 0185      MOVW	R16,R10
     A85 940E 14C9 CALL	_delay
(0698) 
(0699)         //moving body on odd tripod
(0700)         angle(dir1, MOTOR_A, 90 - step_front_backward);
     A87 E58A      LDI	R24,0x5A
     A88 198E      SUB	R24,R14
     A89 8388      STD	Y+0,R24
     A8A E421      LDI	R18,0x41
     A8B 8908      LDD	R16,Y+16
     A8C 940E 151C CALL	_angle
(0701)         angle(dir3, MOTOR_A, 90 + step_side);
     A8E 2F84      MOV	R24,R20
     A8F 5A86      SUBI	R24,0xA6
     A90 8388      STD	Y+0,R24
     A91 E421      LDI	R18,0x41
     A92 8109      LDD	R16,Y+1
     A93 940E 151C CALL	_angle
(0702)         angle(dir5, MOTOR_A, 90 - step_front_forward);
     A95 E58A      LDI	R24,0x5A
     A96 198C      SUB	R24,R12
     A97 8388      STD	Y+0,R24
     A98 E421      LDI	R18,0x41
     A99 810A      LDD	R16,Y+2
     A9A 940E 151C CALL	_angle
(0703)         
(0704)         //moving legs even forward in air
(0705)         angle(dir2, MOTOR_A, 90 - step_front_forward);
     A9C E58A      LDI	R24,0x5A
     A9D 198C      SUB	R24,R12
     A9E 8388      STD	Y+0,R24
     A9F E421      LDI	R18,0x41
     AA0 810B      LDD	R16,Y+3
     AA1 940E 151C CALL	_angle
(0706)         angle(dir4, MOTOR_A, 90 + step_side);
     AA3 2F84      MOV	R24,R20
     AA4 5A86      SUBI	R24,0xA6
     AA5 8388      STD	Y+0,R24
     AA6 E421      LDI	R18,0x41
     AA7 810C      LDD	R16,Y+4
     AA8 940E 151C CALL	_angle
(0707)         angle(dir6, MOTOR_A, 90 - step_front_backward);
     AAA E58A      LDI	R24,0x5A
     AAB 198E      SUB	R24,R14
     AAC 8388      STD	Y+0,R24
     AAD E421      LDI	R18,0x41
     AAE 810D      LDD	R16,Y+5
     AAF 940E 151C CALL	_angle
(0708)         
(0709)         delay(delay_time);
     AB1 0185      MOVW	R16,R10
     AB2 940E 14C9 CALL	_delay
(0710) 
(0711)         //putting down even legs
(0712)         angle(dir2, MOTOR_B, 90);
     AB4 E58A      LDI	R24,0x5A
     AB5 8388      STD	Y+0,R24
     AB6 E422      LDI	R18,0x42
     AB7 810B      LDD	R16,Y+3
     AB8 940E 151C CALL	_angle
(0713)         angle(dir4, MOTOR_B, 90);
     ABA E58A      LDI	R24,0x5A
     ABB 8388      STD	Y+0,R24
     ABC E422      LDI	R18,0x42
     ABD 810C      LDD	R16,Y+4
     ABE 940E 151C CALL	_angle
(0714)         angle(dir6, MOTOR_B, 90);
     AC0 E58A      LDI	R24,0x5A
     AC1 8388      STD	Y+0,R24
     AC2 E422      LDI	R18,0x42
     AC3 810D      LDD	R16,Y+5
     AC4 940E 151C CALL	_angle
(0715)         
(0716)         delay(HUNDRED_MSEC);
     AC6 E208      LDI	R16,0x28
     AC7 E010      LDI	R17,0
     AC8 940E 14C9 CALL	_delay
(0717)         
(0718)         //picking up odd legs
(0719)         angle(dir1, MOTOR_B, lift);
     ACA 8368      STD	Y+0,R22
     ACB E422      LDI	R18,0x42
     ACC 8908      LDD	R16,Y+16
     ACD 940E 151C CALL	_angle
(0720)         angle(dir3, MOTOR_B, lift);
     ACF 8368      STD	Y+0,R22
     AD0 E422      LDI	R18,0x42
     AD1 8109      LDD	R16,Y+1
     AD2 940E 151C CALL	_angle
(0721)         angle(dir5, MOTOR_B, lift);
     AD4 8368      STD	Y+0,R22
     AD5 E422      LDI	R18,0x42
     AD6 810A      LDD	R16,Y+2
     AD7 940E 151C CALL	_angle
(0722)         delay(delay_time);
     AD9 0185      MOVW	R16,R10
     ADA 940E 14C9 CALL	_delay
(0723) 
(0724)         //moving the odd legs in air
(0725)         angle(dir1, MOTOR_A, 90 + step_front_forward);
     ADC 2D8C      MOV	R24,R12
     ADD 5A86      SUBI	R24,0xA6
     ADE 8388      STD	Y+0,R24
     ADF E421      LDI	R18,0x41
     AE0 8908      LDD	R16,Y+16
     AE1 940E 151C CALL	_angle
(0726)         angle(dir3, MOTOR_A, 90 - step_side);
     AE3 E58A      LDI	R24,0x5A
     AE4 1B84      SUB	R24,R20
     AE5 8388      STD	Y+0,R24
     AE6 E421      LDI	R18,0x41
     AE7 8109      LDD	R16,Y+1
     AE8 940E 151C CALL	_angle
(0727)         angle(dir5, MOTOR_A, 90 + step_front_backward);
     AEA 2D8E      MOV	R24,R14
     AEB 5A86      SUBI	R24,0xA6
     AEC 8388      STD	Y+0,R24
     AED E421      LDI	R18,0x41
     AEE 810A      LDD	R16,Y+2
     AEF 940E 151C CALL	_angle
(0728) 
(0729)         //moving the body forward on even tripod
(0730)         angle(dir2, MOTOR_A, 90 + step_front_backward);
     AF1 2D8E      MOV	R24,R14
     AF2 5A86      SUBI	R24,0xA6
     AF3 8388      STD	Y+0,R24
     AF4 E421      LDI	R18,0x41
     AF5 810B      LDD	R16,Y+3
     AF6 940E 151C CALL	_angle
(0731)         angle(dir4, MOTOR_A, 90 - step_side);
     AF8 E58A      LDI	R24,0x5A
     AF9 1B84      SUB	R24,R20
     AFA 8388      STD	Y+0,R24
     AFB E421      LDI	R18,0x41
     AFC 810C      LDD	R16,Y+4
     AFD 940E 151C CALL	_angle
(0732)         angle(dir6, MOTOR_A, 90 + step_front_forward);
     AFF 2D8C      MOV	R24,R12
     B00 5A86      SUBI	R24,0xA6
     B01 8388      STD	Y+0,R24
     B02 E421      LDI	R18,0x41
     B03 810D      LDD	R16,Y+5
     B04 940E 151C CALL	_angle
(0733)         
(0734)         delay(delay_time);
     B06 0185      MOVW	R16,R10
     B07 940E 14C9 CALL	_delay
(0735)         
(0736)         //putting down odd tripod
(0737)         angle(dir1, MOTOR_B, 90);
     B09 E58A      LDI	R24,0x5A
     B0A 8388      STD	Y+0,R24
     B0B E422      LDI	R18,0x42
     B0C 8908      LDD	R16,Y+16
     B0D 940E 151C CALL	_angle
(0738)         angle(dir3, MOTOR_B, 90);
     B0F E58A      LDI	R24,0x5A
     B10 8388      STD	Y+0,R24
     B11 E422      LDI	R18,0x42
     B12 8109      LDD	R16,Y+1
     B13 940E 151C CALL	_angle
(0739)         angle(dir5, MOTOR_B, 90);
     B15 E58A      LDI	R24,0x5A
     B16 8388      STD	Y+0,R24
     B17 E422      LDI	R18,0x42
     B18 810A      LDD	R16,Y+2
     B19 940E 151C CALL	_angle
(0740)         
(0741)         delay(HUNDRED_MSEC);
     B1B E208      LDI	R16,0x28
     B1C E010      LDI	R17,0
     B1D 940E 14C9 CALL	_delay
     B1F 882A      LDD	R2,Y+18
     B20 2433      CLR	R3
     B21 2D82      MOV	R24,R2
     B22 5081      SUBI	R24,1
     B23 8B8A      STD	Y+18,R24
     B24 E080      LDI	R24,0
     B25 1582      CP	R24,R2
     B26 F408      BCC	0x0B28
     B27 CF4D      RJMP	0x0A75
     B28 9626      ADIW	R28,6
     B29 940E 1E3A CALL	pop_xgsetF0FC
     B2B 9624      ADIW	R28,4
     B2C 9508      RET
_wave_gait:
  i                    --> R22
  j                    --> R14
  k                    --> R10
  dir6                 --> R10
  dir4                 --> R14
  dir2                 --> R12
  step_side            --> R22
  dir5                 --> Y,+35
  dir3                 --> Y,+34
  step_forward         --> R20
  lift                 --> Y,+33
  delay_time           --> Y,+31
  leg_distance         --> Y,+19
  leg_order            --> Y,+13
  leg_current          --> Y,+1
  steps                --> Y,+48
  dir1                 --> Y,+46
     B2D 940E 1DB6 CALL	push_arg4
     B2F 940E 1E45 CALL	push_xgsetF0FC
     B31 97A4      SBIW	R28,0x24
(0742)     }
(0743) }
(0744) 
(0745) 
(0746) void wave_gait(unsigned char dir1, int steps) 
(0747) {
(0748) 	 unsigned char dir3 = ((dir1 + 1) % 6) + 1;
     B32 E016      LDI	R17,6
     B33 A50E      LDD	R16,Y+46
     B34 5F0F      SUBI	R16,0xFF
     B35 940E 1DF5 CALL	mod8u
     B37 2F80      MOV	R24,R16
     B38 5F8F      SUBI	R24,0xFF
     B39 A38A      STD	Y+34,R24
(0749)      unsigned char dir5 = ((dir3 + 1) % 6) + 1;
     B3A E016      LDI	R17,6
     B3B 2F08      MOV	R16,R24
     B3C 5F0F      SUBI	R16,0xFF
     B3D 940E 1DF5 CALL	mod8u
     B3F 2F80      MOV	R24,R16
     B40 5F8F      SUBI	R24,0xFF
     B41 A38B      STD	Y+35,R24
(0750)      unsigned char dir2 = 7 - dir5;
     B42 E087      LDI	R24,7
     B43 2EC8      MOV	R12,R24
     B44 A00B      LDD	R0,Y+35
     B45 18C0      SUB	R12,R0
(0751)      unsigned char dir4 = 7 - dir3;
     B46 2EE8      MOV	R14,R24
     B47 A00A      LDD	R0,Y+34
     B48 18E0      SUB	R14,R0
(0752)      unsigned char dir6 = 7 - dir1;
     B49 2EA8      MOV	R10,R24
     B4A A40E      LDD	R0,Y+46
     B4B 18A0      SUB	R10,R0
(0753) 	 
(0754)      unsigned char step_forward = 70;
     B4C E446      LDI	R20,0x46
(0755)      unsigned char step_side = 50;
     B4D E362      LDI	R22,0x32
(0756)      unsigned char lift = 40;
     B4E E288      LDI	R24,0x28
     B4F A389      STD	Y+33,R24
(0757)      int delay_time = 100;
     B50 E684      LDI	R24,0x64
     B51 E090      LDI	R25,0
     B52 A398      STD	Y+32,R25
     B53 8F8F      STD	Y+31,R24
(0758) 	 
(0759) 	 unsigned char leg_order[6];
(0760) 	 int leg_distance[6];
(0761) 	 int leg_current[] = {0, 0, 0, 0, 0, 0};
     B54 E78A      LDI	R24,0x7A
     B55 E091      LDI	R25,1
     B56 01FE      MOVW	R30,R28
     B57 9631      ADIW	R30,1
     B58 E00C      LDI	R16,0xC
     B59 E010      LDI	R17,0
     B5A 93FA      ST	R31,-Y
     B5B 93EA      ST	R30,-Y
     B5C 939A      ST	R25,-Y
     B5D 938A      ST	R24,-Y
     B5E 940E 1E8D CALL	asgncblkx
(0762) 	 
(0763) 	 leg_order[0] = dir1;
     B60 A40E      LDD	R0,Y+46
     B61 860D      STD	Y+13,R0
(0764) 	 leg_order[1] = dir2;
     B62 86CE      STD	Y+14,R12
(0765) 	 leg_order[2] = dir3;
     B63 A00A      LDD	R0,Y+34
     B64 860F      STD	Y+15,R0
(0766) 	 leg_order[3] = dir4;
     B65 8AE8      STD	Y+16,R14
(0767) 	 leg_order[4] = dir5;
     B66 A00B      LDD	R0,Y+35
     B67 8A09      STD	Y+17,R0
(0768) 	 leg_order[5] = dir6;
     B68 8AAA      STD	Y+18,R10
(0769) 	 
(0770) 	 leg_distance[0] = -step_forward;
     B69 2F84      MOV	R24,R20
     B6A 2799      CLR	R25
     B6B 9580      COM	R24
     B6C 9590      COM	R25
     B6D 5F8F      SUBI	R24,0xFF
     B6E 4F9F      SBCI	R25,0xFF
     B6F 8B9C      STD	Y+20,R25
     B70 8B8B      STD	Y+19,R24
(0771) 	 leg_distance[1] = -step_side;
     B71 2F86      MOV	R24,R22
     B72 2799      CLR	R25
     B73 9580      COM	R24
     B74 9590      COM	R25
     B75 5F8F      SUBI	R24,0xFF
     B76 4F9F      SBCI	R25,0xFF
     B77 8B9E      STD	Y+22,R25
     B78 8B8D      STD	Y+21,R24
(0772) 	 leg_distance[2] = -step_forward;
     B79 2F84      MOV	R24,R20
     B7A 2799      CLR	R25
     B7B 9580      COM	R24
     B7C 9590      COM	R25
     B7D 5F8F      SUBI	R24,0xFF
     B7E 4F9F      SBCI	R25,0xFF
     B7F 8F98      STD	Y+24,R25
     B80 8B8F      STD	Y+23,R24
(0773) 	 leg_distance[3] = step_forward;
     B81 2E24      MOV	R2,R20
     B82 2433      CLR	R3
     B83 8E3A      STD	Y+26,R3
     B84 8E29      STD	Y+25,R2
(0774) 	 leg_distance[4] = step_side;
     B85 2E26      MOV	R2,R22
     B86 2433      CLR	R3
     B87 8E3C      STD	Y+28,R3
     B88 8E2B      STD	Y+27,R2
(0775) 	 leg_distance[5] = step_forward;
     B89 2E24      MOV	R2,R20
     B8A 2433      CLR	R3
     B8B 8E3E      STD	Y+30,R3
     B8C 8E2D      STD	Y+29,R2
     B8D C0C5      RJMP	0x0C53
(0776) 	
(0777) 	 while(steps-- > 0) 
(0778) 	 {
(0779) 	 	    int i, j, k;
(0780) 			for (i = 0; i < 6; i++){
     B8E 2766      CLR	R22
     B8F 2777      CLR	R23
(0781) 				//putting down leg i and pick up leg i+1
(0782) 				angle(leg_order[i], MOTOR_B, 90);
     B90 E58A      LDI	R24,0x5A
     B91 8388      STD	Y+0,R24
     B92 E422      LDI	R18,0x42
     B93 01CE      MOVW	R24,R28
     B94 960D      ADIW	R24,0xD
     B95 01FB      MOVW	R30,R22
     B96 0FE8      ADD	R30,R24
     B97 1FF9      ADC	R31,R25
     B98 8100      LDD	R16,Z+0
     B99 940E 151C CALL	_angle
(0783) 				angle(leg_order[(i+1) % 6], MOTOR_B, lift);
     B9B A009      LDD	R0,Y+33
     B9C 8208      STD	Y+0,R0
     B9D E422      LDI	R18,0x42
     B9E E086      LDI	R24,6
     B9F E090      LDI	R25,0
     BA0 018B      MOVW	R16,R22
     BA1 5F0F      SUBI	R16,0xFF
     BA2 4F1F      SBCI	R17,0xFF
     BA3 932F      PUSH	R18
     BA4 933F      PUSH	R19
     BA5 019C      MOVW	R18,R24
     BA6 940E 1DBB CALL	mod16s
     BA8 01F8      MOVW	R30,R16
     BA9 913F      POP	R19
     BAA 912F      POP	R18
     BAB 01CE      MOVW	R24,R28
     BAC 960D      ADIW	R24,0xD
     BAD 0FE8      ADD	R30,R24
     BAE 1FF9      ADC	R31,R25
     BAF 8100      LDD	R16,Z+0
     BB0 940E 151C CALL	_angle
(0784) 			
(0785) 				delay(delay_time);
     BB2 8D0F      LDD	R16,Y+31
     BB3 A118      LDD	R17,Y+32
     BB4 940E 14C9 CALL	_delay
(0786) 						
(0787) 				//moving body on leg i and move leg i+1 in air
(0788) 				leg_current[(i+1) % 6] = 90 + leg_distance[(i+1) % 6];
     BB6 E026      LDI	R18,6
     BB7 E030      LDI	R19,0
     BB8 018B      MOVW	R16,R22
     BB9 5F0F      SUBI	R16,0xFF
     BBA 4F1F      SBCI	R17,0xFF
     BBB 940E 1DBB CALL	mod16s
     BBD 0118      MOVW	R2,R16
     BBE 0C22      LSL	R2
     BBF 1C33      ROL	R3
     BC0 01CE      MOVW	R24,R28
     BC1 9643      ADIW	R24,0x13
     BC2 01F1      MOVW	R30,R2
     BC3 0FE8      ADD	R30,R24
     BC4 1FF9      ADC	R31,R25
     BC5 8180      LDD	R24,Z+0
     BC6 8191      LDD	R25,Z+1
     BC7 5A86      SUBI	R24,0xA6
     BC8 4F9F      SBCI	R25,0xFF
     BC9 01FE      MOVW	R30,R28
     BCA 9631      ADIW	R30,1
     BCB 01D1      MOVW	R26,R2
     BCC 0FAE      ADD	R26,R30
     BCD 1FBF      ADC	R27,R31
     BCE 938D      ST	R24,X+
     BCF 939C      ST	R25,1(X)
(0789) 				angle(leg_order[(i+1) % 6], MOTOR_A, leg_current[(i+1) % 6]);
     BD0 E026      LDI	R18,6
     BD1 E030      LDI	R19,0
     BD2 018B      MOVW	R16,R22
     BD3 5F0F      SUBI	R16,0xFF
     BD4 4F1F      SBCI	R17,0xFF
     BD5 940E 1DBB CALL	mod16s
     BD7 01CE      MOVW	R24,R28
     BD8 9601      ADIW	R24,1
     BD9 01F8      MOVW	R30,R16
     BDA 0FEE      LSL	R30
     BDB 1FFF      ROL	R31
     BDC 0FE8      ADD	R30,R24
     BDD 1FF9      ADC	R31,R25
     BDE 8020      LDD	R2,Z+0
     BDF 8031      LDD	R3,Z+1
     BE0 8228      STD	Y+0,R2
     BE1 E421      LDI	R18,0x41
     BE2 01CE      MOVW	R24,R28
     BE3 960D      ADIW	R24,0xD
     BE4 01F8      MOVW	R30,R16
     BE5 0FE8      ADD	R30,R24
     BE6 1FF9      ADC	R31,R25
     BE7 8100      LDD	R16,Z+0
     BE8 940E 151C CALL	_angle
(0790) 				for (j = 1; j <= 5; j++){
     BEA E081      LDI	R24,1
     BEB E090      LDI	R25,0
     BEC 017C      MOVW	R14,R24
(0791) 					k =  (i + 1 + j) % 6;
     BED 018B      MOVW	R16,R22
     BEE 5F0F      SUBI	R16,0xFF
     BEF 4F1F      SBCI	R17,0xFF
     BF0 0D0E      ADD	R16,R14
     BF1 1D1F      ADC	R17,R15
     BF2 E026      LDI	R18,6
     BF3 E030      LDI	R19,0
     BF4 940E 1DBB CALL	mod16s
     BF6 0158      MOVW	R10,R16
(0792) 					leg_current[k] = leg_current[k] - (2 * leg_distance[k]) / 5;
     BF7 01A5      MOVW	R20,R10
     BF8 0F44      LSL	R20
     BF9 1F55      ROL	R21
     BFA 01CE      MOVW	R24,R28
     BFB 9601      ADIW	R24,1
     BFC 016A      MOVW	R12,R20
     BFD 0EC8      ADD	R12,R24
     BFE 1ED9      ADC	R13,R25
     BFF 01CE      MOVW	R24,R28
     C00 9643      ADIW	R24,0x13
     C01 01FA      MOVW	R30,R20
     C02 0FE8      ADD	R30,R24
     C03 1FF9      ADC	R31,R25
     C04 8100      LDD	R16,Z+0
     C05 8111      LDD	R17,Z+1
     C06 0F00      LSL	R16
     C07 1F11      ROL	R17
     C08 E025      LDI	R18,5
     C09 E030      LDI	R19,0
     C0A 940E 1DBF CALL	div16s
     C0C 01F6      MOVW	R30,R12
     C0D 8020      LDD	R2,Z+0
     C0E 8031      LDD	R3,Z+1
     C0F 1A20      SUB	R2,R16
     C10 0A31      SBC	R3,R17
     C11 8231      STD	Z+1,R3
     C12 8220      STD	Z+0,R2
(0793) 					angle(leg_order[k], MOTOR_A, leg_current[k]);
     C13 01CE      MOVW	R24,R28
     C14 9601      ADIW	R24,1
     C15 01F5      MOVW	R30,R10
     C16 0FEE      LSL	R30
     C17 1FFF      ROL	R31
     C18 0FE8      ADD	R30,R24
     C19 1FF9      ADC	R31,R25
     C1A 8020      LDD	R2,Z+0
     C1B 8031      LDD	R3,Z+1
     C1C 8228      STD	Y+0,R2
     C1D E421      LDI	R18,0x41
     C1E 01CE      MOVW	R24,R28
     C1F 960D      ADIW	R24,0xD
     C20 01F5      MOVW	R30,R10
     C21 0FE8      ADD	R30,R24
     C22 1FF9      ADC	R31,R25
     C23 8100      LDD	R16,Z+0
     C24 940E 151C CALL	_angle
     C26 01C7      MOVW	R24,R14
     C27 9601      ADIW	R24,1
     C28 017C      MOVW	R14,R24
     C29 E085      LDI	R24,5
     C2A E090      LDI	R25,0
     C2B 158E      CP	R24,R14
     C2C 059F      CPC	R25,R15
     C2D F00C      BLT	0x0C2F
     C2E CFBE      RJMP	0x0BED
(0794) 				}
(0795) 				delay(delay_time);
     C2F 8D0F      LDD	R16,Y+31
     C30 A118      LDD	R17,Y+32
     C31 940E 14C9 CALL	_delay
     C33 5F6F      SUBI	R22,0xFF
     C34 4F7F      SBCI	R23,0xFF
     C35 3066      CPI	R22,6
     C36 E0E0      LDI	R30,0
     C37 077E      CPC	R23,R30
     C38 F40C      BGE	0x0C3A
     C39 CF56      RJMP	0x0B90
(0796) 			}
(0797) 			
(0798) 			angle(leg_order[i % 6], MOTOR_B, 90);			
     C3A E58A      LDI	R24,0x5A
     C3B 8388      STD	Y+0,R24
     C3C E422      LDI	R18,0x42
     C3D E086      LDI	R24,6
     C3E E090      LDI	R25,0
     C3F 932F      PUSH	R18
     C40 933F      PUSH	R19
     C41 019C      MOVW	R18,R24
     C42 018B      MOVW	R16,R22
     C43 940E 1DBB CALL	mod16s
     C45 01F8      MOVW	R30,R16
     C46 913F      POP	R19
     C47 912F      POP	R18
     C48 01CE      MOVW	R24,R28
     C49 960D      ADIW	R24,0xD
     C4A 0FE8      ADD	R30,R24
     C4B 1FF9      ADC	R31,R25
     C4C 8100      LDD	R16,Z+0
     C4D 940E 151C CALL	_angle
(0799) 			delay(delay_time);
     C4F 8D0F      LDD	R16,Y+31
     C50 A118      LDD	R17,Y+32
     C51 940E 14C9 CALL	_delay
     C53 A968      LDD	R22,Y+48
     C54 A979      LDD	R23,Y+49
     C55 01CB      MOVW	R24,R22
     C56 9701      SBIW	R24,1
     C57 AB99      STD	Y+49,R25
     C58 AB88      STD	Y+48,R24
     C59 2422      CLR	R2
     C5A 2433      CLR	R3
     C5B 1626      CP	R2,R22
     C5C 0637      CPC	R3,R23
     C5D F40C      BGE	0x0C5F
     C5E CF2F      RJMP	0x0B8E
     C5F 96A4      ADIW	R28,0x24
     C60 940E 1E3A CALL	pop_xgsetF0FC
     C62 9624      ADIW	R28,4
     C63 9508      RET
_ripple_gait:
  i                    --> R12
  j                    --> R14
  k                    --> R22
  dir6                 --> R10
  dir4                 --> R14
  dir2                 --> R12
  step_side            --> R22
  dir5                 --> Y,+37
  dir3                 --> Y,+36
  step_forward         --> R20
  delay_time2          --> Y,+34
  lift                 --> Y,+33
  delay_time1          --> Y,+31
  leg_distance         --> Y,+19
  leg_order            --> Y,+13
  leg_current          --> Y,+1
  steps                --> Y,+50
  dir1                 --> Y,+48
     C64 940E 1DB6 CALL	push_arg4
     C66 940E 1E45 CALL	push_xgsetF0FC
     C68 97A6      SBIW	R28,0x26
(0800) 	}
(0801) }
(0802) 
(0803) 
(0804) void ripple_gait(unsigned char dir1, int steps) 
(0805) {
(0806)      unsigned char dir3 = ((dir1 + 1) % 6) + 1;
     C69 E016      LDI	R17,6
     C6A A908      LDD	R16,Y+48
     C6B 5F0F      SUBI	R16,0xFF
     C6C 940E 1DF5 CALL	mod8u
     C6E 2F80      MOV	R24,R16
     C6F 5F8F      SUBI	R24,0xFF
     C70 A38C      STD	Y+36,R24
(0807)      unsigned char dir5 = ((dir3 + 1) % 6) + 1;
     C71 E016      LDI	R17,6
     C72 2F08      MOV	R16,R24
     C73 5F0F      SUBI	R16,0xFF
     C74 940E 1DF5 CALL	mod8u
     C76 2F80      MOV	R24,R16
     C77 5F8F      SUBI	R24,0xFF
     C78 A38D      STD	Y+37,R24
(0808)      unsigned char dir2 = 7 - dir5;
     C79 E087      LDI	R24,7
     C7A 2EC8      MOV	R12,R24
     C7B A00D      LDD	R0,Y+37
     C7C 18C0      SUB	R12,R0
(0809)      unsigned char dir4 = 7 - dir3;
     C7D 2EE8      MOV	R14,R24
     C7E A00C      LDD	R0,Y+36
     C7F 18E0      SUB	R14,R0
(0810)      unsigned char dir6 = 7 - dir1;
     C80 2EA8      MOV	R10,R24
     C81 A808      LDD	R0,Y+48
     C82 18A0      SUB	R10,R0
(0811) 
(0812)      unsigned char step_forward = 50;
     C83 E342      LDI	R20,0x32
(0813)      unsigned char step_side = 40;
     C84 E268      LDI	R22,0x28
(0814)      unsigned char lift = 40;
     C85 E288      LDI	R24,0x28
     C86 A389      STD	Y+33,R24
(0815)      int delay_time1 = 100;
     C87 E684      LDI	R24,0x64
     C88 E090      LDI	R25,0
     C89 A398      STD	Y+32,R25
     C8A 8F8F      STD	Y+31,R24
(0816) 	 int delay_time2 = 100;
     C8B A39B      STD	Y+35,R25
     C8C A38A      STD	Y+34,R24
(0817) 	 
(0818) 	 unsigned char leg_order[6];
(0819) 	 int leg_distance[6];
(0820) 	 int leg_current[] = {0, 0, 0, 0, 0, 0};
     C8D E886      LDI	R24,0x86
     C8E E091      LDI	R25,1
     C8F 01FE      MOVW	R30,R28
     C90 9631      ADIW	R30,1
     C91 E00C      LDI	R16,0xC
     C92 E010      LDI	R17,0
     C93 93FA      ST	R31,-Y
     C94 93EA      ST	R30,-Y
     C95 939A      ST	R25,-Y
     C96 938A      ST	R24,-Y
     C97 940E 1E8D CALL	asgncblkx
(0821) 	 
(0822) 	 leg_order[0] = dir1;
     C99 A808      LDD	R0,Y+48
     C9A 860D      STD	Y+13,R0
(0823) 	 leg_order[1] = dir2;
     C9B 86CE      STD	Y+14,R12
(0824) 	 leg_order[2] = dir3;
     C9C A00C      LDD	R0,Y+36
     C9D 860F      STD	Y+15,R0
(0825) 	 leg_order[3] = dir4;
     C9E 8AE8      STD	Y+16,R14
(0826) 	 leg_order[4] = dir5;
     C9F A00D      LDD	R0,Y+37
     CA0 8A09      STD	Y+17,R0
(0827) 	 leg_order[5] = dir6;
     CA1 8AAA      STD	Y+18,R10
(0828) 	 
(0829) 	 leg_distance[0] = -step_forward;
     CA2 2F84      MOV	R24,R20
     CA3 2799      CLR	R25
     CA4 9580      COM	R24
     CA5 9590      COM	R25
     CA6 5F8F      SUBI	R24,0xFF
     CA7 4F9F      SBCI	R25,0xFF
     CA8 8B9C      STD	Y+20,R25
     CA9 8B8B      STD	Y+19,R24
(0830) 	 leg_distance[1] = -step_side;
     CAA 2F86      MOV	R24,R22
     CAB 2799      CLR	R25
     CAC 9580      COM	R24
     CAD 9590      COM	R25
     CAE 5F8F      SUBI	R24,0xFF
     CAF 4F9F      SBCI	R25,0xFF
     CB0 8B9E      STD	Y+22,R25
     CB1 8B8D      STD	Y+21,R24
(0831) 	 leg_distance[2] = -step_forward;
     CB2 2F84      MOV	R24,R20
     CB3 2799      CLR	R25
     CB4 9580      COM	R24
     CB5 9590      COM	R25
     CB6 5F8F      SUBI	R24,0xFF
     CB7 4F9F      SBCI	R25,0xFF
     CB8 8F98      STD	Y+24,R25
     CB9 8B8F      STD	Y+23,R24
(0832) 	 leg_distance[3] = step_forward;
     CBA 2E24      MOV	R2,R20
     CBB 2433      CLR	R3
     CBC 8E3A      STD	Y+26,R3
     CBD 8E29      STD	Y+25,R2
(0833) 	 leg_distance[4] = step_side;
     CBE 2E26      MOV	R2,R22
     CBF 2433      CLR	R3
     CC0 8E3C      STD	Y+28,R3
     CC1 8E2B      STD	Y+27,R2
(0834) 	 leg_distance[5] = step_forward;
     CC2 2E24      MOV	R2,R20
     CC3 2433      CLR	R3
     CC4 8E3E      STD	Y+30,R3
     CC5 8E2D      STD	Y+29,R2
     CC6 C17E      RJMP	0x0E45
(0835) 	
(0836) 	 while(steps-- > 0) 
(0837) 	 {
(0838) 	 	    int i, j, k;
(0839) 			for (i = 0; i < 3; i++)
     CC7 24CC      CLR	R12
     CC8 24DD      CLR	R13
(0840) 			{
(0841) 				//putting down leg i and pick up leg i+1
(0842) 				angle(leg_order[i], MOTOR_B, 90);
     CC9 E58A      LDI	R24,0x5A
     CCA 8388      STD	Y+0,R24
     CCB E422      LDI	R18,0x42
     CCC 01CE      MOVW	R24,R28
     CCD 960D      ADIW	R24,0xD
     CCE 01F6      MOVW	R30,R12
     CCF 0FE8      ADD	R30,R24
     CD0 1FF9      ADC	R31,R25
     CD1 8100      LDD	R16,Z+0
     CD2 940E 151C CALL	_angle
(0843) 				angle(leg_order[(i+1) % 3], MOTOR_B, lift);
     CD4 A009      LDD	R0,Y+33
     CD5 8208      STD	Y+0,R0
     CD6 E422      LDI	R18,0x42
     CD7 E083      LDI	R24,3
     CD8 E090      LDI	R25,0
     CD9 0186      MOVW	R16,R12
     CDA 5F0F      SUBI	R16,0xFF
     CDB 4F1F      SBCI	R17,0xFF
     CDC 932F      PUSH	R18
     CDD 933F      PUSH	R19
     CDE 019C      MOVW	R18,R24
     CDF 940E 1DBB CALL	mod16s
     CE1 01F8      MOVW	R30,R16
     CE2 913F      POP	R19
     CE3 912F      POP	R18
     CE4 01CE      MOVW	R24,R28
     CE5 960D      ADIW	R24,0xD
     CE6 0FE8      ADD	R30,R24
     CE7 1FF9      ADC	R31,R25
     CE8 8100      LDD	R16,Z+0
     CE9 940E 151C CALL	_angle
(0844) 
(0845) 				delay(delay_time1);
     CEB 8D0F      LDD	R16,Y+31
     CEC A118      LDD	R17,Y+32
     CED 940E 14C9 CALL	_delay
(0846) 				
(0847) 				angle(leg_order[((i+2) % 3) + 3], MOTOR_B, 90);
     CEF E58A      LDI	R24,0x5A
     CF0 8388      STD	Y+0,R24
     CF1 E422      LDI	R18,0x42
     CF2 E083      LDI	R24,3
     CF3 E090      LDI	R25,0
     CF4 0186      MOVW	R16,R12
     CF5 5F0E      SUBI	R16,0xFE
     CF6 4F1F      SBCI	R17,0xFF
     CF7 932F      PUSH	R18
     CF8 933F      PUSH	R19
     CF9 019C      MOVW	R18,R24
     CFA 940E 1DBB CALL	mod16s
     CFC 01F8      MOVW	R30,R16
     CFD 913F      POP	R19
     CFE 912F      POP	R18
     CFF 01CE      MOVW	R24,R28
     D00 9640      ADIW	R24,0x10
     D01 0FE8      ADD	R30,R24
     D02 1FF9      ADC	R31,R25
     D03 8100      LDD	R16,Z+0
     D04 940E 151C CALL	_angle
(0848) 				angle(leg_order[(i % 3) + 3], MOTOR_B, lift);
     D06 A009      LDD	R0,Y+33
     D07 8208      STD	Y+0,R0
     D08 E422      LDI	R18,0x42
     D09 E083      LDI	R24,3
     D0A E090      LDI	R25,0
     D0B 932F      PUSH	R18
     D0C 933F      PUSH	R19
     D0D 019C      MOVW	R18,R24
     D0E 0186      MOVW	R16,R12
     D0F 940E 1DBB CALL	mod16s
     D11 01F8      MOVW	R30,R16
     D12 913F      POP	R19
     D13 912F      POP	R18
     D14 01CE      MOVW	R24,R28
     D15 9640      ADIW	R24,0x10
     D16 0FE8      ADD	R30,R24
     D17 1FF9      ADC	R31,R25
     D18 8100      LDD	R16,Z+0
     D19 940E 151C CALL	_angle
(0849) 			
(0850) 				delay(delay_time2);
     D1B A10A      LDD	R16,Y+34
     D1C A11B      LDD	R17,Y+35
     D1D 940E 14C9 CALL	_delay
(0851) 						
(0852) 				//moving body on leg i and move leg i+1 in air
(0853) 				leg_current[(i+1) % 3] = 90 + leg_distance[(i+1) % 3];
     D1F E023      LDI	R18,3
     D20 E030      LDI	R19,0
     D21 0186      MOVW	R16,R12
     D22 5F0F      SUBI	R16,0xFF
     D23 4F1F      SBCI	R17,0xFF
     D24 940E 1DBB CALL	mod16s
     D26 0118      MOVW	R2,R16
     D27 0C22      LSL	R2
     D28 1C33      ROL	R3
     D29 01CE      MOVW	R24,R28
     D2A 9643      ADIW	R24,0x13
     D2B 01F1      MOVW	R30,R2
     D2C 0FE8      ADD	R30,R24
     D2D 1FF9      ADC	R31,R25
     D2E 8180      LDD	R24,Z+0
     D2F 8191      LDD	R25,Z+1
     D30 5A86      SUBI	R24,0xA6
     D31 4F9F      SBCI	R25,0xFF
     D32 01FE      MOVW	R30,R28
     D33 9631      ADIW	R30,1
     D34 01D1      MOVW	R26,R2
     D35 0FAE      ADD	R26,R30
     D36 1FBF      ADC	R27,R31
     D37 938D      ST	R24,X+
     D38 939C      ST	R25,1(X)
(0854) 				angle(leg_order[(i+1) % 3], MOTOR_A, leg_current[(i+1) % 3]);
     D39 E023      LDI	R18,3
     D3A E030      LDI	R19,0
     D3B 0186      MOVW	R16,R12
     D3C 5F0F      SUBI	R16,0xFF
     D3D 4F1F      SBCI	R17,0xFF
     D3E 940E 1DBB CALL	mod16s
     D40 01CE      MOVW	R24,R28
     D41 9601      ADIW	R24,1
     D42 01F8      MOVW	R30,R16
     D43 0FEE      LSL	R30
     D44 1FFF      ROL	R31
     D45 0FE8      ADD	R30,R24
     D46 1FF9      ADC	R31,R25
     D47 8020      LDD	R2,Z+0
     D48 8031      LDD	R3,Z+1
     D49 8228      STD	Y+0,R2
     D4A E421      LDI	R18,0x41
     D4B 01CE      MOVW	R24,R28
     D4C 960D      ADIW	R24,0xD
     D4D 01F8      MOVW	R30,R16
     D4E 0FE8      ADD	R30,R24
     D4F 1FF9      ADC	R31,R25
     D50 8100      LDD	R16,Z+0
     D51 940E 151C CALL	_angle
(0855) 				for (j = 1; j <= 2; j++)
     D53 E081      LDI	R24,1
     D54 E090      LDI	R25,0
     D55 017C      MOVW	R14,R24
(0856) 				{
(0857) 					k =  (i + 1 + j) % 3;
     D56 0186      MOVW	R16,R12
     D57 5F0F      SUBI	R16,0xFF
     D58 4F1F      SBCI	R17,0xFF
     D59 0D0E      ADD	R16,R14
     D5A 1D1F      ADC	R17,R15
     D5B E023      LDI	R18,3
     D5C E030      LDI	R19,0
     D5D 940E 1DBB CALL	mod16s
     D5F 01B8      MOVW	R22,R16
(0858) 					leg_current[k] = leg_current[k] - leg_distance[k];
     D60 01AB      MOVW	R20,R22
     D61 0F44      LSL	R20
     D62 1F55      ROL	R21
     D63 01CE      MOVW	R24,R28
     D64 9601      ADIW	R24,1
     D65 015A      MOVW	R10,R20
     D66 0EA8      ADD	R10,R24
     D67 1EB9      ADC	R11,R25
     D68 01CE      MOVW	R24,R28
     D69 9643      ADIW	R24,0x13
     D6A 01FA      MOVW	R30,R20
     D6B 0FE8      ADD	R30,R24
     D6C 1FF9      ADC	R31,R25
     D6D 8020      LDD	R2,Z+0
     D6E 8031      LDD	R3,Z+1
     D6F 01F5      MOVW	R30,R10
     D70 8040      LDD	R4,Z+0
     D71 8051      LDD	R5,Z+1
     D72 1842      SUB	R4,R2
     D73 0853      SBC	R5,R3
     D74 8251      STD	Z+1,R5
     D75 8240      STD	Z+0,R4
(0859) 					angle(leg_order[k], MOTOR_A, leg_current[k]);
     D76 01CE      MOVW	R24,R28
     D77 9601      ADIW	R24,1
     D78 01FB      MOVW	R30,R22
     D79 0FEE      LSL	R30
     D7A 1FFF      ROL	R31
     D7B 0FE8      ADD	R30,R24
     D7C 1FF9      ADC	R31,R25
     D7D 8020      LDD	R2,Z+0
     D7E 8031      LDD	R3,Z+1
     D7F 8228      STD	Y+0,R2
     D80 E421      LDI	R18,0x41
     D81 01CE      MOVW	R24,R28
     D82 960D      ADIW	R24,0xD
     D83 01FB      MOVW	R30,R22
     D84 0FE8      ADD	R30,R24
     D85 1FF9      ADC	R31,R25
     D86 8100      LDD	R16,Z+0
     D87 940E 151C CALL	_angle
     D89 01C7      MOVW	R24,R14
     D8A 9601      ADIW	R24,1
     D8B 017C      MOVW	R14,R24
     D8C E082      LDI	R24,2
     D8D E090      LDI	R25,0
     D8E 158E      CP	R24,R14
     D8F 059F      CPC	R25,R15
     D90 F00C      BLT	0x0D92
     D91 CFC4      RJMP	0x0D56
(0860) 				}
(0861) 
(0862) 				delay(delay_time1);
     D92 8D0F      LDD	R16,Y+31
     D93 A118      LDD	R17,Y+32
     D94 940E 14C9 CALL	_delay
(0863) 				
(0864) 				leg_current[(i % 3) + 3] = 90 + leg_distance[(i % 3) + 3];
     D96 E023      LDI	R18,3
     D97 E030      LDI	R19,0
     D98 0186      MOVW	R16,R12
     D99 940E 1DBB CALL	mod16s
     D9B 01C8      MOVW	R24,R16
     D9C 9603      ADIW	R24,3
     D9D 015C      MOVW	R10,R24
     D9E 0CAA      LSL	R10
     D9F 1CBB      ROL	R11
     DA0 01CE      MOVW	R24,R28
     DA1 9643      ADIW	R24,0x13
     DA2 01F5      MOVW	R30,R10
     DA3 0FE8      ADD	R30,R24
     DA4 1FF9      ADC	R31,R25
     DA5 8180      LDD	R24,Z+0
     DA6 8191      LDD	R25,Z+1
     DA7 5A86      SUBI	R24,0xA6
     DA8 4F9F      SBCI	R25,0xFF
     DA9 01FE      MOVW	R30,R28
     DAA 9631      ADIW	R30,1
     DAB 01D5      MOVW	R26,R10
     DAC 0FAE      ADD	R26,R30
     DAD 1FBF      ADC	R27,R31
     DAE 938D      ST	R24,X+
     DAF 939C      ST	R25,1(X)
(0865) 				angle(leg_order[(i % 3) + 3], MOTOR_A, leg_current[(i % 3) + 3]);
     DB0 E023      LDI	R18,3
     DB1 E030      LDI	R19,0
     DB2 0186      MOVW	R16,R12
     DB3 940E 1DBB CALL	mod16s
     DB5 01A8      MOVW	R20,R16
     DB6 01CE      MOVW	R24,R28
     DB7 9601      ADIW	R24,1
     DB8 01FA      MOVW	R30,R20
     DB9 9633      ADIW	R30,3
     DBA 0FEE      LSL	R30
     DBB 1FFF      ROL	R31
     DBC 0FE8      ADD	R30,R24
     DBD 1FF9      ADC	R31,R25
     DBE 8020      LDD	R2,Z+0
     DBF 8031      LDD	R3,Z+1
     DC0 8228      STD	Y+0,R2
     DC1 E421      LDI	R18,0x41
     DC2 01CE      MOVW	R24,R28
     DC3 9640      ADIW	R24,0x10
     DC4 01FA      MOVW	R30,R20
     DC5 0FE8      ADD	R30,R24
     DC6 1FF9      ADC	R31,R25
     DC7 8100      LDD	R16,Z+0
     DC8 940E 151C CALL	_angle
(0866) 				for (j = 1; j <= 2 ; j++)
     DCA E081      LDI	R24,1
     DCB E090      LDI	R25,0
     DCC 017C      MOVW	R14,R24
(0867) 				{
(0868) 					k =  ((i + j) % 3) + 3;
     DCD 0186      MOVW	R16,R12
     DCE 0D0E      ADD	R16,R14
     DCF 1D1F      ADC	R17,R15
     DD0 E023      LDI	R18,3
     DD1 E030      LDI	R19,0
     DD2 940E 1DBB CALL	mod16s
     DD4 01B8      MOVW	R22,R16
     DD5 5F6D      SUBI	R22,0xFD
     DD6 4F7F      SBCI	R23,0xFF
(0869) 					leg_current[k] = leg_current[k] - leg_distance[k];
     DD7 015B      MOVW	R10,R22
     DD8 0CAA      LSL	R10
     DD9 1CBB      ROL	R11
     DDA 01CE      MOVW	R24,R28
     DDB 9601      ADIW	R24,1
     DDC 01A5      MOVW	R20,R10
     DDD 0F48      ADD	R20,R24
     DDE 1F59      ADC	R21,R25
     DDF 01CE      MOVW	R24,R28
     DE0 9643      ADIW	R24,0x13
     DE1 01F5      MOVW	R30,R10
     DE2 0FE8      ADD	R30,R24
     DE3 1FF9      ADC	R31,R25
     DE4 8020      LDD	R2,Z+0
     DE5 8031      LDD	R3,Z+1
     DE6 01FA      MOVW	R30,R20
     DE7 8040      LDD	R4,Z+0
     DE8 8051      LDD	R5,Z+1
     DE9 1842      SUB	R4,R2
     DEA 0853      SBC	R5,R3
     DEB 8251      STD	Z+1,R5
     DEC 8240      STD	Z+0,R4
(0870) 					angle(leg_order[k], MOTOR_A, leg_current[k]);
     DED 01CE      MOVW	R24,R28
     DEE 9601      ADIW	R24,1
     DEF 01FB      MOVW	R30,R22
     DF0 0FEE      LSL	R30
     DF1 1FFF      ROL	R31
     DF2 0FE8      ADD	R30,R24
     DF3 1FF9      ADC	R31,R25
     DF4 8020      LDD	R2,Z+0
     DF5 8031      LDD	R3,Z+1
     DF6 8228      STD	Y+0,R2
     DF7 E421      LDI	R18,0x41
     DF8 01CE      MOVW	R24,R28
     DF9 960D      ADIW	R24,0xD
     DFA 01FB      MOVW	R30,R22
     DFB 0FE8      ADD	R30,R24
     DFC 1FF9      ADC	R31,R25
     DFD 8100      LDD	R16,Z+0
     DFE 940E 151C CALL	_angle
     E00 01C7      MOVW	R24,R14
     E01 9601      ADIW	R24,1
     E02 017C      MOVW	R14,R24
     E03 E082      LDI	R24,2
     E04 E090      LDI	R25,0
     E05 158E      CP	R24,R14
     E06 059F      CPC	R25,R15
     E07 F00C      BLT	0x0E09
     E08 CFC4      RJMP	0x0DCD
(0871) 				}
(0872) 				
(0873) 				delay(delay_time2);
     E09 A10A      LDD	R16,Y+34
     E0A A11B      LDD	R17,Y+35
     E0B 940E 14C9 CALL	_delay
     E0D 01C6      MOVW	R24,R12
     E0E 9601      ADIW	R24,1
     E0F 016C      MOVW	R12,R24
     E10 3083      CPI	R24,3
     E11 E0E0      LDI	R30,0
     E12 079E      CPC	R25,R30
     E13 F40C      BGE	0x0E15
     E14 CEB4      RJMP	0x0CC9
(0874) 			}
(0875) 			
(0876) 			angle(leg_order[(i + 1) % 3], MOTOR_B, 90);			
     E15 E58A      LDI	R24,0x5A
     E16 8388      STD	Y+0,R24
     E17 E422      LDI	R18,0x42
     E18 E083      LDI	R24,3
     E19 E090      LDI	R25,0
     E1A 0186      MOVW	R16,R12
     E1B 5F0F      SUBI	R16,0xFF
     E1C 4F1F      SBCI	R17,0xFF
     E1D 932F      PUSH	R18
     E1E 933F      PUSH	R19
     E1F 019C      MOVW	R18,R24
     E20 940E 1DBB CALL	mod16s
     E22 01F8      MOVW	R30,R16
     E23 913F      POP	R19
     E24 912F      POP	R18
     E25 01CE      MOVW	R24,R28
     E26 960D      ADIW	R24,0xD
     E27 0FE8      ADD	R30,R24
     E28 1FF9      ADC	R31,R25
     E29 8100      LDD	R16,Z+0
     E2A 940E 151C CALL	_angle
(0877) 			angle(leg_order[(i % 3) + 3], MOTOR_B, 90);			
     E2C E58A      LDI	R24,0x5A
     E2D 8388      STD	Y+0,R24
     E2E E422      LDI	R18,0x42
     E2F E083      LDI	R24,3
     E30 E090      LDI	R25,0
     E31 932F      PUSH	R18
     E32 933F      PUSH	R19
     E33 019C      MOVW	R18,R24
     E34 0186      MOVW	R16,R12
     E35 940E 1DBB CALL	mod16s
     E37 01F8      MOVW	R30,R16
     E38 913F      POP	R19
     E39 912F      POP	R18
     E3A 01CE      MOVW	R24,R28
     E3B 9640      ADIW	R24,0x10
     E3C 0FE8      ADD	R30,R24
     E3D 1FF9      ADC	R31,R25
     E3E 8100      LDD	R16,Z+0
     E3F 940E 151C CALL	_angle
(0878) 			delay(delay_time1);
     E41 8D0F      LDD	R16,Y+31
     E42 A118      LDD	R17,Y+32
     E43 940E 14C9 CALL	_delay
     E45 A8CA      LDD	R12,Y+50
     E46 A8DB      LDD	R13,Y+51
     E47 01C6      MOVW	R24,R12
     E48 9701      SBIW	R24,1
     E49 AB9B      STD	Y+51,R25
     E4A AB8A      STD	Y+50,R24
     E4B 2422      CLR	R2
     E4C 2433      CLR	R3
     E4D 142C      CP	R2,R12
     E4E 043D      CPC	R3,R13
     E4F F40C      BGE	0x0E51
     E50 CE76      RJMP	0x0CC7
     E51 96A6      ADIW	R28,0x26
     E52 940E 1E3A CALL	pop_xgsetF0FC
     E54 9624      ADIW	R28,4
     E55 9508      RET
FILE: C:\Users\ERTSLA~1\Downloads\BUILDI~2\hexapod.c
(0001) //ICC-AVR application builder : 11/4/2009 1:05:10 PM
(0002) // Target : M2560
(0003) // Crystal: 11.059Mhz
(0004) 
(0005) /*
(0006)  Pin name	Port		Anding (make 0)		Oring (make 1)
(0007)  SP LEFT	PL1		1111 1101	0xFD		0000 0010	0x02
(0008) 
(0009)  1A		PD5		1101 1111	0xDF		0010 0000	0x20
(0010)  1B		PL2		1111 1011	0xFB		0000 0100	0x04
(0011)  1C		PG1		1111 1101	0xFD		0000 0010	0x02
(0012)  2A		PL6		1011 1111	0xBF		0100 0000	0x40
(0013)  2B		PD4		1110 1111	0xEF		0001 0000	0x10
(0014)  2C		PL7		0111 1111	0x7F		1000 0000	0x80
(0015)  3A		PH6		1011 1111	0xBF		0100 0000	0x40
(0016)  3B		PH4		1110 1111	0xEF		0001 0000	0x10
(0017)  3C		PH5		1101 1111	0xDF		0010 0000	0x20
(0018)  SP RIGHT	PJ7		0111 1111	0x7F		1000 0000	0x80
(0019)  4A		PG0		1111 1110	0xFE		0000 0001	0x01
(0020)  4B		PD7		0111 1111	0x7F		1000 0000	0x80
(0021)  4C		PD6		1011 1111	0xBF		0100 0000	0x40
(0022)  5A		PJ5		1101 1111	0xDF		0010 0000	0x20
(0023)  5B		PJ6		1011 1111	0xBF		0100 0000	0x40
(0024)  5C		PJ4		1110 1111	0xEF		0001 0000	0x10
(0025)  6A		PJ3		1111 0111	0XF7		0000 1000	0x08
(0026)  6B		PJ1		1111 1101	0xFD		0000 0010	0x02
(0027)  6C		PJ2		1111 1011	0xFB		0000 0100	0x04
(0028) 
(0029)  Remote control communication protocoal
(0030)  transmitted command		received data
(0031)  1						right joystick x axis 8 bit analog position;	center:0x24; left: 0x3B; right: 0x04
(0032)  2						right joystick y axis 8 bit analog position;	center:0x24; up: 0x3B; down: 0x04
(0033)  3						left joystick x axis 8 bit analog position;		center:0x3A; left: 0x23; right: 0x04
(0034)  4						left joystick y axis 8 bit analog position;		center:0x1F; up: 0x34; down: 0x04
(0035)  5						right joystick button
(0036)  6						left joystick button
(0037)  7						digital switches left 1,2 and right 1,2
(0038)  bit7: Right 2; bit6: right 1; bit4: left 1; bit3: left 2
(0039) 
(0040)  Received data will be stored in the array unsigned char remote_data [8]; from the location 1 to 7 in the same order as the command.
(0041)  */
(0042)  
(0043)  
(0044)  /*********************************************************************************
(0045) 
(0046)    Copyright (c) 2010, ERTS Lab IIT Bombay erts@cse.iitb.ac.in               -*- c -*-
(0047)    All rights reserved.
(0048) 
(0049)    Redistribution and use in source and binary forms, with or without
(0050)    modification, are permitted provided that the following conditions are met:
(0051) 
(0052)    * Redistributions of source code must retain the above copyright
(0053)      notice, this list of conditions and the following disclaimer.
(0054) 
(0055)    * Redistributions in binary form must reproduce the above copyright
(0056)      notice, this list of conditions and the following disclaimer in
(0057)      the documentation and/or other materials provided with the
(0058)      distribution.
(0059) 
(0060)    * Neither the name of the copyright holders nor the names of
(0061)      contributors may be used to endorse or promote products derived
(0062)      from this software without specific prior written permission.
(0063) 
(0064)    * Source code can be used for academic purpose. 
(0065) 	 For commercial use permission form the author needs to be taken.
(0066) 
(0067)   THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
(0068)   AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
(0069)   IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
(0070)   ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
(0071)   LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
(0072)   CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
(0073)   SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
(0074)   INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
(0075)   CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
(0076)   ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
(0077)   POSSIBILITY OF SUCH DAMAGE. 
(0078) 
(0079)   Software released under Creative Commence cc by-nc-sa licence.
(0080)   For legal information refer to: 
(0081)   http://creativecommons.org/licenses/by-nc-sa/3.0/legalcode
(0082) 
(0083) ********************************************************************************/
(0084) 
(0085) 
(0086) #include <iom2560v.h>
(0087) #include <macros.h>
(0088) #include "hexapod_macro.h"
(0089) #include "keyboard.h"
(0090) 
(0091) unsigned char ADC_Value;
(0092) 
(0093) unsigned char arm_number = 0;
(0094) unsigned char angle_upper_byte = 0;
(0095) unsigned char angle_lower_byte = 0;
(0096) unsigned char degree = 0;
(0097) unsigned char angle_upper_byte_1A, angle_lower_byte_1A, angle_upper_byte_1B, angle_lower_byte_1B, angle_upper_byte_1C, angle_lower_byte_1C;
(0098) unsigned char angle_upper_byte_2A, angle_lower_byte_2A, angle_upper_byte_2B, angle_lower_byte_2B, angle_upper_byte_2C, angle_lower_byte_2C;
(0099) unsigned char angle_upper_byte_3A, angle_lower_byte_3A, angle_upper_byte_3B, angle_lower_byte_3B, angle_upper_byte_3C, angle_lower_byte_3C;
(0100) unsigned char angle_upper_byte_4A, angle_lower_byte_4A, angle_upper_byte_4B, angle_lower_byte_4B, angle_upper_byte_4C, angle_lower_byte_4C;
(0101) unsigned char angle_upper_byte_5A, angle_lower_byte_5A, angle_upper_byte_5B, angle_lower_byte_5B, angle_upper_byte_5C, angle_lower_byte_5C;
(0102) unsigned char angle_upper_byte_6A, angle_lower_byte_6A, angle_upper_byte_6B, angle_lower_byte_6B, angle_upper_byte_6C, angle_lower_byte_6C;
(0103) unsigned int delay_count = 0;
(0104) //variables relatd to the serial commuication or remote control
(0105) unsigned int serial_communication_interval = 0;
(0106) unsigned char serial_communication_channel_number = 0;
(0107) unsigned char remote_data[8]; //see remote channel allocation in the notes above
(0108) unsigned char motion_busy = 0; //sets to one if any of the motion function is called.
(0109) 
(0110) unsigned char data;
(0111) 
(0112) void delay(int time);
(0113) void swap(unsigned char *a, unsigned char *b);
(0114) void buzzer_on(void);
(0115) void buzzer_off(void);
(0116) 
(0117) /**
(0118) Port Initialization
(0119) */
(0120) void port_init(void) {
(0121) 	PORTA = 0x00;
_port_init:
     E56 2422      CLR	R2
     E57 B822      OUT	0x02,R2
(0122) 	DDRA = 0xFF;
     E58 EF8F      LDI	R24,0xFF
     E59 B981      OUT	0x01,R24
(0123) 	PORTB = 0x00;
     E5A B825      OUT	0x05,R2
(0124) 	DDRB = 0x01;
     E5B E081      LDI	R24,1
     E5C B984      OUT	0x04,R24
(0125) 	PORTC = 0x00; //m103 output only
     E5D B828      OUT	0x08,R2
(0126) 	DDRC = 0xFF;
     E5E EF8F      LDI	R24,0xFF
     E5F B987      OUT	0x07,R24
(0127) 	PORTD = 0x00;
     E60 B82B      OUT	0x0B,R2
(0128) 	DDRD = 0xF0;
     E61 EF80      LDI	R24,0xF0
     E62 B98A      OUT	0x0A,R24
(0129) 	PORTE = 0x00;
     E63 B82E      OUT	0x0E,R2
(0130) 	DDRE = 0x00;
     E64 B82D      OUT	0x0D,R2
(0131) 	PORTF = 0x00;
     E65 BA21      OUT	0x11,R2
(0132) 	DDRF = 0x00;
     E66 BA20      OUT	0x10,R2
(0133) 	PORTG = 0x00;
     E67 BA24      OUT	0x14,R2
(0134) 	DDRG = 0x03;
     E68 E083      LDI	R24,3
     E69 BB83      OUT	0x13,R24
(0135) 	PORTH = 0x00;
     E6A 9220 0102 STS	0x0102,R2
(0136) 	DDRH = 0x70;
     E6C E780      LDI	R24,0x70
     E6D 9380 0101 STS	0x0101,R24
(0137) 	PORTJ = 0x00;
     E6F 9220 0105 STS	0x0105,R2
(0138) 	DDRJ = 0xFE; //0xFE original
     E71 EF8E      LDI	R24,0xFE
     E72 9380 0104 STS	0x0104,R24
(0139) 	PORTK = 0x00;
     E74 9220 0108 STS	0x0108,R2
(0140) 	DDRK = 0x00;
     E76 9220 0107 STS	0x0107,R2
(0141) 	PORTL = 0x00;
     E78 9220 010B STS	0x010B,R2
(0142) 	DDRL = 0xC7;
     E7A EC87      LDI	R24,0xC7
     E7B 9380 010A STS	0x010A,R24
     E7D 9508      RET
(0143) }
(0144) 
(0145) //TIMER1 initialize - prescale:1
(0146) // WGM: 0) Normal, TOP=0xFFFF
(0147) // desired value: 400Hz
(0148) // actual value: 400.007Hz (0.0%)
(0149) void timer1_init(void) {
(0150) 	TCCR1B = 0x00; //stop
_timer1_init:
     E7E 2422      CLR	R2
     E7F 9220 0081 STS	0x0081,R2
(0151) 	TCNT1H = 0x94; //setup
     E81 E984      LDI	R24,0x94
     E82 9380 0085 STS	0x0085,R24
(0152) 	TCNT1L = 0x01;
     E84 E081      LDI	R24,1
     E85 9380 0084 STS	0x0084,R24
(0153) 	OCR1AH = 0x6B;
     E87 E68B      LDI	R24,0x6B
     E88 9380 0089 STS	0x0089,R24
(0154) 	OCR1AL = 0xFF;
     E8A EF8F      LDI	R24,0xFF
     E8B 9380 0088 STS	0x0088,R24
(0155) 	OCR1BH = 0x6B;
     E8D E68B      LDI	R24,0x6B
     E8E 9380 008B STS	0x008B,R24
(0156) 	OCR1BL = 0xFF;
     E90 EF8F      LDI	R24,0xFF
     E91 9380 008A STS	0x008A,R24
(0157) 	OCR1CH = 0x00;
     E93 9220 008D STS	0x008D,R2
(0158) 	OCR1CL = 0x00;
     E95 9220 008C STS	0x008C,R2
(0159) 	ICR1H = 0x6B;
     E97 E68B      LDI	R24,0x6B
     E98 9380 0087 STS	0x0087,R24
(0160) 	ICR1L = 0xFF;
     E9A EF8F      LDI	R24,0xFF
     E9B 9380 0086 STS	0x0086,R24
(0161) 	TCCR1A = 0x00;
     E9D 9220 0080 STS	0x0080,R2
(0162) 	TCCR1C = 0x00;
     E9F 9220 0082 STS	0x0082,R2
(0163) 	TCCR1B = 0x01; //start Timer
     EA1 E081      LDI	R24,1
     EA2 9380 0081 STS	0x0081,R24
     EA4 9508      RET
(0164) }
(0165) 
(0166) 
(0167) void turn_on_sharp15 (void) //turn on Sharp IR range sensors 1,5
(0168) {
(0169)   PORTH = PORTH & 0xFB;
_turn_on_sharp15:
     EA5 9180 0102 LDS	R24,0x0102
     EA7 7F8B      ANDI	R24,0xFB
     EA8 9380 0102 STS	0x0102,R24
     EAA 9508      RET
(0170) }
(0171) 
(0172) void turn_off_sharp15 (void) //turn off Sharp IR range sensors 1,5
(0173) {
(0174)  PORTH = PORTH | 0x04;
_turn_off_sharp15:
     EAB 9180 0102 LDS	R24,0x0102
     EAD 6084      ORI	R24,4
     EAE 9380 0102 STS	0x0102,R24
     EB0 9508      RET
(0175) }
(0176) 
(0177) void reset_1A(void) {
(0178) 	PORTD = PORTD & 0xDF;
_reset_1A:
     EB1 B18B      IN	R24,0x0B
     EB2 7D8F      ANDI	R24,0xDF
     EB3 B98B      OUT	0x0B,R24
     EB4 9508      RET
(0179) }
(0180) 
(0181) void set_1A(void) {
(0182) 	PORTD = PORTD | 0x20;
_set_1A:
     EB5 9A5D      SBI	0x0B,5
     EB6 9508      RET
(0183) }
(0184) 
(0185) void reset_1B(void) {
(0186) 	PORTL = PORTL & 0xFB;
_reset_1B:
     EB7 9180 010B LDS	R24,0x010B
     EB9 7F8B      ANDI	R24,0xFB
     EBA 9380 010B STS	0x010B,R24
     EBC 9508      RET
(0187) }
(0188) 
(0189) void set_1B(void) {
(0190) 	PORTL = PORTL | 0x04;
_set_1B:
     EBD 9180 010B LDS	R24,0x010B
     EBF 6084      ORI	R24,4
     EC0 9380 010B STS	0x010B,R24
     EC2 9508      RET
(0191) }
(0192) 
(0193) void reset_1C(void) {
(0194) 	PORTG = PORTG & 0xFD;
_reset_1C:
     EC3 B384      IN	R24,0x14
     EC4 7F8D      ANDI	R24,0xFD
     EC5 BB84      OUT	0x14,R24
     EC6 9508      RET
(0195) }
(0196) 
(0197) void set_1C(void) {
(0198) 	PORTG = PORTG | 0x02;
_set_1C:
     EC7 9AA1      SBI	0x14,1
     EC8 9508      RET
(0199) }
(0200) 
(0201) void reset_2A(void) {
(0202) 	PORTL = PORTL & 0xBF;
_reset_2A:
     EC9 9180 010B LDS	R24,0x010B
     ECB 7B8F      ANDI	R24,0xBF
     ECC 9380 010B STS	0x010B,R24
     ECE 9508      RET
(0203) }
(0204) 
(0205) void set_2A(void) {
(0206) 	PORTL = PORTL | 0x40;
_set_2A:
     ECF 9180 010B LDS	R24,0x010B
     ED1 6480      ORI	R24,0x40
     ED2 9380 010B STS	0x010B,R24
     ED4 9508      RET
(0207) }
(0208) 
(0209) void reset_2B(void) {
(0210) 	PORTD = PORTD & 0xEF;
_reset_2B:
     ED5 B18B      IN	R24,0x0B
     ED6 7E8F      ANDI	R24,0xEF
     ED7 B98B      OUT	0x0B,R24
     ED8 9508      RET
(0211) }
(0212) 
(0213) void set_2B(void) {
(0214) 	PORTD = PORTD | 0x10;
_set_2B:
     ED9 9A5C      SBI	0x0B,4
     EDA 9508      RET
(0215) }
(0216) 
(0217) void reset_2C(void) {
(0218) 	PORTL = PORTL & 0x7F;
_reset_2C:
     EDB 9180 010B LDS	R24,0x010B
     EDD 778F      ANDI	R24,0x7F
     EDE 9380 010B STS	0x010B,R24
     EE0 9508      RET
(0219) }
(0220) 
(0221) void set_2C(void) {
(0222) 	PORTL = PORTL | 0x80;
_set_2C:
     EE1 9180 010B LDS	R24,0x010B
     EE3 6880      ORI	R24,0x80
     EE4 9380 010B STS	0x010B,R24
     EE6 9508      RET
(0223) }
(0224) 
(0225) void reset_3A(void) {
(0226) 	PORTH = PORTH & 0xBF;
_reset_3A:
     EE7 9180 0102 LDS	R24,0x0102
     EE9 7B8F      ANDI	R24,0xBF
     EEA 9380 0102 STS	0x0102,R24
     EEC 9508      RET
(0227) }
(0228) 
(0229) void set_3A(void) {
(0230) 	PORTH = PORTH | 0x40;
_set_3A:
     EED 9180 0102 LDS	R24,0x0102
     EEF 6480      ORI	R24,0x40
     EF0 9380 0102 STS	0x0102,R24
     EF2 9508      RET
(0231) }
(0232) 
(0233) void reset_3B(void) {
(0234) 	PORTH = PORTH & 0xEF;
_reset_3B:
     EF3 9180 0102 LDS	R24,0x0102
     EF5 7E8F      ANDI	R24,0xEF
     EF6 9380 0102 STS	0x0102,R24
     EF8 9508      RET
(0235) }
(0236) 
(0237) void set_3B(void) {
(0238) 	PORTH = PORTH | 0x10;
_set_3B:
     EF9 9180 0102 LDS	R24,0x0102
     EFB 6180      ORI	R24,0x10
     EFC 9380 0102 STS	0x0102,R24
     EFE 9508      RET
(0239) }
(0240) 
(0241) void reset_3C(void) {
(0242) 	PORTH = PORTH & 0xDF;
_reset_3C:
     EFF 9180 0102 LDS	R24,0x0102
     F01 7D8F      ANDI	R24,0xDF
     F02 9380 0102 STS	0x0102,R24
     F04 9508      RET
(0243) }
(0244) 
(0245) void set_3C(void) {
(0246) 	PORTH = PORTH | 0x20;
_set_3C:
     F05 9180 0102 LDS	R24,0x0102
     F07 6280      ORI	R24,0x20
     F08 9380 0102 STS	0x0102,R24
     F0A 9508      RET
(0247) }
(0248) 
(0249) void reset_SP_RIGHT(void) {
(0250) 	PORTJ = PORTJ & 0x7F;
_reset_SP_RIGHT:
     F0B 9180 0105 LDS	R24,0x0105
     F0D 778F      ANDI	R24,0x7F
     F0E 9380 0105 STS	0x0105,R24
     F10 9508      RET
(0251) }
(0252) 
(0253) void set_SP_RIGHT(void) {
(0254) 	PORTJ = PORTJ | 0x80;
_set_SP_RIGHT:
     F11 9180 0105 LDS	R24,0x0105
     F13 6880      ORI	R24,0x80
     F14 9380 0105 STS	0x0105,R24
     F16 9508      RET
(0255) }
(0256) 
(0257) void reset_4A(void) {
(0258) 	PORTG = PORTG & 0xFE;
_reset_4A:
     F17 B384      IN	R24,0x14
     F18 7F8E      ANDI	R24,0xFE
     F19 BB84      OUT	0x14,R24
     F1A 9508      RET
(0259) }
(0260) 
(0261) void set_4A(void) {
(0262) 	PORTG = PORTG | 0x01;
_set_4A:
     F1B 9AA0      SBI	0x14,0
     F1C 9508      RET
(0263) }
(0264) 
(0265) void reset_4B(void) {
(0266) 	PORTD = PORTD & 0x7F;
_reset_4B:
     F1D B18B      IN	R24,0x0B
     F1E 778F      ANDI	R24,0x7F
     F1F B98B      OUT	0x0B,R24
     F20 9508      RET
(0267) }
(0268) 
(0269) void set_4B(void) {
(0270) 	PORTD = PORTD | 0x80;
_set_4B:
     F21 9A5F      SBI	0x0B,7
     F22 9508      RET
(0271) }
(0272) 
(0273) void reset_4C(void) {
(0274) 	PORTD = PORTD & 0xBF;
_reset_4C:
     F23 B18B      IN	R24,0x0B
     F24 7B8F      ANDI	R24,0xBF
     F25 B98B      OUT	0x0B,R24
     F26 9508      RET
(0275) }
(0276) 
(0277) void set_4C(void) {
(0278) 	PORTD = PORTD | 0x40;
_set_4C:
     F27 9A5E      SBI	0x0B,6
     F28 9508      RET
(0279) }
(0280) 
(0281) void reset_5A(void) {
(0282) 	PORTJ = PORTJ & 0xDF;
_reset_5A:
     F29 9180 0105 LDS	R24,0x0105
     F2B 7D8F      ANDI	R24,0xDF
     F2C 9380 0105 STS	0x0105,R24
     F2E 9508      RET
(0283) }
(0284) 
(0285) void set_5A(void) {
(0286) 	PORTJ = PORTJ | 0x20;
_set_5A:
     F2F 9180 0105 LDS	R24,0x0105
     F31 6280      ORI	R24,0x20
     F32 9380 0105 STS	0x0105,R24
     F34 9508      RET
(0287) }
(0288) 
(0289) void reset_5B(void) {
(0290) 	PORTJ = PORTJ & 0xBF;
_reset_5B:
     F35 9180 0105 LDS	R24,0x0105
     F37 7B8F      ANDI	R24,0xBF
     F38 9380 0105 STS	0x0105,R24
     F3A 9508      RET
(0291) }
(0292) 
(0293) void set_5B(void) {
(0294) 	PORTJ = PORTJ | 0x40;
_set_5B:
     F3B 9180 0105 LDS	R24,0x0105
     F3D 6480      ORI	R24,0x40
     F3E 9380 0105 STS	0x0105,R24
     F40 9508      RET
(0295) }
(0296) 
(0297) void reset_5C(void) {
(0298) 	PORTJ = PORTJ & 0xEF;
_reset_5C:
     F41 9180 0105 LDS	R24,0x0105
     F43 7E8F      ANDI	R24,0xEF
     F44 9380 0105 STS	0x0105,R24
     F46 9508      RET
(0299) }
(0300) 
(0301) void set_5C(void) {
(0302) 	PORTJ = PORTJ | 0x10;
_set_5C:
     F47 9180 0105 LDS	R24,0x0105
     F49 6180      ORI	R24,0x10
     F4A 9380 0105 STS	0x0105,R24
     F4C 9508      RET
(0303) }
(0304) 
(0305) void reset_6A(void) {
(0306) 	PORTJ = PORTJ & 0xF7;
_reset_6A:
     F4D 9180 0105 LDS	R24,0x0105
     F4F 7F87      ANDI	R24,0xF7
     F50 9380 0105 STS	0x0105,R24
     F52 9508      RET
(0307) }
(0308) 
(0309) void set_6A(void) {
(0310) 	PORTJ = PORTJ | 0x08;
_set_6A:
     F53 9180 0105 LDS	R24,0x0105
     F55 6088      ORI	R24,0x8
     F56 9380 0105 STS	0x0105,R24
     F58 9508      RET
(0311) }
(0312) 
(0313) void reset_6B(void) {
(0314) 	PORTJ = PORTJ & 0xFD;
_reset_6B:
     F59 9180 0105 LDS	R24,0x0105
     F5B 7F8D      ANDI	R24,0xFD
     F5C 9380 0105 STS	0x0105,R24
     F5E 9508      RET
(0315) }
(0316) 
(0317) void set_6B(void) {
(0318) 	PORTJ = PORTJ | 0x02;
_set_6B:
     F5F 9180 0105 LDS	R24,0x0105
     F61 6082      ORI	R24,2
     F62 9380 0105 STS	0x0105,R24
     F64 9508      RET
(0319) }
(0320) 
(0321) void reset_6C(void) {
(0322) 	PORTJ = PORTJ & 0xFB;
_reset_6C:
     F65 9180 0105 LDS	R24,0x0105
     F67 7F8B      ANDI	R24,0xFB
     F68 9380 0105 STS	0x0105,R24
     F6A 9508      RET
(0323) }
(0324) 
(0325) void set_6C(void) {
(0326) 	PORTJ = PORTJ | 0x04;
_set_6C:
     F6B 9180 0105 LDS	R24,0x0105
     F6D 6084      ORI	R24,4
     F6E 9380 0105 STS	0x0105,R24
     F70 9508      RET
_timer1_compa_isr:
     F71 920A      ST	R0,-Y
     F72 921A      ST	R1,-Y
     F73 922A      ST	R2,-Y
     F74 923A      ST	R3,-Y
     F75 924A      ST	R4,-Y
     F76 925A      ST	R5,-Y
     F77 926A      ST	R6,-Y
     F78 927A      ST	R7,-Y
     F79 928A      ST	R8,-Y
     F7A 929A      ST	R9,-Y
     F7B 930A      ST	R16,-Y
     F7C 931A      ST	R17,-Y
     F7D 932A      ST	R18,-Y
     F7E 933A      ST	R19,-Y
     F7F 938A      ST	R24,-Y
     F80 939A      ST	R25,-Y
     F81 93AA      ST	R26,-Y
     F82 93BA      ST	R27,-Y
     F83 93EA      ST	R30,-Y
     F84 93FA      ST	R31,-Y
     F85 B60F      IN	R0,0x3F
     F86 920A      ST	R0,-Y
(0327) }
(0328) 
(0329) 
(0330) #pragma interrupt_handler timer1_compa_isr:iv_TIM1_COMPA
(0331) void timer1_compa_isr(void) {
(0332) 	//compare occured TCNT1=OCR1A
(0333) 	if (arm_number == 0) {
     F87 9020 0200 LDS	R2,arm_number
     F89 2022      TST	R2
     F8A F409      BNE	0x0F8C
(0334) 		reset_1A();
     F8B DF25      RCALL	_reset_1A
(0335) 	}
(0336) 	if (arm_number == 1) {
     F8C 9180 0200 LDS	R24,arm_number
     F8E 3081      CPI	R24,1
     F8F F409      BNE	0x0F91
(0337) 		reset_2A();
     F90 DF38      RCALL	_reset_2A
(0338) 	}
(0339) 	if (arm_number == 2) {
     F91 9180 0200 LDS	R24,arm_number
     F93 3082      CPI	R24,2
     F94 F409      BNE	0x0F96
(0340) 		reset_3A();
     F95 DF51      RCALL	_reset_3A
(0341) 	}
(0342) 	if (arm_number == 3) {
     F96 9180 0200 LDS	R24,arm_number
     F98 3083      CPI	R24,3
     F99 F409      BNE	0x0F9B
(0343) 		reset_4A();
     F9A DF7C      RCALL	_reset_4A
(0344) 	}
(0345) 	if (arm_number == 4) {
     F9B 9180 0200 LDS	R24,arm_number
     F9D 3084      CPI	R24,4
     F9E F409      BNE	0x0FA0
(0346) 		reset_5A();
     F9F DF89      RCALL	_reset_5A
(0347) 	}
(0348) 	if (arm_number == 5) {
     FA0 9180 0200 LDS	R24,arm_number
     FA2 3085      CPI	R24,5
     FA3 F409      BNE	0x0FA5
(0349) 		reset_6A();
     FA4 DFA8      RCALL	_reset_6A
(0350) 	}
     FA5 9009      LD	R0,Y+
     FA6 BE0F      OUT	0x3F,R0
     FA7 91F9      LD	R31,Y+
     FA8 91E9      LD	R30,Y+
     FA9 91B9      LD	R27,Y+
     FAA 91A9      LD	R26,Y+
     FAB 9199      LD	R25,Y+
     FAC 9189      LD	R24,Y+
     FAD 9139      LD	R19,Y+
     FAE 9129      LD	R18,Y+
     FAF 9119      LD	R17,Y+
     FB0 9109      LD	R16,Y+
     FB1 9099      LD	R9,Y+
     FB2 9089      LD	R8,Y+
     FB3 9079      LD	R7,Y+
     FB4 9069      LD	R6,Y+
     FB5 9059      LD	R5,Y+
     FB6 9049      LD	R4,Y+
     FB7 9039      LD	R3,Y+
     FB8 9029      LD	R2,Y+
     FB9 9019      LD	R1,Y+
     FBA 9009      LD	R0,Y+
     FBB 9518      RETI
_timer1_compb_isr:
     FBC 920A      ST	R0,-Y
     FBD 921A      ST	R1,-Y
     FBE 922A      ST	R2,-Y
     FBF 923A      ST	R3,-Y
     FC0 924A      ST	R4,-Y
     FC1 925A      ST	R5,-Y
     FC2 926A      ST	R6,-Y
     FC3 927A      ST	R7,-Y
     FC4 928A      ST	R8,-Y
     FC5 929A      ST	R9,-Y
     FC6 930A      ST	R16,-Y
     FC7 931A      ST	R17,-Y
     FC8 932A      ST	R18,-Y
     FC9 933A      ST	R19,-Y
     FCA 938A      ST	R24,-Y
     FCB 939A      ST	R25,-Y
     FCC 93AA      ST	R26,-Y
     FCD 93BA      ST	R27,-Y
     FCE 93EA      ST	R30,-Y
     FCF 93FA      ST	R31,-Y
     FD0 B60F      IN	R0,0x3F
     FD1 920A      ST	R0,-Y
(0351) }
(0352) 
(0353) #pragma interrupt_handler timer1_compb_isr:iv_TIM1_COMPB
(0354) void timer1_compb_isr(void) {
(0355) 	//compare occured TCNT1=OCR1B
(0356) 	if (arm_number == 0) {
     FD2 9020 0200 LDS	R2,arm_number
     FD4 2022      TST	R2
     FD5 F409      BNE	0x0FD7
(0357) 		reset_1B();
     FD6 DEE0      RCALL	_reset_1B
(0358) 	}
(0359) 	if (arm_number == 1) {
     FD7 9180 0200 LDS	R24,arm_number
     FD9 3081      CPI	R24,1
     FDA F409      BNE	0x0FDC
(0360) 		reset_2B();
     FDB DEF9      RCALL	_reset_2B
(0361) 	}
(0362) 	if (arm_number == 2) {
     FDC 9180 0200 LDS	R24,arm_number
     FDE 3082      CPI	R24,2
     FDF F409      BNE	0x0FE1
(0363) 		reset_3B();
     FE0 DF12      RCALL	_reset_3B
(0364) 	}
(0365) 	if (arm_number == 3) {
     FE1 9180 0200 LDS	R24,arm_number
     FE3 3083      CPI	R24,3
     FE4 F409      BNE	0x0FE6
(0366) 		reset_4B();
     FE5 DF37      RCALL	_reset_4B
(0367) 	}
(0368) 	if (arm_number == 4) {
     FE6 9180 0200 LDS	R24,arm_number
     FE8 3084      CPI	R24,4
     FE9 F409      BNE	0x0FEB
(0369) 		reset_5B();
     FEA DF4A      RCALL	_reset_5B
(0370) 	}
(0371) 	if (arm_number == 5) {
     FEB 9180 0200 LDS	R24,arm_number
     FED 3085      CPI	R24,5
     FEE F409      BNE	0x0FF0
(0372) 		reset_6B();
     FEF DF69      RCALL	_reset_6B
(0373) 	}
     FF0 9009      LD	R0,Y+
     FF1 BE0F      OUT	0x3F,R0
     FF2 91F9      LD	R31,Y+
     FF3 91E9      LD	R30,Y+
     FF4 91B9      LD	R27,Y+
     FF5 91A9      LD	R26,Y+
     FF6 9199      LD	R25,Y+
     FF7 9189      LD	R24,Y+
     FF8 9139      LD	R19,Y+
     FF9 9129      LD	R18,Y+
     FFA 9119      LD	R17,Y+
     FFB 9109      LD	R16,Y+
     FFC 9099      LD	R9,Y+
     FFD 9089      LD	R8,Y+
     FFE 9079      LD	R7,Y+
     FFF 9069      LD	R6,Y+
    1000 9059      LD	R5,Y+
    1001 9049      LD	R4,Y+
    1002 9039      LD	R3,Y+
    1003 9029      LD	R2,Y+
    1004 9019      LD	R1,Y+
    1005 9009      LD	R0,Y+
    1006 9518      RETI
_timer1_compc_isr:
    1007 920A      ST	R0,-Y
    1008 921A      ST	R1,-Y
    1009 922A      ST	R2,-Y
    100A 923A      ST	R3,-Y
    100B 924A      ST	R4,-Y
    100C 925A      ST	R5,-Y
    100D 926A      ST	R6,-Y
    100E 927A      ST	R7,-Y
    100F 928A      ST	R8,-Y
    1010 929A      ST	R9,-Y
    1011 930A      ST	R16,-Y
    1012 931A      ST	R17,-Y
    1013 932A      ST	R18,-Y
    1014 933A      ST	R19,-Y
    1015 938A      ST	R24,-Y
    1016 939A      ST	R25,-Y
    1017 93AA      ST	R26,-Y
    1018 93BA      ST	R27,-Y
    1019 93EA      ST	R30,-Y
    101A 93FA      ST	R31,-Y
    101B B60F      IN	R0,0x3F
    101C 920A      ST	R0,-Y
(0374) }
(0375) 
(0376) #pragma interrupt_handler timer1_compc_isr:iv_TIM1_COMPC
(0377) void timer1_compc_isr(void) {
(0378) 	//compare occured TCNT1=OCR1c
(0379) 	if (arm_number == 0) {
    101D 9020 0200 LDS	R2,arm_number
    101F 2022      TST	R2
    1020 F409      BNE	0x1022
(0380) 		reset_1C();
    1021 DEA1      RCALL	_reset_1C
(0381) 	}
(0382) 	if (arm_number == 1) {
    1022 9180 0200 LDS	R24,arm_number
    1024 3081      CPI	R24,1
    1025 F409      BNE	0x1027
(0383) 		reset_2C();
    1026 DEB4      RCALL	_reset_2C
(0384) 	}
(0385) 	if (arm_number == 2) {
    1027 9180 0200 LDS	R24,arm_number
    1029 3082      CPI	R24,2
    102A F409      BNE	0x102C
(0386) 		reset_3C();
    102B DED3      RCALL	_reset_3C
(0387) 	}
(0388) 	if (arm_number == 3) {
    102C 9180 0200 LDS	R24,arm_number
    102E 3083      CPI	R24,3
    102F F409      BNE	0x1031
(0389) 		reset_4C();
    1030 DEF2      RCALL	_reset_4C
(0390) 	}
(0391) 	if (arm_number == 4) {
    1031 9180 0200 LDS	R24,arm_number
    1033 3084      CPI	R24,4
    1034 F409      BNE	0x1036
(0392) 		reset_5C();
    1035 DF0B      RCALL	_reset_5C
(0393) 	}
(0394) 	if (arm_number == 5) {
    1036 9180 0200 LDS	R24,arm_number
    1038 3085      CPI	R24,5
    1039 F409      BNE	0x103B
(0395) 		reset_6C();
    103A DF2A      RCALL	_reset_6C
(0396) 	}
    103B 9009      LD	R0,Y+
    103C BE0F      OUT	0x3F,R0
    103D 91F9      LD	R31,Y+
    103E 91E9      LD	R30,Y+
    103F 91B9      LD	R27,Y+
    1040 91A9      LD	R26,Y+
    1041 9199      LD	R25,Y+
    1042 9189      LD	R24,Y+
    1043 9139      LD	R19,Y+
    1044 9129      LD	R18,Y+
    1045 9119      LD	R17,Y+
    1046 9109      LD	R16,Y+
    1047 9099      LD	R9,Y+
    1048 9089      LD	R8,Y+
    1049 9079      LD	R7,Y+
    104A 9069      LD	R6,Y+
    104B 9059      LD	R5,Y+
    104C 9049      LD	R4,Y+
    104D 9039      LD	R3,Y+
    104E 9029      LD	R2,Y+
    104F 9019      LD	R1,Y+
    1050 9009      LD	R0,Y+
    1051 9518      RETI
_timer1_ovf_isr:
    1052 920A      ST	R0,-Y
    1053 921A      ST	R1,-Y
    1054 922A      ST	R2,-Y
    1055 923A      ST	R3,-Y
    1056 924A      ST	R4,-Y
    1057 925A      ST	R5,-Y
    1058 926A      ST	R6,-Y
    1059 927A      ST	R7,-Y
    105A 928A      ST	R8,-Y
    105B 929A      ST	R9,-Y
    105C 930A      ST	R16,-Y
    105D 931A      ST	R17,-Y
    105E 932A      ST	R18,-Y
    105F 933A      ST	R19,-Y
    1060 938A      ST	R24,-Y
    1061 939A      ST	R25,-Y
    1062 93AA      ST	R26,-Y
    1063 93BA      ST	R27,-Y
    1064 93EA      ST	R30,-Y
    1065 93FA      ST	R31,-Y
    1066 B60F      IN	R0,0x3F
    1067 920A      ST	R0,-Y
(0397) }
(0398) 
(0399) #pragma interrupt_handler timer1_ovf_isr:iv_TIM1_OVF
(0400) void timer1_ovf_isr(void) {
(0401) 	//TIMER1 has overflowed
(0402) 	TCNT1H = 0x94; //reload counter high value
    1068 E984      LDI	R24,0x94
    1069 9380 0085 STS	0x0085,R24
(0403) 	TCNT1L = 0x01; //reload counter low value
    106B E081      LDI	R24,1
    106C 9380 0084 STS	0x0084,R24
(0404) 	delay_count++;
    106E 9180 0204 LDS	R24,delay_count
    1070 9190 0205 LDS	R25,delay_count+1
    1072 9601      ADIW	R24,1
    1073 9390 0205 STS	delay_count+1,R25
    1075 9380 0204 STS	delay_count,R24
(0405) 	arm_number++;
    1077 9180 0200 LDS	R24,arm_number
    1079 5F8F      SUBI	R24,0xFF
    107A 9380 0200 STS	arm_number,R24
(0406) 	if (arm_number > 7) {
    107C E087      LDI	R24,7
    107D 9020 0200 LDS	R2,arm_number
    107F 1582      CP	R24,R2
    1080 F418      BCC	0x1084
(0407) 		arm_number = 0;
    1081 2422      CLR	R2
    1082 9220 0200 STS	arm_number,R2
(0408) 	}
(0409) 
(0410) 	if (arm_number == 0) {
    1084 9020 0200 LDS	R2,arm_number
    1086 2022      TST	R2
    1087 F4D9      BNE	0x10A3
(0411) 		set_1A();
    1088 DE2C      RCALL	_set_1A
(0412) 		set_1B();
    1089 DE33      RCALL	_set_1B
(0413) 		set_1C();
    108A DE3C      RCALL	_set_1C
(0414) 		OCR1AH = angle_upper_byte_1A;
    108B 9020 0245 LDS	R2,angle_upper_byte_1A
    108D 9220 0089 STS	0x0089,R2
(0415) 		OCR1AL = angle_lower_byte_1A;
    108F 9020 0244 LDS	R2,angle_lower_byte_1A
    1091 9220 0088 STS	0x0088,R2
(0416) 		OCR1BH = angle_upper_byte_1B;
    1093 9020 0243 LDS	R2,angle_upper_byte_1B
    1095 9220 008B STS	0x008B,R2
(0417) 		OCR1BL = angle_lower_byte_1B;
    1097 9020 0242 LDS	R2,angle_lower_byte_1B
    1099 9220 008A STS	0x008A,R2
(0418) 		OCR1CH = angle_upper_byte_1C;
    109B 9020 0241 LDS	R2,angle_upper_byte_1C
    109D 9220 008D STS	0x008D,R2
(0419) 		OCR1CL = angle_lower_byte_1C;
    109F 9020 0240 LDS	R2,angle_lower_byte_1C
    10A1 9220 008C STS	0x008C,R2
(0420) 	}
(0421) 
(0422) 	if (arm_number == 1) {
    10A3 9180 0200 LDS	R24,arm_number
    10A5 3081      CPI	R24,1
    10A6 F4D9      BNE	0x10C2
(0423) 		set_2A();
    10A7 DE27      RCALL	_set_2A
(0424) 		set_2B();
    10A8 DE30      RCALL	_set_2B
(0425) 		set_2C();
    10A9 DE37      RCALL	_set_2C
(0426) 		OCR1AH = angle_upper_byte_2A;
    10AA 9020 023F LDS	R2,angle_upper_byte_2A
    10AC 9220 0089 STS	0x0089,R2
(0427) 		OCR1AL = angle_lower_byte_2A;
    10AE 9020 023E LDS	R2,angle_lower_byte_2A
    10B0 9220 0088 STS	0x0088,R2
(0428) 		OCR1BH = angle_upper_byte_2B;
    10B2 9020 023D LDS	R2,angle_upper_byte_2B
    10B4 9220 008B STS	0x008B,R2
(0429) 		OCR1BL = angle_lower_byte_2B;
    10B6 9020 023C LDS	R2,angle_lower_byte_2B
    10B8 9220 008A STS	0x008A,R2
(0430) 		OCR1CH = angle_upper_byte_2C;
    10BA 9020 023B LDS	R2,angle_upper_byte_2C
    10BC 9220 008D STS	0x008D,R2
(0431) 		OCR1CL = angle_lower_byte_2C;
    10BE 9020 023A LDS	R2,angle_lower_byte_2C
    10C0 9220 008C STS	0x008C,R2
(0432) 	}
(0433) 
(0434) 	if (arm_number == 2) {
    10C2 9180 0200 LDS	R24,arm_number
    10C4 3082      CPI	R24,2
    10C5 F4D9      BNE	0x10E1
(0435) 		set_3A();
    10C6 DE26      RCALL	_set_3A
(0436) 		set_3B();
    10C7 DE31      RCALL	_set_3B
(0437) 		set_3C();
    10C8 DE3C      RCALL	_set_3C
(0438) 		OCR1AH = angle_upper_byte_3A;
    10C9 9020 0239 LDS	R2,angle_upper_byte_3A
    10CB 9220 0089 STS	0x0089,R2
(0439) 		OCR1AL = angle_lower_byte_3A;
    10CD 9020 0238 LDS	R2,angle_lower_byte_3A
    10CF 9220 0088 STS	0x0088,R2
(0440) 		OCR1BH = angle_upper_byte_3B;
    10D1 9020 0237 LDS	R2,angle_upper_byte_3B
    10D3 9220 008B STS	0x008B,R2
(0441) 		OCR1BL = angle_lower_byte_3B;
    10D5 9020 0236 LDS	R2,angle_lower_byte_3B
    10D7 9220 008A STS	0x008A,R2
(0442) 		OCR1CH = angle_upper_byte_3C;
    10D9 9020 0235 LDS	R2,angle_upper_byte_3C
    10DB 9220 008D STS	0x008D,R2
(0443) 		OCR1CL = angle_lower_byte_3C;
    10DD 9020 0234 LDS	R2,angle_lower_byte_3C
    10DF 9220 008C STS	0x008C,R2
(0444) 	}
(0445) 
(0446) 	if (arm_number == 3) {
    10E1 9180 0200 LDS	R24,arm_number
    10E3 3083      CPI	R24,3
    10E4 F4D9      BNE	0x1100
(0447) 		set_4A();
    10E5 DE35      RCALL	_set_4A
(0448) 		set_4B();
    10E6 DE3A      RCALL	_set_4B
(0449) 		set_4C();
    10E7 DE3F      RCALL	_set_4C
(0450) 		OCR1AH = angle_upper_byte_4A;
    10E8 9020 0233 LDS	R2,angle_upper_byte_4A
    10EA 9220 0089 STS	0x0089,R2
(0451) 		OCR1AL = angle_lower_byte_4A;
    10EC 9020 0232 LDS	R2,angle_lower_byte_4A
    10EE 9220 0088 STS	0x0088,R2
(0452) 		OCR1BH = angle_upper_byte_4B;
    10F0 9020 0231 LDS	R2,angle_upper_byte_4B
    10F2 9220 008B STS	0x008B,R2
(0453) 		OCR1BL = angle_lower_byte_4B;
    10F4 9020 0230 LDS	R2,angle_lower_byte_4B
    10F6 9220 008A STS	0x008A,R2
(0454) 		OCR1CH = angle_upper_byte_4C;
    10F8 9020 022F LDS	R2,angle_upper_byte_4C
    10FA 9220 008D STS	0x008D,R2
(0455) 		OCR1CL = angle_lower_byte_4C;
    10FC 9020 022E LDS	R2,angle_lower_byte_4C
    10FE 9220 008C STS	0x008C,R2
(0456) 	}
(0457) 
(0458) 	if (arm_number == 4) {
    1100 9180 0200 LDS	R24,arm_number
    1102 3084      CPI	R24,4
    1103 F4D9      BNE	0x111F
(0459) 		set_5A();
    1104 DE2A      RCALL	_set_5A
(0460) 		set_5B();
    1105 DE35      RCALL	_set_5B
(0461) 		set_5C();
    1106 DE40      RCALL	_set_5C
(0462) 		OCR1AH = angle_upper_byte_5A;
    1107 9020 022D LDS	R2,angle_upper_byte_5A
    1109 9220 0089 STS	0x0089,R2
(0463) 		OCR1AL = angle_lower_byte_5A;
    110B 9020 022C LDS	R2,angle_lower_byte_5A
    110D 9220 0088 STS	0x0088,R2
(0464) 		OCR1BH = angle_upper_byte_5B;
    110F 9020 022B LDS	R2,angle_upper_byte_5B
    1111 9220 008B STS	0x008B,R2
(0465) 		OCR1BL = angle_lower_byte_5B;
    1113 9020 022A LDS	R2,angle_lower_byte_5B
    1115 9220 008A STS	0x008A,R2
(0466) 		OCR1CH = angle_upper_byte_5C;
    1117 9020 0229 LDS	R2,angle_upper_byte_5C
    1119 9220 008D STS	0x008D,R2
(0467) 		OCR1CL = angle_lower_byte_5C;
    111B 9020 0228 LDS	R2,angle_lower_byte_5C
    111D 9220 008C STS	0x008C,R2
(0468) 	}
(0469) 
(0470) 	if (arm_number == 5) {
    111F 9180 0200 LDS	R24,arm_number
    1121 3085      CPI	R24,5
    1122 F4D9      BNE	0x113E
(0471) 		set_6A();
    1123 DE2F      RCALL	_set_6A
(0472) 		set_6B();
    1124 DE3A      RCALL	_set_6B
(0473) 		set_6C();
    1125 DE45      RCALL	_set_6C
(0474) 		OCR1AH = angle_upper_byte_6A;
    1126 9020 0227 LDS	R2,angle_upper_byte_6A
    1128 9220 0089 STS	0x0089,R2
(0475) 		OCR1AL = angle_lower_byte_6A;
    112A 9020 0226 LDS	R2,angle_lower_byte_6A
    112C 9220 0088 STS	0x0088,R2
(0476) 		OCR1BH = angle_upper_byte_6B;
    112E 9020 0225 LDS	R2,angle_upper_byte_6B
    1130 9220 008B STS	0x008B,R2
(0477) 		OCR1BL = angle_lower_byte_6B;
    1132 9020 0224 LDS	R2,angle_lower_byte_6B
    1134 9220 008A STS	0x008A,R2
(0478) 		OCR1CH = angle_upper_byte_6C;
    1136 9020 0223 LDS	R2,angle_upper_byte_6C
    1138 9220 008D STS	0x008D,R2
(0479) 		OCR1CL = angle_lower_byte_6C;
    113A 9020 0222 LDS	R2,angle_lower_byte_6C
    113C 9220 008C STS	0x008C,R2
(0480) 	}
    113E 9009      LD	R0,Y+
    113F BE0F      OUT	0x3F,R0
    1140 91F9      LD	R31,Y+
    1141 91E9      LD	R30,Y+
    1142 91B9      LD	R27,Y+
    1143 91A9      LD	R26,Y+
    1144 9199      LD	R25,Y+
    1145 9189      LD	R24,Y+
    1146 9139      LD	R19,Y+
    1147 9129      LD	R18,Y+
    1148 9119      LD	R17,Y+
    1149 9109      LD	R16,Y+
    114A 9099      LD	R9,Y+
    114B 9089      LD	R8,Y+
    114C 9079      LD	R7,Y+
    114D 9069      LD	R6,Y+
    114E 9059      LD	R5,Y+
    114F 9049      LD	R4,Y+
    1150 9039      LD	R3,Y+
    1151 9029      LD	R2,Y+
    1152 9019      LD	R1,Y+
    1153 9009      LD	R0,Y+
    1154 9518      RETI
(0481) 	//serial communication related code
(0482) 	/*serial_communication_interval++;
(0483) 	if (serial_communication_interval > 40) //gives time interval of 40*2.5ms = 100ms
(0484) 	{
(0485) 		serial_communication_interval = 0;
(0486) 		serial_communication_channel_number++;
(0487) 		if (serial_communication_channel_number > 4) //set maximum number of command (can be set up to 7)
(0488) 		{
(0489) 			serial_communication_channel_number = 3; //set first command to begin with (can be set up to 1)
(0490) 		}
(0491) 		UDR0 = serial_communication_channel_number;
(0492) 	}*/
(0493) }
(0494) 
(0495) 
(0496) //UART0 initialize
(0497) // desired baud rate: 9600
(0498) // actual: baud rate:9600 (0.0%)
(0499) // char size: 8 bit
(0500) // parity: Disabled
(0501) void uart0_init(void) 
(0502) {
(0503) 	UCSR0B = 0x00; //disable while setting baud rate
_uart0_init:
    1155 2422      CLR	R2
    1156 9220 00C1 STS	0x00C1,R2
(0504) 	UCSR0A = 0x00;
    1158 9220 00C0 STS	0x00C0,R2
(0505) 	UCSR0C = 0x06;
    115A E086      LDI	R24,6
    115B 9380 00C2 STS	0x00C2,R24
(0506) 	UBRR0L = 0x47; //set baud rate lo (can be 0x5f)
    115D E487      LDI	R24,0x47
    115E 9380 00C4 STS	0x00C4,R24
(0507) 	UBRR0H = 0x00; //set baud rate hi
    1160 9220 00C5 STS	0x00C5,R2
(0508) 	UCSR0B = 0x98;
    1162 E988      LDI	R24,0x98
    1163 9380 00C1 STS	0x00C1,R24
    1165 9508      RET
(0509) }
(0510) 
(0511) //call this routine to initialize all peripherals
(0512) void init_devices(void) 
(0513) {
(0514) 	//stop errant interrupts until set up
(0515) 	CLI(); //disable all interrupts
_init_devices:
    1166 94F8      BCLR	7
(0516) 	XMCRA = 0x00; //external memory
    1167 2422      CLR	R2
    1168 9220 0074 STS	0x0074,R2
(0517) 	XMCRB = 0x00; //external memory
    116A 9220 0075 STS	0x0075,R2
(0518) 	port_init();
    116C DCE9      RCALL	_port_init
(0519) 	timer1_init();
    116D DD10      RCALL	_timer1_init
(0520) 	uart0_init();
    116E DFE6      RCALL	_uart0_init
(0521) 			
(0522) 	MCUCR = 0x00;
    116F 2422      CLR	R2
    1170 BE25      OUT	0x35,R2
(0523) 	EICRA = 0x00; //pin change int edge 0:3
    1171 9220 0069 STS	0x0069,R2
(0524) 	EICRB = 0x00; //pin change int edge 4:7
    1173 9220 006A STS	0x006A,R2
(0525) 	PCICR = 0x00; //pin change int enable
    1175 9220 0068 STS	0x0068,R2
(0526) 	PCMSK0 = 0x00; //pin change mask
    1177 9220 006B STS	0x006B,R2
(0527) 	PCMSK1 = 0x00; //pin change mask
    1179 9220 006C STS	0x006C,R2
(0528) 	PCMSK2 = 0x00; //pin change mask
    117B 9220 006D STS	0x006D,R2
(0529) 	EIMSK = 0x00;
    117D BA2D      OUT	0x1D,R2
(0530) 	TIMSK0 = 0x00; //timer0 interrupt sources
    117E 9220 006E STS	0x006E,R2
(0531) 	TIMSK1 = 0x0F; //timer1 interrupt sources
    1180 E08F      LDI	R24,0xF
    1181 9380 006F STS	0x006F,R24
(0532) 	TIMSK2 = 0x00; //timer2 interrupt sources
    1183 9220 0070 STS	0x0070,R2
(0533) 	TIMSK3 = 0x00; //timer3 interrupt sources
    1185 9220 0071 STS	0x0071,R2
(0534) 	TIMSK4 = 0x00; //timer4 interrupt sources
    1187 9220 0072 STS	0x0072,R2
(0535) 	TIMSK5 = 0x00; //timer5 interrupt sources
    1189 9220 0073 STS	0x0073,R2
(0536) 
(0537) 	SEI(); //re-enable interrupts
    118B 9478      BSET	7
    118C 9508      RET
_uart0_rx_isr:
    118D 920A      ST	R0,-Y
    118E 921A      ST	R1,-Y
    118F 922A      ST	R2,-Y
    1190 923A      ST	R3,-Y
    1191 924A      ST	R4,-Y
    1192 925A      ST	R5,-Y
    1193 926A      ST	R6,-Y
    1194 927A      ST	R7,-Y
    1195 928A      ST	R8,-Y
    1196 929A      ST	R9,-Y
    1197 930A      ST	R16,-Y
    1198 931A      ST	R17,-Y
    1199 932A      ST	R18,-Y
    119A 933A      ST	R19,-Y
    119B 938A      ST	R24,-Y
    119C 939A      ST	R25,-Y
    119D 93AA      ST	R26,-Y
    119E 93BA      ST	R27,-Y
    119F 93EA      ST	R30,-Y
    11A0 93FA      ST	R31,-Y
    11A1 B60F      IN	R0,0x3F
    11A2 920A      ST	R0,-Y
(0538) 	//all peripherals are now initialized
(0539) }
(0540) 
(0541) #pragma interrupt_handler uart0_rx_isr:iv_USART0_RXC
(0542) void uart0_rx_isr(void) 
(0543) {
(0544) 	//uart has received a character in UDR	
(0545) 	data = UDR0;
    11A3 9020 00C6 LDS	R2,0x00C6
    11A5 9220 0219 STS	data,R2
(0546) 	UDR0 = data;
    11A7 9220 00C6 STS	0x00C6,R2
(0547) 	if(KEYBOARD_ON)
(0548) 	    keyboard_control();
    11A9 940E 1C11 CALL	_keyboard_control
    11AB 9009      LD	R0,Y+
    11AC BE0F      OUT	0x3F,R0
    11AD 91F9      LD	R31,Y+
    11AE 91E9      LD	R30,Y+
    11AF 91B9      LD	R27,Y+
    11B0 91A9      LD	R26,Y+
    11B1 9199      LD	R25,Y+
    11B2 9189      LD	R24,Y+
    11B3 9139      LD	R19,Y+
    11B4 9129      LD	R18,Y+
    11B5 9119      LD	R17,Y+
    11B6 9109      LD	R16,Y+
    11B7 9099      LD	R9,Y+
    11B8 9089      LD	R8,Y+
    11B9 9079      LD	R7,Y+
    11BA 9069      LD	R6,Y+
    11BB 9059      LD	R5,Y+
    11BC 9049      LD	R4,Y+
    11BD 9039      LD	R3,Y+
    11BE 9029      LD	R2,Y+
    11BF 9019      LD	R1,Y+
    11C0 9009      LD	R0,Y+
    11C1 9518      RETI
(0549) }
(0550) 
(0551) void servo_on(void) {
(0552) 	PORTB = PORTB | 0x01;
_servo_on:
    11C2 9A28      SBI	0x05,0
    11C3 9508      RET
(0553) }
(0554) 
(0555) void servo_off(void) {
(0556) 	PORTB = PORTB & 0xFE;
_servo_off:
    11C4 B185      IN	R24,0x05
    11C5 7F8E      ANDI	R24,0xFE
    11C6 B985      OUT	0x05,R24
    11C7 9508      RET
(0557) }
(0558) 
(0559) void reset_SP_LEFT(void) {
(0560) 	PORTL = PORTL & 0xFD;
_reset_SP_LEFT:
    11C8 9180 010B LDS	R24,0x010B
    11CA 7F8D      ANDI	R24,0xFD
    11CB 9380 010B STS	0x010B,R24
    11CD 9508      RET
(0561) }
(0562) 
(0563) void set_SP_LEFT(void) {
(0564) 	PORTL = PORTL | 0x02;
_set_SP_LEFT:
    11CE 9180 010B LDS	R24,0x010B
    11D0 6082      ORI	R24,2
    11D1 9380 010B STS	0x010B,R24
    11D3 9508      RET
(0565) }
(0566) 
(0567) 
(0568) void angle_value_calculation(void) {
(0569) 	unsigned int angle_value = 0;
_angle_value_calculation:
  temp                 --> R16
  angle_value          --> R18
    11D4 2722      CLR	R18
    11D5 2733      CLR	R19
(0570) 	unsigned int temp = 0;
    11D6 2700      CLR	R16
    11D7 2711      CLR	R17
(0571) 	if (degree > 180)
    11D8 EB84      LDI	R24,0xB4
    11D9 9020 0203 LDS	R2,degree
    11DB 1582      CP	R24,R2
    11DC F410      BCC	0x11DF
(0572) 		degree = 180; // limiting the scope of the servo rotation
    11DD 9380 0203 STS	degree,R24
(0573) 
(0574) 	angle_value = 0xBF39 + (64 * (unsigned char) degree); //actual constant is 64.4
    11DF 9020 0203 LDS	R2,degree
    11E1 E480      LDI	R24,0x40
    11E2 9D82      MUL	R24,R2
    11E3 0190      MOVW	R18,R0
    11E4 5C27      SUBI	R18,0xC7
    11E5 4430      SBCI	R19,0x40
(0575) 
(0576) 	angle_lower_byte = (unsigned char) angle_value; //separating the lower byte
    11E6 9320 0202 STS	angle_lower_byte,R18
(0577) 
(0578) 	temp = angle_value >> 8;
    11E8 0189      MOVW	R16,R18
    11E9 2F01      MOV	R16,R17
    11EA 2711      CLR	R17
(0579) 	angle_upper_byte = (unsigned char) temp; //separating the upper byte
    11EB 9300 0201 STS	angle_upper_byte,R16
    11ED 9508      RET
_angle_1A:
  angle                --> R10
    11EE 92AA      ST	R10,-Y
    11EF 2EA0      MOV	R10,R16
(0580) }
(0581) 
(0582) void angle_1A(unsigned char angle) {
(0583) 	degree = angle;
    11F0 92A0 0203 STS	degree,R10
(0584) 	angle_value_calculation();
    11F2 DFE1      RCALL	_angle_value_calculation
(0585) 	angle_upper_byte_1A = angle_upper_byte;
    11F3 9020 0201 LDS	R2,angle_upper_byte
    11F5 9220 0245 STS	angle_upper_byte_1A,R2
(0586) 	angle_lower_byte_1A = angle_lower_byte;
    11F7 9020 0202 LDS	R2,angle_lower_byte
    11F9 9220 0244 STS	angle_lower_byte_1A,R2
    11FB 90A9      LD	R10,Y+
    11FC 9508      RET
_angle_1B:
  angle                --> R10
    11FD 92AA      ST	R10,-Y
    11FE 2EA0      MOV	R10,R16
(0587) }
(0588) 
(0589) void angle_1B(unsigned char angle) {
(0590) 	degree = angle;
    11FF 92A0 0203 STS	degree,R10
(0591) 	angle_value_calculation();
    1201 DFD2      RCALL	_angle_value_calculation
(0592) 	angle_upper_byte_1B = angle_upper_byte;
    1202 9020 0201 LDS	R2,angle_upper_byte
    1204 9220 0243 STS	angle_upper_byte_1B,R2
(0593) 	angle_lower_byte_1B = angle_lower_byte;
    1206 9020 0202 LDS	R2,angle_lower_byte
    1208 9220 0242 STS	angle_lower_byte_1B,R2
    120A 90A9      LD	R10,Y+
    120B 9508      RET
_angle_1C:
  angle                --> R10
    120C 92AA      ST	R10,-Y
    120D 2EA0      MOV	R10,R16
(0594) }
(0595) 
(0596) void angle_1C(unsigned char angle) {
(0597) 	degree = angle;
    120E 92A0 0203 STS	degree,R10
(0598) 	angle_value_calculation();
    1210 DFC3      RCALL	_angle_value_calculation
(0599) 	angle_upper_byte_1C = angle_upper_byte;
    1211 9020 0201 LDS	R2,angle_upper_byte
    1213 9220 0241 STS	angle_upper_byte_1C,R2
(0600) 	angle_lower_byte_1C = angle_lower_byte;
    1215 9020 0202 LDS	R2,angle_lower_byte
    1217 9220 0240 STS	angle_lower_byte_1C,R2
    1219 90A9      LD	R10,Y+
    121A 9508      RET
_angle_2A:
  angle                --> R10
    121B 92AA      ST	R10,-Y
    121C 2EA0      MOV	R10,R16
(0601) }
(0602) 
(0603) void angle_2A(unsigned char angle) {
(0604) 	degree = angle;
    121D 92A0 0203 STS	degree,R10
(0605) 	angle_value_calculation();
    121F DFB4      RCALL	_angle_value_calculation
(0606) 	angle_upper_byte_2A = angle_upper_byte;
    1220 9020 0201 LDS	R2,angle_upper_byte
    1222 9220 023F STS	angle_upper_byte_2A,R2
(0607) 	angle_lower_byte_2A = angle_lower_byte;
    1224 9020 0202 LDS	R2,angle_lower_byte
    1226 9220 023E STS	angle_lower_byte_2A,R2
    1228 90A9      LD	R10,Y+
    1229 9508      RET
_angle_2B:
  angle                --> R10
    122A 92AA      ST	R10,-Y
    122B 2EA0      MOV	R10,R16
(0608) }
(0609) 
(0610) void angle_2B(unsigned char angle) {
(0611) 	degree = angle;
    122C 92A0 0203 STS	degree,R10
(0612) 	angle_value_calculation();
    122E DFA5      RCALL	_angle_value_calculation
(0613) 	angle_upper_byte_2B = angle_upper_byte;
    122F 9020 0201 LDS	R2,angle_upper_byte
    1231 9220 023D STS	angle_upper_byte_2B,R2
(0614) 	angle_lower_byte_2B = angle_lower_byte;
    1233 9020 0202 LDS	R2,angle_lower_byte
    1235 9220 023C STS	angle_lower_byte_2B,R2
    1237 90A9      LD	R10,Y+
    1238 9508      RET
_angle_2C:
  angle                --> R10
    1239 92AA      ST	R10,-Y
    123A 2EA0      MOV	R10,R16
(0615) }
(0616) 
(0617) void angle_2C(unsigned char angle) {
(0618) 	degree = angle;
    123B 92A0 0203 STS	degree,R10
(0619) 	angle_value_calculation();
    123D DF96      RCALL	_angle_value_calculation
(0620) 	angle_upper_byte_2C = angle_upper_byte;
    123E 9020 0201 LDS	R2,angle_upper_byte
    1240 9220 023B STS	angle_upper_byte_2C,R2
(0621) 	angle_lower_byte_2C = angle_lower_byte;
    1242 9020 0202 LDS	R2,angle_lower_byte
    1244 9220 023A STS	angle_lower_byte_2C,R2
    1246 90A9      LD	R10,Y+
    1247 9508      RET
_angle_3A:
  angle                --> R10
    1248 92AA      ST	R10,-Y
    1249 2EA0      MOV	R10,R16
(0622) }
(0623) 
(0624) void angle_3A(unsigned char angle) {
(0625) 	degree = angle;
    124A 92A0 0203 STS	degree,R10
(0626) 	angle_value_calculation();
    124C DF87      RCALL	_angle_value_calculation
(0627) 	angle_upper_byte_3A = angle_upper_byte;
    124D 9020 0201 LDS	R2,angle_upper_byte
    124F 9220 0239 STS	angle_upper_byte_3A,R2
(0628) 	angle_lower_byte_3A = angle_lower_byte;
    1251 9020 0202 LDS	R2,angle_lower_byte
    1253 9220 0238 STS	angle_lower_byte_3A,R2
    1255 90A9      LD	R10,Y+
    1256 9508      RET
_angle_3B:
  angle                --> R10
    1257 92AA      ST	R10,-Y
    1258 2EA0      MOV	R10,R16
(0629) }
(0630) 
(0631) void angle_3B(unsigned char angle) {
(0632) 	degree = angle;
    1259 92A0 0203 STS	degree,R10
(0633) 	angle_value_calculation();
    125B DF78      RCALL	_angle_value_calculation
(0634) 	angle_upper_byte_3B = angle_upper_byte;
    125C 9020 0201 LDS	R2,angle_upper_byte
    125E 9220 0237 STS	angle_upper_byte_3B,R2
(0635) 	angle_lower_byte_3B = angle_lower_byte;
    1260 9020 0202 LDS	R2,angle_lower_byte
    1262 9220 0236 STS	angle_lower_byte_3B,R2
    1264 90A9      LD	R10,Y+
    1265 9508      RET
_angle_3C:
  angle                --> R10
    1266 92AA      ST	R10,-Y
    1267 2EA0      MOV	R10,R16
(0636) }
(0637) 
(0638) void angle_3C(unsigned char angle) {
(0639) 	degree = angle;
    1268 92A0 0203 STS	degree,R10
(0640) 	angle_value_calculation();
    126A DF69      RCALL	_angle_value_calculation
(0641) 	angle_upper_byte_3C = angle_upper_byte;
    126B 9020 0201 LDS	R2,angle_upper_byte
    126D 9220 0235 STS	angle_upper_byte_3C,R2
(0642) 	angle_lower_byte_3C = angle_lower_byte;
    126F 9020 0202 LDS	R2,angle_lower_byte
    1271 9220 0234 STS	angle_lower_byte_3C,R2
    1273 90A9      LD	R10,Y+
    1274 9508      RET
_angle_4A:
  angle                --> R10
    1275 92AA      ST	R10,-Y
    1276 2EA0      MOV	R10,R16
(0643) }
(0644) 
(0645) void angle_4A(unsigned char angle) {
(0646) 	degree = angle;
    1277 92A0 0203 STS	degree,R10
(0647) 	angle_value_calculation();
    1279 DF5A      RCALL	_angle_value_calculation
(0648) 	angle_upper_byte_4A = angle_upper_byte;
    127A 9020 0201 LDS	R2,angle_upper_byte
    127C 9220 0233 STS	angle_upper_byte_4A,R2
(0649) 	angle_lower_byte_4A = angle_lower_byte;
    127E 9020 0202 LDS	R2,angle_lower_byte
    1280 9220 0232 STS	angle_lower_byte_4A,R2
    1282 90A9      LD	R10,Y+
    1283 9508      RET
_angle_4B:
  angle                --> R10
    1284 92AA      ST	R10,-Y
    1285 2EA0      MOV	R10,R16
(0650) }
(0651) 
(0652) void angle_4B(unsigned char angle) {
(0653) 	degree = angle;
    1286 92A0 0203 STS	degree,R10
(0654) 	angle_value_calculation();
    1288 DF4B      RCALL	_angle_value_calculation
(0655) 	angle_upper_byte_4B = angle_upper_byte;
    1289 9020 0201 LDS	R2,angle_upper_byte
    128B 9220 0231 STS	angle_upper_byte_4B,R2
(0656) 	angle_lower_byte_4B = angle_lower_byte;
    128D 9020 0202 LDS	R2,angle_lower_byte
    128F 9220 0230 STS	angle_lower_byte_4B,R2
    1291 90A9      LD	R10,Y+
    1292 9508      RET
_angle_4C:
  angle                --> R10
    1293 92AA      ST	R10,-Y
    1294 2EA0      MOV	R10,R16
(0657) }
(0658) 
(0659) void angle_4C(unsigned char angle) {
(0660) 	degree = angle;
    1295 92A0 0203 STS	degree,R10
(0661) 	angle_value_calculation();
    1297 DF3C      RCALL	_angle_value_calculation
(0662) 	angle_upper_byte_4C = angle_upper_byte;
    1298 9020 0201 LDS	R2,angle_upper_byte
    129A 9220 022F STS	angle_upper_byte_4C,R2
(0663) 	angle_lower_byte_4C = angle_lower_byte;
    129C 9020 0202 LDS	R2,angle_lower_byte
    129E 9220 022E STS	angle_lower_byte_4C,R2
    12A0 90A9      LD	R10,Y+
    12A1 9508      RET
_angle_5A:
  angle                --> R10
    12A2 92AA      ST	R10,-Y
    12A3 2EA0      MOV	R10,R16
(0664) }
(0665) 
(0666) void angle_5A(unsigned char angle) {
(0667) 	degree = angle;
    12A4 92A0 0203 STS	degree,R10
(0668) 	angle_value_calculation();
    12A6 DF2D      RCALL	_angle_value_calculation
(0669) 	angle_upper_byte_5A = angle_upper_byte;
    12A7 9020 0201 LDS	R2,angle_upper_byte
    12A9 9220 022D STS	angle_upper_byte_5A,R2
(0670) 	angle_lower_byte_5A = angle_lower_byte;
    12AB 9020 0202 LDS	R2,angle_lower_byte
    12AD 9220 022C STS	angle_lower_byte_5A,R2
    12AF 90A9      LD	R10,Y+
    12B0 9508      RET
_angle_5B:
  angle                --> R10
    12B1 92AA      ST	R10,-Y
    12B2 2EA0      MOV	R10,R16
(0671) }
(0672) 
(0673) void angle_5B(unsigned char angle) {
(0674) 	degree = angle;
    12B3 92A0 0203 STS	degree,R10
(0675) 	angle_value_calculation();
    12B5 DF1E      RCALL	_angle_value_calculation
(0676) 	angle_upper_byte_5B = angle_upper_byte;
    12B6 9020 0201 LDS	R2,angle_upper_byte
    12B8 9220 022B STS	angle_upper_byte_5B,R2
(0677) 	angle_lower_byte_5B = angle_lower_byte;
    12BA 9020 0202 LDS	R2,angle_lower_byte
    12BC 9220 022A STS	angle_lower_byte_5B,R2
    12BE 90A9      LD	R10,Y+
    12BF 9508      RET
_angle_5C:
  angle                --> R10
    12C0 92AA      ST	R10,-Y
    12C1 2EA0      MOV	R10,R16
(0678) }
(0679) 
(0680) void angle_5C(unsigned char angle) {
(0681) 	degree = angle;
    12C2 92A0 0203 STS	degree,R10
(0682) 	angle_value_calculation();
    12C4 DF0F      RCALL	_angle_value_calculation
(0683) 	angle_upper_byte_5C = angle_upper_byte;
    12C5 9020 0201 LDS	R2,angle_upper_byte
    12C7 9220 0229 STS	angle_upper_byte_5C,R2
(0684) 	angle_lower_byte_5C = angle_lower_byte;
    12C9 9020 0202 LDS	R2,angle_lower_byte
    12CB 9220 0228 STS	angle_lower_byte_5C,R2
    12CD 90A9      LD	R10,Y+
    12CE 9508      RET
_angle_6A:
  angle                --> R10
    12CF 92AA      ST	R10,-Y
    12D0 2EA0      MOV	R10,R16
(0685) }
(0686) 
(0687) void angle_6A(unsigned char angle) {
(0688) 	degree = angle;
    12D1 92A0 0203 STS	degree,R10
(0689) 	angle_value_calculation();
    12D3 DF00      RCALL	_angle_value_calculation
(0690) 	angle_upper_byte_6A = angle_upper_byte;
    12D4 9020 0201 LDS	R2,angle_upper_byte
    12D6 9220 0227 STS	angle_upper_byte_6A,R2
(0691) 	angle_lower_byte_6A = angle_lower_byte;
    12D8 9020 0202 LDS	R2,angle_lower_byte
    12DA 9220 0226 STS	angle_lower_byte_6A,R2
    12DC 90A9      LD	R10,Y+
    12DD 9508      RET
_angle_6B:
  angle                --> R10
    12DE 92AA      ST	R10,-Y
    12DF 2EA0      MOV	R10,R16
(0692) }
(0693) 
(0694) void angle_6B(unsigned char angle) {
(0695) 	degree = angle;
    12E0 92A0 0203 STS	degree,R10
(0696) 	angle_value_calculation();
    12E2 DEF1      RCALL	_angle_value_calculation
(0697) 	angle_upper_byte_6B = angle_upper_byte;
    12E3 9020 0201 LDS	R2,angle_upper_byte
    12E5 9220 0225 STS	angle_upper_byte_6B,R2
(0698) 	angle_lower_byte_6B = angle_lower_byte;
    12E7 9020 0202 LDS	R2,angle_lower_byte
    12E9 9220 0224 STS	angle_lower_byte_6B,R2
    12EB 90A9      LD	R10,Y+
    12EC 9508      RET
_angle_6C:
  angle                --> R10
    12ED 92AA      ST	R10,-Y
    12EE 2EA0      MOV	R10,R16
(0699) }
(0700) 
(0701) void angle_6C(unsigned char angle) {
(0702) 	degree = angle;
    12EF 92A0 0203 STS	degree,R10
(0703) 	angle_value_calculation();
    12F1 DEE2      RCALL	_angle_value_calculation
(0704) 	angle_upper_byte_6C = angle_upper_byte;
    12F2 9020 0201 LDS	R2,angle_upper_byte
    12F4 9220 0223 STS	angle_upper_byte_6C,R2
(0705) 	angle_lower_byte_6C = angle_lower_byte;
    12F6 9020 0202 LDS	R2,angle_lower_byte
    12F8 9220 0222 STS	angle_lower_byte_6C,R2
    12FA 90A9      LD	R10,Y+
    12FB 9508      RET
(0706) }
(0707) 
(0708) void servo_calibration(void) {
(0709) 	angle_1A(90);
_servo_calibration:
    12FC E50A      LDI	R16,0x5A
    12FD DEF0      RCALL	_angle_1A
(0710) 	angle_1B(90);
    12FE E50A      LDI	R16,0x5A
    12FF DEFD      RCALL	_angle_1B
(0711) 	angle_1C(90);
    1300 E50A      LDI	R16,0x5A
    1301 DF0A      RCALL	_angle_1C
(0712) 	angle_2A(90);
    1302 E50A      LDI	R16,0x5A
    1303 DF17      RCALL	_angle_2A
(0713) 	angle_2B(90);
    1304 E50A      LDI	R16,0x5A
    1305 DF24      RCALL	_angle_2B
(0714) 	angle_2C(90);
    1306 E50A      LDI	R16,0x5A
    1307 DF31      RCALL	_angle_2C
(0715) 	angle_3A(90);
    1308 E50A      LDI	R16,0x5A
    1309 DF3E      RCALL	_angle_3A
(0716) 	angle_3B(90);
    130A E50A      LDI	R16,0x5A
    130B DF4B      RCALL	_angle_3B
(0717) 	angle_3C(90);
    130C E50A      LDI	R16,0x5A
    130D DF58      RCALL	_angle_3C
(0718) 	angle_4A(90);
    130E E50A      LDI	R16,0x5A
    130F DF65      RCALL	_angle_4A
(0719) 	angle_4B(90);
    1310 E50A      LDI	R16,0x5A
    1311 DF72      RCALL	_angle_4B
(0720) 	angle_4C(90);
    1312 E50A      LDI	R16,0x5A
    1313 DF7F      RCALL	_angle_4C
(0721) 	angle_5A(90);
    1314 E50A      LDI	R16,0x5A
    1315 DF8C      RCALL	_angle_5A
(0722) 	angle_5B(90);
    1316 E50A      LDI	R16,0x5A
    1317 DF99      RCALL	_angle_5B
(0723) 	angle_5C(90);
    1318 E50A      LDI	R16,0x5A
    1319 DFA6      RCALL	_angle_5C
(0724) 	angle_6A(90);
    131A E50A      LDI	R16,0x5A
    131B DFB3      RCALL	_angle_6A
(0725) 	angle_6B(90);
    131C E50A      LDI	R16,0x5A
    131D DFC0      RCALL	_angle_6B
(0726) 	angle_6C(90);
    131E E50A      LDI	R16,0x5A
    131F DFCD      RCALL	_angle_6C
    1320 9508      RET
(0727) }
(0728) 
(0729) void even_A_servo_90(void) {
(0730) 	angle_2A(90);
_even_A_servo_90:
    1321 E50A      LDI	R16,0x5A
    1322 DEF8      RCALL	_angle_2A
(0731) 	angle_4A(90);
    1323 E50A      LDI	R16,0x5A
    1324 DF50      RCALL	_angle_4A
(0732) 	angle_6A(90);
    1325 E50A      LDI	R16,0x5A
    1326 DFA8      RCALL	_angle_6A
    1327 9508      RET
(0733) }
(0734) 
(0735) void even_A_servo_65(void) //clockwise
(0736) {
(0737) 	angle_2A(65);
_even_A_servo_65:
    1328 E401      LDI	R16,0x41
    1329 DEF1      RCALL	_angle_2A
(0738) 	angle_4A(65);
    132A E401      LDI	R16,0x41
    132B DF49      RCALL	_angle_4A
(0739) 	angle_6A(65);
    132C E401      LDI	R16,0x41
    132D DFA1      RCALL	_angle_6A
    132E 9508      RET
(0740) }
(0741) 
(0742) void even_A_servo_115(void)//anticlockwise_
(0743) {
(0744) 	angle_2A(115);
_even_A_servo_115:
    132F E703      LDI	R16,0x73
    1330 DEEA      RCALL	_angle_2A
(0745) 	angle_4A(115);
    1331 E703      LDI	R16,0x73
    1332 DF42      RCALL	_angle_4A
(0746) 	angle_6A(115);
    1333 E703      LDI	R16,0x73
    1334 DF9A      RCALL	_angle_6A
    1335 9508      RET
(0747) }
(0748) 
(0749) void even_BC_servo_90(void) {
(0750) 	angle_2B(90);
_even_BC_servo_90:
    1336 E50A      LDI	R16,0x5A
    1337 DEF2      RCALL	_angle_2B
(0751) 	angle_2C(90);
    1338 E50A      LDI	R16,0x5A
    1339 DEFF      RCALL	_angle_2C
(0752) 	angle_4B(90);
    133A E50A      LDI	R16,0x5A
    133B DF48      RCALL	_angle_4B
(0753) 	angle_4C(90);
    133C E50A      LDI	R16,0x5A
    133D DF55      RCALL	_angle_4C
(0754) 	angle_6B(90);
    133E E50A      LDI	R16,0x5A
    133F DF9E      RCALL	_angle_6B
(0755) 	angle_6C(90);
    1340 E50A      LDI	R16,0x5A
    1341 DFAB      RCALL	_angle_6C
    1342 9508      RET
(0756) }
(0757) 
(0758) void even_BC_servo_up_45(void) {
(0759) 	angle_2B(45);
_even_BC_servo_up_45:
    1343 E20D      LDI	R16,0x2D
    1344 DEE5      RCALL	_angle_2B
(0760) 	angle_2C(90);
    1345 E50A      LDI	R16,0x5A
    1346 DEF2      RCALL	_angle_2C
(0761) 	angle_4B(135);
    1347 E807      LDI	R16,0x87
    1348 DF3B      RCALL	_angle_4B
(0762) 	angle_4C(90);
    1349 E50A      LDI	R16,0x5A
    134A DF48      RCALL	_angle_4C
(0763) 	angle_6B(135);
    134B E807      LDI	R16,0x87
    134C DF91      RCALL	_angle_6B
(0764) 	angle_6C(90);
    134D E50A      LDI	R16,0x5A
    134E DF9E      RCALL	_angle_6C
    134F 9508      RET
(0765) }
(0766) 
(0767) void even_BC_servo_down_45(void) {
(0768) 	angle_2B(135);
_even_BC_servo_down_45:
    1350 E807      LDI	R16,0x87
    1351 DED8      RCALL	_angle_2B
(0769) 	angle_2C(135);
    1352 E807      LDI	R16,0x87
    1353 DEE5      RCALL	_angle_2C
(0770) 	angle_4B(45);
    1354 E20D      LDI	R16,0x2D
    1355 DF2E      RCALL	_angle_4B
(0771) 	angle_4C(45);
    1356 E20D      LDI	R16,0x2D
    1357 DF3B      RCALL	_angle_4C
(0772) 	angle_6B(45);
    1358 E20D      LDI	R16,0x2D
    1359 DF84      RCALL	_angle_6B
(0773) 	angle_6C(45);
    135A E20D      LDI	R16,0x2D
    135B DF91      RCALL	_angle_6C
    135C 9508      RET
(0774) }
(0775) 
(0776) void odd_A_servo_90(void) {
(0777) 	angle_1A(90);
_odd_A_servo_90:
    135D E50A      LDI	R16,0x5A
    135E DE8F      RCALL	_angle_1A
(0778) 	angle_3A(90);
    135F E50A      LDI	R16,0x5A
    1360 DEE7      RCALL	_angle_3A
(0779) 	angle_5A(90);
    1361 E50A      LDI	R16,0x5A
    1362 DF3F      RCALL	_angle_5A
    1363 9508      RET
(0780) }
(0781) 
(0782) void odd_A_servo_65(void)//clockwise
(0783) {
(0784) 	angle_1A(65);
_odd_A_servo_65:
    1364 E401      LDI	R16,0x41
    1365 DE88      RCALL	_angle_1A
(0785) 	angle_3A(65);
    1366 E401      LDI	R16,0x41
    1367 DEE0      RCALL	_angle_3A
(0786) 	angle_5A(65);
    1368 E401      LDI	R16,0x41
    1369 DF38      RCALL	_angle_5A
    136A 9508      RET
(0787) }
(0788) 
(0789) void odd_A_servo_115(void) //anticlockwise
(0790) {
(0791) 	angle_1A(115);
_odd_A_servo_115:
    136B E703      LDI	R16,0x73
    136C DE81      RCALL	_angle_1A
(0792) 	angle_3A(115);
    136D E703      LDI	R16,0x73
    136E DED9      RCALL	_angle_3A
(0793) 	angle_5A(115);
    136F E703      LDI	R16,0x73
    1370 DF31      RCALL	_angle_5A
    1371 9508      RET
(0794) }
(0795) 
(0796) void odd_BC_servo_90(void) {
(0797) 	angle_1B(90);
_odd_BC_servo_90:
    1372 E50A      LDI	R16,0x5A
    1373 DE89      RCALL	_angle_1B
(0798) 	angle_1C(90);
    1374 E50A      LDI	R16,0x5A
    1375 DE96      RCALL	_angle_1C
(0799) 	angle_3B(90);
    1376 E50A      LDI	R16,0x5A
    1377 DEDF      RCALL	_angle_3B
(0800) 	angle_3C(90);
    1378 E50A      LDI	R16,0x5A
    1379 DEEC      RCALL	_angle_3C
(0801) 	angle_5B(90);
    137A E50A      LDI	R16,0x5A
    137B DF35      RCALL	_angle_5B
(0802) 	angle_5C(90);
    137C E50A      LDI	R16,0x5A
    137D DF42      RCALL	_angle_5C
    137E 9508      RET
(0803) }
(0804) 
(0805) void odd_BC_servo_up_45(void) {
(0806) 	angle_1B(45);
_odd_BC_servo_up_45:
    137F E20D      LDI	R16,0x2D
    1380 DE7C      RCALL	_angle_1B
(0807) 	angle_1C(90);
    1381 E50A      LDI	R16,0x5A
    1382 DE89      RCALL	_angle_1C
(0808) 	angle_3B(45);
    1383 E20D      LDI	R16,0x2D
    1384 DED2      RCALL	_angle_3B
(0809) 	angle_3C(90);
    1385 E50A      LDI	R16,0x5A
    1386 DEDF      RCALL	_angle_3C
(0810) 	angle_5B(135);
    1387 E807      LDI	R16,0x87
    1388 DF28      RCALL	_angle_5B
(0811) 	angle_5C(90);
    1389 E50A      LDI	R16,0x5A
    138A DF35      RCALL	_angle_5C
    138B 9508      RET
(0812) }
(0813) 
(0814) void odd_BC_servo_down_45(void) {
(0815) 	angle_1B(135);
_odd_BC_servo_down_45:
    138C E807      LDI	R16,0x87
    138D DE6F      RCALL	_angle_1B
(0816) 	angle_1C(135);
    138E E807      LDI	R16,0x87
    138F DE7C      RCALL	_angle_1C
(0817) 	angle_3B(135);
    1390 E807      LDI	R16,0x87
    1391 DEC5      RCALL	_angle_3B
(0818) 	angle_3C(135);
    1392 E807      LDI	R16,0x87
    1393 DED2      RCALL	_angle_3C
(0819) 	angle_5B(45);
    1394 E20D      LDI	R16,0x2D
    1395 DF1B      RCALL	_angle_5B
(0820) 	angle_5C(45);
    1396 E20D      LDI	R16,0x2D
    1397 DF28      RCALL	_angle_5C
    1398 9508      RET
(0821) }
(0822) 
(0823) void robot_rotate_clockwise_7_5(void) {
(0824) 	motion_busy = 1;
_robot_rotate_clockwise_7_5:
    1399 E081      LDI	R24,1
    139A 9380 0209 STS	motion_busy,R24
(0825) 	servo_calibration();
    139C DF5F      RCALL	_servo_calibration
(0826) 	delay(TWO_HUNDRED_FIFTY_MSEC);
    139D E604      LDI	R16,0x64
    139E E010      LDI	R17,0
    139F D129      RCALL	_delay
(0827) 	even_A_servo_65();
    13A0 DF87      RCALL	_even_A_servo_65
(0828) 	even_BC_servo_up_45();
    13A1 DFA1      RCALL	_even_BC_servo_up_45
(0829) 	delay(TWO_HUNDRED_FIFTY_MSEC);
    13A2 E604      LDI	R16,0x64
    13A3 E010      LDI	R17,0
    13A4 D124      RCALL	_delay
(0830) 	even_BC_servo_90();
    13A5 DF90      RCALL	_even_BC_servo_90
(0831) 	delay(TWO_HUNDRED_FIFTY_MSEC);
    13A6 E604      LDI	R16,0x64
    13A7 E010      LDI	R17,0
    13A8 D120      RCALL	_delay
(0832) 	odd_A_servo_65();
    13A9 DFBA      RCALL	_odd_A_servo_65
(0833) 	odd_BC_servo_up_45();
    13AA DFD4      RCALL	_odd_BC_servo_up_45
(0834) 	delay(TWO_HUNDRED_FIFTY_MSEC);
    13AB E604      LDI	R16,0x64
    13AC E010      LDI	R17,0
    13AD D11B      RCALL	_delay
(0835) 	odd_BC_servo_90();
    13AE DFC3      RCALL	_odd_BC_servo_90
(0836) 	delay(TWO_HUNDRED_FIFTY_MSEC);
    13AF E604      LDI	R16,0x64
    13B0 E010      LDI	R17,0
    13B1 D117      RCALL	_delay
(0837) 	even_A_servo_90();
    13B2 DF6E      RCALL	_even_A_servo_90
(0838) 	odd_A_servo_90();
    13B3 DFA9      RCALL	_odd_A_servo_90
(0839) 	motion_busy = 0;
    13B4 2422      CLR	R2
    13B5 9220 0209 STS	motion_busy,R2
    13B7 9508      RET
(0840) }
(0841) 
(0842) void robot_rotate_anticlockwise_7_5(void) {
(0843) 	motion_busy = 1;
_robot_rotate_anticlockwise_7_5:
    13B8 E081      LDI	R24,1
    13B9 9380 0209 STS	motion_busy,R24
(0844) 	servo_calibration();
    13BB DF40      RCALL	_servo_calibration
(0845) 	delay(TWO_HUNDRED_FIFTY_MSEC);
    13BC E604      LDI	R16,0x64
    13BD E010      LDI	R17,0
    13BE D10A      RCALL	_delay
(0846) 	even_A_servo_115();
    13BF DF6F      RCALL	_even_A_servo_115
(0847) 	even_BC_servo_up_45();
    13C0 DF82      RCALL	_even_BC_servo_up_45
(0848) 	delay(TWO_HUNDRED_FIFTY_MSEC);
    13C1 E604      LDI	R16,0x64
    13C2 E010      LDI	R17,0
    13C3 D105      RCALL	_delay
(0849) 	even_BC_servo_90();
    13C4 DF71      RCALL	_even_BC_servo_90
(0850) 	delay(TWO_HUNDRED_FIFTY_MSEC);
    13C5 E604      LDI	R16,0x64
    13C6 E010      LDI	R17,0
    13C7 D101      RCALL	_delay
(0851) 	odd_A_servo_115();
    13C8 DFA2      RCALL	_odd_A_servo_115
(0852) 	odd_BC_servo_up_45();
    13C9 DFB5      RCALL	_odd_BC_servo_up_45
(0853) 	delay(TWO_HUNDRED_FIFTY_MSEC);
    13CA E604      LDI	R16,0x64
    13CB E010      LDI	R17,0
    13CC D0FC      RCALL	_delay
(0854) 	odd_BC_servo_90();
    13CD DFA4      RCALL	_odd_BC_servo_90
(0855) 	delay(TWO_HUNDRED_FIFTY_MSEC);
    13CE E604      LDI	R16,0x64
    13CF E010      LDI	R17,0
    13D0 D0F8      RCALL	_delay
(0856) 	even_A_servo_90();
    13D1 DF4F      RCALL	_even_A_servo_90
(0857) 	odd_A_servo_90();
    13D2 DF8A      RCALL	_odd_A_servo_90
(0858) 	motion_busy = 0;
    13D3 2422      CLR	R2
    13D4 9220 0209 STS	motion_busy,R2
    13D6 9508      RET
(0859) }
(0860) 
(0861) //forward by using two legs at a time
(0862) void forward(void) {
(0863) 	motion_busy = 1;
_forward:
    13D7 E081      LDI	R24,1
    13D8 9380 0209 STS	motion_busy,R24
(0864) 	servo_calibration();
    13DA DF21      RCALL	_servo_calibration
(0865) 	delay(TWO_HUNDRED_FIFTY_MSEC);
    13DB E604      LDI	R16,0x64
    13DC E010      LDI	R17,0
    13DD D0EB      RCALL	_delay
(0866) 
(0867) 	//legs 2 and 4 move forward
(0868) 	angle_2B(45);
    13DE E20D      LDI	R16,0x2D
    13DF DE4A      RCALL	_angle_2B
(0869) 	angle_2C(45);
    13E0 E20D      LDI	R16,0x2D
    13E1 DE57      RCALL	_angle_2C
(0870) 	angle_4B(135);
    13E2 E807      LDI	R16,0x87
    13E3 DEA0      RCALL	_angle_4B
(0871) 	angle_4C(135); //front pair BC servo up 45
    13E4 E807      LDI	R16,0x87
    13E5 DEAD      RCALL	_angle_4C
(0872) 	delay(TWO_HUNDRED_FIFTY_MSEC);
    13E6 E604      LDI	R16,0x64
    13E7 E010      LDI	R17,0
    13E8 D0E0      RCALL	_delay
(0873) 	angle_2A(45);
    13E9 E20D      LDI	R16,0x2D
    13EA DE30      RCALL	_angle_2A
(0874) 	angle_4A(135); //front pair move forward while legs are up
    13EB E807      LDI	R16,0x87
    13EC DE88      RCALL	_angle_4A
(0875) 	delay(TWO_HUNDRED_FIFTY_MSEC);
    13ED E604      LDI	R16,0x64
    13EE E010      LDI	R17,0
    13EF D0D9      RCALL	_delay
(0876) 	angle_2B(90);
    13F0 E50A      LDI	R16,0x5A
    13F1 DE38      RCALL	_angle_2B
(0877) 	angle_2C(90);
    13F2 E50A      LDI	R16,0x5A
    13F3 DE45      RCALL	_angle_2C
(0878) 	angle_4B(90);
    13F4 E50A      LDI	R16,0x5A
    13F5 DE8E      RCALL	_angle_4B
(0879) 	angle_4C(90); // put down legs
    13F6 E50A      LDI	R16,0x5A
    13F7 DE9B      RCALL	_angle_4C
(0880) 	delay(TWO_HUNDRED_FIFTY_MSEC);
    13F8 E604      LDI	R16,0x64
    13F9 E010      LDI	R17,0
    13FA D0CE      RCALL	_delay
(0881) 
(0882) 	//legs 1 and 6 move forward
(0883) 
(0884) 	angle_1B(45);
    13FB E20D      LDI	R16,0x2D
    13FC DE00      RCALL	_angle_1B
(0885) 	angle_1C(45);
    13FD E20D      LDI	R16,0x2D
    13FE DE0D      RCALL	_angle_1C
(0886) 	angle_6B(135);
    13FF E807      LDI	R16,0x87
    1400 DEDD      RCALL	_angle_6B
(0887) 	angle_6C(135); //middel pair BC servo up 45
    1401 E807      LDI	R16,0x87
    1402 DEEA      RCALL	_angle_6C
(0888) 	delay(TWO_HUNDRED_FIFTY_MSEC);
    1403 E604      LDI	R16,0x64
    1404 E010      LDI	R17,0
    1405 D0C3      RCALL	_delay
(0889) 	angle_1A(45);
    1406 E20D      LDI	R16,0x2D
    1407 DDE6      RCALL	_angle_1A
(0890) 	angle_6A(135); //middel pair move back while legs are up
    1408 E807      LDI	R16,0x87
    1409 DEC5      RCALL	_angle_6A
(0891) 	delay(TWO_HUNDRED_FIFTY_MSEC);
    140A E604      LDI	R16,0x64
    140B E010      LDI	R17,0
    140C D0BC      RCALL	_delay
(0892) 	angle_1B(90);
    140D E50A      LDI	R16,0x5A
    140E DDEE      RCALL	_angle_1B
(0893) 	angle_1C(90);
    140F E50A      LDI	R16,0x5A
    1410 DDFB      RCALL	_angle_1C
(0894) 	angle_6B(90);
    1411 E50A      LDI	R16,0x5A
    1412 DECB      RCALL	_angle_6B
(0895) 	angle_6C(90); // put down legs
    1413 E50A      LDI	R16,0x5A
    1414 DED8      RCALL	_angle_6C
(0896) 	delay(TWO_HUNDRED_FIFTY_MSEC);
    1415 E604      LDI	R16,0x64
    1416 E010      LDI	R17,0
    1417 D0B1      RCALL	_delay
(0897) 
(0898) 	//legs 3 and 5 move forward
(0899) 	angle_3B(45);
    1418 E20D      LDI	R16,0x2D
    1419 DE3D      RCALL	_angle_3B
(0900) 	angle_3C(45);
    141A E20D      LDI	R16,0x2D
    141B DE4A      RCALL	_angle_3C
(0901) 	angle_5B(135);
    141C E807      LDI	R16,0x87
    141D DE93      RCALL	_angle_5B
(0902) 	angle_5C(135); //middel pair BC servo up 45
    141E E807      LDI	R16,0x87
    141F DEA0      RCALL	_angle_5C
(0903) 	delay(TWO_HUNDRED_FIFTY_MSEC);
    1420 E604      LDI	R16,0x64
    1421 E010      LDI	R17,0
    1422 D0A6      RCALL	_delay
(0904) 	angle_3A(45);
    1423 E20D      LDI	R16,0x2D
    1424 DE23      RCALL	_angle_3A
(0905) 	angle_5A(135); //middel pair move forward while legs are up
    1425 E807      LDI	R16,0x87
    1426 DE7B      RCALL	_angle_5A
(0906) 	delay(TWO_HUNDRED_FIFTY_MSEC);
    1427 E604      LDI	R16,0x64
    1428 E010      LDI	R17,0
    1429 D09F      RCALL	_delay
(0907) 	angle_3B(90);
    142A E50A      LDI	R16,0x5A
    142B DE2B      RCALL	_angle_3B
(0908) 	angle_3C(90);
    142C E50A      LDI	R16,0x5A
    142D DE38      RCALL	_angle_3C
(0909) 	angle_5B(90);
    142E E50A      LDI	R16,0x5A
    142F DE81      RCALL	_angle_5B
(0910) 	angle_5C(90); // put down legs
    1430 E50A      LDI	R16,0x5A
    1431 DE8E      RCALL	_angle_5C
(0911) 	delay(TWO_HUNDRED_FIFTY_MSEC);
    1432 E604      LDI	R16,0x64
    1433 E010      LDI	R17,0
    1434 D094      RCALL	_delay
(0912) 
(0913) 	servo_calibration(); //push towards forward
    1435 DEC6      RCALL	_servo_calibration
(0914) 	motion_busy = 0;
    1436 2422      CLR	R2
    1437 9220 0209 STS	motion_busy,R2
    1439 9508      RET
(0915) }
(0916) 
(0917) //backward by using two legs at a time
(0918) void back(void) {
(0919) 	motion_busy = 1;
_back:
    143A E081      LDI	R24,1
    143B 9380 0209 STS	motion_busy,R24
(0920) 	servo_calibration();
    143D DEBE      RCALL	_servo_calibration
(0921) 	delay(TWO_HUNDRED_FIFTY_MSEC);
    143E E604      LDI	R16,0x64
    143F E010      LDI	R17,0
    1440 D088      RCALL	_delay
(0922) 
(0923) 	//legs 2 and 4 move back
(0924) 	angle_2B(45);
    1441 E20D      LDI	R16,0x2D
    1442 DDE7      RCALL	_angle_2B
(0925) 	angle_2C(45);
    1443 E20D      LDI	R16,0x2D
    1444 DDF4      RCALL	_angle_2C
(0926) 	angle_4B(135);
    1445 E807      LDI	R16,0x87
    1446 DE3D      RCALL	_angle_4B
(0927) 	angle_4C(135); //front pair BC servo up 45
    1447 E807      LDI	R16,0x87
    1448 DE4A      RCALL	_angle_4C
(0928) 	delay(TWO_HUNDRED_FIFTY_MSEC);
    1449 E604      LDI	R16,0x64
    144A E010      LDI	R17,0
    144B D07D      RCALL	_delay
(0929) 	angle_2A(135);
    144C E807      LDI	R16,0x87
    144D DDCD      RCALL	_angle_2A
(0930) 	angle_4A(45); //front pair move forward while legs are up
    144E E20D      LDI	R16,0x2D
    144F DE25      RCALL	_angle_4A
(0931) 	delay(TWO_HUNDRED_FIFTY_MSEC);
    1450 E604      LDI	R16,0x64
    1451 E010      LDI	R17,0
    1452 D076      RCALL	_delay
(0932) 	angle_2B(90);
    1453 E50A      LDI	R16,0x5A
    1454 DDD5      RCALL	_angle_2B
(0933) 	angle_2C(90);
    1455 E50A      LDI	R16,0x5A
    1456 DDE2      RCALL	_angle_2C
(0934) 	angle_4B(90);
    1457 E50A      LDI	R16,0x5A
    1458 DE2B      RCALL	_angle_4B
(0935) 	angle_4C(90); // put down legs
    1459 E50A      LDI	R16,0x5A
    145A DE38      RCALL	_angle_4C
(0936) 	delay(TWO_HUNDRED_FIFTY_MSEC);
    145B E604      LDI	R16,0x64
    145C E010      LDI	R17,0
    145D D06B      RCALL	_delay
(0937) 
(0938) 	//legs 1 and 6 move back
(0939) 
(0940) 	angle_1B(45);
    145E E20D      LDI	R16,0x2D
    145F DD9D      RCALL	_angle_1B
(0941) 	angle_1C(45);
    1460 E20D      LDI	R16,0x2D
    1461 DDAA      RCALL	_angle_1C
(0942) 	angle_6B(135);
    1462 E807      LDI	R16,0x87
    1463 DE7A      RCALL	_angle_6B
(0943) 	angle_6C(135); //middel pair BC servo up 45
    1464 E807      LDI	R16,0x87
    1465 DE87      RCALL	_angle_6C
(0944) 	delay(TWO_HUNDRED_FIFTY_MSEC);
    1466 E604      LDI	R16,0x64
    1467 E010      LDI	R17,0
    1468 D060      RCALL	_delay
(0945) 	angle_1A(135);
    1469 E807      LDI	R16,0x87
    146A DD83      RCALL	_angle_1A
(0946) 	angle_6A(45); //middel pair move back while legs are up
    146B E20D      LDI	R16,0x2D
    146C DE62      RCALL	_angle_6A
(0947) 	delay(TWO_HUNDRED_FIFTY_MSEC);
    146D E604      LDI	R16,0x64
    146E E010      LDI	R17,0
    146F D059      RCALL	_delay
(0948) 	angle_1B(90);
    1470 E50A      LDI	R16,0x5A
    1471 DD8B      RCALL	_angle_1B
(0949) 	angle_1C(90);
    1472 E50A      LDI	R16,0x5A
    1473 DD98      RCALL	_angle_1C
(0950) 	angle_6B(90);
    1474 E50A      LDI	R16,0x5A
    1475 DE68      RCALL	_angle_6B
(0951) 	angle_6C(90); // put down legs
    1476 E50A      LDI	R16,0x5A
    1477 DE75      RCALL	_angle_6C
(0952) 	delay(TWO_HUNDRED_FIFTY_MSEC);
    1478 E604      LDI	R16,0x64
    1479 E010      LDI	R17,0
    147A D04E      RCALL	_delay
(0953) 
(0954) 	//legs 3 and 5 move back
(0955) 	angle_3B(45);
    147B E20D      LDI	R16,0x2D
    147C DDDA      RCALL	_angle_3B
(0956) 	angle_3C(45);
    147D E20D      LDI	R16,0x2D
    147E DDE7      RCALL	_angle_3C
(0957) 	angle_5B(135);
    147F E807      LDI	R16,0x87
    1480 DE30      RCALL	_angle_5B
(0958) 	angle_5C(135); //middel pair BC servo up 45
    1481 E807      LDI	R16,0x87
    1482 DE3D      RCALL	_angle_5C
(0959) 	delay(TWO_HUNDRED_FIFTY_MSEC);
    1483 E604      LDI	R16,0x64
    1484 E010      LDI	R17,0
    1485 D043      RCALL	_delay
(0960) 	angle_3A(135);
    1486 E807      LDI	R16,0x87
    1487 DDC0      RCALL	_angle_3A
(0961) 	angle_5A(45); //middel pair move forward while legs are up
    1488 E20D      LDI	R16,0x2D
    1489 DE18      RCALL	_angle_5A
(0962) 	delay(TWO_HUNDRED_FIFTY_MSEC);
    148A E604      LDI	R16,0x64
    148B E010      LDI	R17,0
    148C D03C      RCALL	_delay
(0963) 	angle_3B(90);
    148D E50A      LDI	R16,0x5A
    148E DDC8      RCALL	_angle_3B
(0964) 	angle_3C(90);
    148F E50A      LDI	R16,0x5A
    1490 DDD5      RCALL	_angle_3C
(0965) 	angle_5B(90);
    1491 E50A      LDI	R16,0x5A
    1492 DE1E      RCALL	_angle_5B
(0966) 	angle_5C(90); // put down legs
    1493 E50A      LDI	R16,0x5A
    1494 DE2B      RCALL	_angle_5C
(0967) 	delay(TWO_HUNDRED_FIFTY_MSEC);
    1495 E604      LDI	R16,0x64
    1496 E010      LDI	R17,0
    1497 D031      RCALL	_delay
(0968) 
(0969) 	servo_calibration(); //push towards back
    1498 DE63      RCALL	_servo_calibration
(0970) 	motion_busy = 0;
    1499 2422      CLR	R2
    149A 9220 0209 STS	motion_busy,R2
    149C 9508      RET
(0971) }
(0972) 
(0973) 
(0974) void robot_standup(void) //warning: do not call this function while robot is standing or servos will get damaged
(0975) {
(0976) 	motion_busy = 1;
_robot_standup:
    149D E081      LDI	R24,1
    149E 9380 0209 STS	motion_busy,R24
(0977) 	angle_1B(1);
    14A0 E001      LDI	R16,1
    14A1 DD5B      RCALL	_angle_1B
(0978) 	angle_1C(110);
    14A2 E60E      LDI	R16,0x6E
    14A3 DD68      RCALL	_angle_1C
(0979) 	angle_2B(1);
    14A4 E001      LDI	R16,1
    14A5 DD84      RCALL	_angle_2B
(0980) 	angle_2C(110);
    14A6 E60E      LDI	R16,0x6E
    14A7 DD91      RCALL	_angle_2C
(0981) 	angle_3B(1);
    14A8 E001      LDI	R16,1
    14A9 DDAD      RCALL	_angle_3B
(0982) 	angle_3C(110);
    14AA E60E      LDI	R16,0x6E
    14AB DDBA      RCALL	_angle_3C
(0983) 	angle_4B(179);
    14AC EB03      LDI	R16,0xB3
    14AD DDD6      RCALL	_angle_4B
(0984) 	angle_4C(70);
    14AE E406      LDI	R16,0x46
    14AF DDE3      RCALL	_angle_4C
(0985) 	angle_5B(179);
    14B0 EB03      LDI	R16,0xB3
    14B1 DDFF      RCALL	_angle_5B
(0986) 	angle_5C(70);
    14B2 E406      LDI	R16,0x46
    14B3 DE0C      RCALL	_angle_5C
(0987) 	angle_6B(179);
    14B4 EB03      LDI	R16,0xB3
    14B5 DE28      RCALL	_angle_6B
(0988) 	angle_6C(70);
    14B6 E406      LDI	R16,0x46
    14B7 DE35      RCALL	_angle_6C
(0989) 	delay(ONE_SEC);
    14B8 E900      LDI	R16,0x90
    14B9 E011      LDI	R17,1
    14BA D00E      RCALL	_delay
(0990) 	delay(ONE_SEC);
    14BB E900      LDI	R16,0x90
    14BC E011      LDI	R17,1
    14BD D00B      RCALL	_delay
(0991) 	servo_calibration();
    14BE DE3D      RCALL	_servo_calibration
(0992) 	motion_busy = 0;
    14BF 2422      CLR	R2
    14C0 9220 0209 STS	motion_busy,R2
    14C2 9508      RET
(0993) }
(0994) 
(0995) //set buzzer on
(0996) void buzzer_on(void) {
(0997) 	PORTC = PORTC | 0x08;
_buzzer_on:
    14C3 9A43      SBI	0x08,3
    14C4 9508      RET
(0998) }
(0999) 
(1000) //set buzzer off
(1001) void buzzer_off(void) {
(1002) 	PORTC = PORTC & 0xF7;
_buzzer_off:
    14C5 B188      IN	R24,0x08
    14C6 7F87      ANDI	R24,0xF7
    14C7 B988      OUT	0x08,R24
    14C8 9508      RET
(1003) }
(1004) 
(1005) /*
(1006) void remote_control(void) {
(1007) 	unsigned char flag1 = 0;
(1008) 	PORTA = remote_data[4]; //move left joystick up and down and see if there is any change in the bargraph display.
(1009) 	flag1 = 0; //resetting the flag
(1010) 
(1011) 	if ((flag1 == 0) && (motion_busy == 0)) //forward, 1 beep
(1012) 	{
(1013) 		if (remote_data[4] > 0x29) {
(1014) 			flag1 = 1;
(1015) 			forward();
(1016) 			//buzzer_on(); delay(TWO_HUNDRED_FIFTY_MSEC); buzzer_off(); //use it to debug remote onnection
(1017) 		}
(1018) 	}
(1019) 
(1020) 	if ((flag1 == 0) && (motion_busy == 0)) //back, 2 beep
(1021) 	{
(1022) 		if (remote_data[4] < 0x15) {
(1023) 			flag1 = 1;
(1024) 			back();
(1025) 			//buzzer_on(); delay(TWO_HUNDRED_FIFTY_MSEC); buzzer_off();delay(TWO_HUNDRED_FIFTY_MSEC); buzzer_on(); delay(TWO_HUNDRED_FIFTY_MSEC); buzzer_off(); //use it to debug remote onnection
(1026) 		}
(1027) 	}
(1028) 
(1029) 	if ((flag1 == 0) && (motion_busy == 0)) //anticlockwise (left), 3 beep
(1030) 	{
(1031) 		if (remote_data[3] > 0x2D) {
(1032) 			flag1 = 1;
(1033) 			robot_rotate_anticlockwise_7_5();
(1034) 			//buzzer_on(); delay(TWO_HUNDRED_FIFTY_MSEC); buzzer_off();delay(TWO_HUNDRED_FIFTY_MSEC); buzzer_on(); delay(TWO_HUNDRED_FIFTY_MSEC); buzzer_off(); delay(TWO_HUNDRED_FIFTY_MSEC); buzzer_on(); delay(TWO_HUNDRED_FIFTY_MSEC); buzzer_off(); //use it to debug remote onnection
(1035) 		}
(1036) 	}
(1037) 
(1038) 	if ((flag1 == 0) && (motion_busy == 0)) //clockwise (right), 4 beep
(1039) 	{
(1040) 		if (remote_data[3] < 0x19) {
(1041) 			flag1 = 1;
(1042) 			robot_rotate_clockwise_7_5();
(1043) 			//buzzer_on(); delay(TWO_HUNDRED_FIFTY_MSEC); buzzer_off();delay(TWO_HUNDRED_FIFTY_MSEC); buzzer_on(); delay(TWO_HUNDRED_FIFTY_MSEC); buzzer_off(); delay(TWO_HUNDRED_FIFTY_MSEC); buzzer_on(); delay(TWO_HUNDRED_FIFTY_MSEC); buzzer_off();delay(TWO_HUNDRED_FIFTY_MSEC); buzzer_on(); delay(TWO_HUNDRED_FIFTY_MSEC); buzzer_off(); //use it to debug remote onnection
(1044) 		}
(1045) 	}
(1046) 
(1047) 	if ((flag1 == 0) && (motion_busy == 0)) //stop 1 long beep
(1048) 	{
(1049) 		if ((0x19 < remote_data[3] < 0x2D) && (0x15 < remote_data[4] < 0x29)) {
(1050) 			flag1 = 1;
(1051) 			servo_calibration();
(1052) 			//buzzer_on(); delay(TWO_HUNDRED_FIFTY_MSEC); delay(TWO_HUNDRED_FIFTY_MSEC); delay(TWO_HUNDRED_FIFTY_MSEC); buzzer_off(); //use it to debug remote onnection
(1053) 		}
(1054) 	}
(1055) }*/
(1056) 
(1057) 
(1058) void delay(int time) {
(1059) 	delay_count = 0;
_delay:
  time                 --> R16
    14C9 2422      CLR	R2
    14CA 2433      CLR	R3
    14CB 9230 0205 STS	delay_count+1,R3
    14CD 9220 0204 STS	delay_count,R2
(1060) 	while (delay_count < time)
    14CF 9020 0204 LDS	R2,delay_count
    14D1 9030 0205 LDS	R3,delay_count+1
    14D3 1620      CP	R2,R16
    14D4 0631      CPC	R3,R17
    14D5 F3C8      BCS	0x14CF
    14D6 9508      RET
_ADC_Conversion:
  a                    --> R10
  Ch                   --> R16
    14D7 92AA      ST	R10,-Y
(1061) 		;
(1062) }
(1063) 
(1064) unsigned char ADC_Conversion(unsigned char Ch)
(1065) {
(1066) 	unsigned char a;
(1067) 	if(Ch>7)
    14D8 E087      LDI	R24,7
    14D9 1780      CP	R24,R16
    14DA F418      BCC	0x14DE
(1068) 		{
(1069) 		ADCSRB = 0x08;			// select the ch. > 7
    14DB E088      LDI	R24,0x8
    14DC 9380 007B STS	0x007B,R24
(1070) 		}
(1071) 	Ch = Ch & 0x07;  			
    14DE 7007      ANDI	R16,7
(1072) 	ADMUX= 0x20| Ch;	   		//do not disturb the left adjustment
    14DF 2F80      MOV	R24,R16
    14E0 6280      ORI	R24,0x20
    14E1 9380 007C STS	0x007C,R24
(1073) 	ADCSRA = ADCSRA | 0x40;		//Set start conversion bit
    14E3 9180 007A LDS	R24,0x007A
    14E5 6480      ORI	R24,0x40
    14E6 9380 007A STS	0x007A,R24
(1074) 	while((ADCSRA&0x10)==0);	//Wait for ADC conversion to complete
    14E8 9020 007A LDS	R2,0x007A
    14EA FE24      SBRS	R2,4
    14EB CFFC      RJMP	0x14E8
(1075) 	a=ADCH;
    14EC 90A0 0079 LDS	R10,0x0079
(1076) 	ADCSRA = ADCSRA|0x10; 		//clear ADIF (ADC Interrupt Flag) by writing 1 to it
    14EE 9180 007A LDS	R24,0x007A
    14F0 6180      ORI	R24,0x10
    14F1 9380 007A STS	0x007A,R24
(1077) 	ADCSRB = 0x00;
    14F3 2422      CLR	R2
    14F4 9220 007B STS	0x007B,R2
(1078) 	return a;
    14F6 2D0A      MOV	R16,R10
    14F7 90A9      LD	R10,Y+
    14F8 9508      RET
_initializeAngles:
  i                    --> R20
  j                    --> R22
    14F9 940E 1E5A CALL	push_xgsetF000
FILE: C:\Users\ERTSLA~1\Downloads\BUILDI~2\hexapod_basic.c
(0001) /***
(0002) Author : Srijit Dutt
(0003) Date Sun 07 Nov 2010 02:42:38 PM IST 
(0004) 
(0005) hexapod_basic.c : File contains various basic motion functions for the hexapod
(0006) Please include hexapod_basic.h file to call function from this file
(0007) 
(0008) */
(0009) 
(0010) /********************************************************************************
(0011) 
(0012)    Copyright (c) 2010, ERTS Lab IIT Bombay erts@cse.iitb.ac.in               -*- c -*-
(0013)    All rights reserved.
(0014) 
(0015)    Redistribution and use in source and binary forms, with or without
(0016)    modification, are permitted provided that the following conditions are met:
(0017) 
(0018)    * Redistributions of source code must retain the above copyright
(0019)      notice, this list of conditions and the following disclaimer.
(0020) 
(0021)    * Redistributions in binary form must reproduce the above copyright
(0022)      notice, this list of conditions and the following disclaimer in
(0023)      the documentation and/or other materials provided with the
(0024)      distribution.
(0025) 
(0026)    * Neither the name of the copyright holders nor the names of
(0027)      contributors may be used to endorse or promote products derived
(0028)      from this software without specific prior written permission.
(0029) 
(0030)    * Source code can be used for academic purpose. 
(0031) 	 For commercial use permission form the author needs to be taken.
(0032) 
(0033)   THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
(0034)   AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
(0035)   IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
(0036)   ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
(0037)   LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
(0038)   CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
(0039)   SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
(0040)   INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
(0041)   CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
(0042)   ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
(0043)   POSSIBILITY OF SUCH DAMAGE. 
(0044) 
(0045)   Software released under Creative Commence cc by-nc-sa licence.
(0046)   For legal information refer to: 
(0047)   http://creativecommons.org/licenses/by-nc-sa/3.0/legalcode
(0048) 
(0049) ********************************************************************************/
(0050) 
(0051) 
(0052) #include "hexapod_macro.h"
(0053) #include "hexapod.h"
(0054) 
(0055) 
(0056) 
(0057) unsigned char angleArr[6][3];//!< The angle of the servos
(0058) static unsigned char dirMirror = DIR_MIRROR_LEG_1_2;
(0059) 
(0060) /**
(0061) Initialize the servo angles
(0062) */
(0063) void initializeAngles() {
(0064) 	 int i,j;
(0065) 	 
(0066) 	 for (i=0; i < NO_OF_LEGS; i++) {
    14FB 2744      CLR	R20
    14FC 2755      CLR	R21
(0067) 	 	 for(j=0; j < NO_OF_SERVOS_IN_EACH_LEG; j++) {
    14FD 2766      CLR	R22
    14FE 2777      CLR	R23
(0068) 		 		  angleArr[i][j] = INITIAL_ANGLE;
    14FF E003      LDI	R16,3
    1500 E010      LDI	R17,0
    1501 019A      MOVW	R18,R20
    1502 940E 1E21 CALL	empy16s
    1504 0118      MOVW	R2,R16
    1505 E487      LDI	R24,0x47
    1506 E092      LDI	R25,2
    1507 0E28      ADD	R2,R24
    1508 1E39      ADC	R3,R25
    1509 01FB      MOVW	R30,R22
    150A 0DE2      ADD	R30,R2
    150B 1DF3      ADC	R31,R3
    150C E58A      LDI	R24,0x5A
    150D 8380      STD	Z+0,R24
    150E 5F6F      SUBI	R22,0xFF
    150F 4F7F      SBCI	R23,0xFF
    1510 3063      CPI	R22,3
    1511 E0E0      LDI	R30,0
    1512 077E      CPC	R23,R30
    1513 F35C      BLT	0x14FF
    1514 5F4F      SUBI	R20,0xFF
    1515 4F5F      SBCI	R21,0xFF
    1516 3046      CPI	R20,6
    1517 E0E0      LDI	R30,0
    1518 075E      CPC	R21,R30
    1519 F31C      BLT	0x14FD
    151A 940C 1E5F JMP	pop_xgsetF000
_angle:
  angle                --> R10
  motor                --> R20
  arm                  --> R12
    151C 940E 1E72 CALL	push_xgsetF03C
    151E 2F42      MOV	R20,R18
    151F 2EC0      MOV	R12,R16
    1520 9721      SBIW	R28,1
    1521 84A9      LDD	R10,Y+9
(0069) 		 }
(0070) 	 }
(0071) }
(0072) 
(0073) /**
(0074) * Set the servo angle
(0075) */
(0076) void setAngle(unsigned char arm, unsigned char motor, unsigned char angle);
(0077) 
(0078) /**
(0079) Get the servo angle
(0080) */
(0081) unsigned char getAngle(unsigned char arm, unsigned char motor);
(0082) 
(0083) /**
(0084) Sets a specific servo to a angle
(0085) 
(0086) @param arm : The arm of the hexapod
(0087) @param motor :  The motor of the hexapod
(0088) @param angle : The angle to set the servo to
(0089) */
(0090) void angle(unsigned char arm, unsigned char motor, unsigned char angle) {
(0091) 	setAngle(arm, motor, angle); 
    1522 82A8      STD	Y+0,R10
    1523 2F24      MOV	R18,R20
    1524 2D0C      MOV	R16,R12
    1525 D10E      RCALL	_setAngle
(0092) 	switch (arm) {
    1526 2D6C      MOV	R22,R12
    1527 2777      CLR	R23
    1528 3061      CPI	R22,1
    1529 E0E0      LDI	R30,0
    152A 077E      CPC	R23,R30
    152B F0C9      BEQ	0x1545
    152C 3062      CPI	R22,2
    152D E0E0      LDI	R30,0
    152E 077E      CPC	R23,R30
    152F F141      BEQ	0x1558
    1530 3063      CPI	R22,3
    1531 E0E0      LDI	R30,0
    1532 077E      CPC	R23,R30
    1533 F409      BNE	0x1535
    1534 C036      RJMP	0x156B
    1535 3064      CPI	R22,4
    1536 E0E0      LDI	R30,0
    1537 077E      CPC	R23,R30
    1538 F409      BNE	0x153A
    1539 C044      RJMP	0x157E
    153A 3065      CPI	R22,5
    153B E0E0      LDI	R30,0
    153C 077E      CPC	R23,R30
    153D F409      BNE	0x153F
    153E C05A      RJMP	0x1599
    153F 3066      CPI	R22,6
    1540 E0E0      LDI	R30,0
    1541 077E      CPC	R23,R30
    1542 F409      BNE	0x1544
    1543 C06F      RJMP	0x15B3
    1544 C087      RJMP	0x15CC
(0093) 	case 1:
(0094) 		if (motor == MOTOR_A)
    1545 3441      CPI	R20,0x41
    1546 F421      BNE	0x154B
(0095) 			angle_1A(angle);
    1547 2D0A      MOV	R16,R10
    1548 940E 11EE CALL	_angle_1A
    154A C081      RJMP	0x15CC
(0096) 		else if (motor == MOTOR_B)
    154B 3442      CPI	R20,0x42
    154C F421      BNE	0x1551
(0097) 			angle_1B(angle);
    154D 2D0A      MOV	R16,R10
    154E 940E 11FD CALL	_angle_1B
    1550 C07B      RJMP	0x15CC
(0098) 		else if (motor == MOTOR_C)
    1551 3443      CPI	R20,0x43
    1552 F009      BEQ	0x1554
    1553 C078      RJMP	0x15CC
(0099) 			angle_1C(angle);
    1554 2D0A      MOV	R16,R10
    1555 940E 120C CALL	_angle_1C
(0100) 		break;
    1557 C074      RJMP	0x15CC
(0101) 	case 2:
(0102) 		if (motor == MOTOR_A)
    1558 3441      CPI	R20,0x41
    1559 F421      BNE	0x155E
(0103) 			angle_2A(angle);
    155A 2D0A      MOV	R16,R10
    155B 940E 121B CALL	_angle_2A
    155D C06E      RJMP	0x15CC
(0104) 		else if (motor == MOTOR_B)
    155E 3442      CPI	R20,0x42
    155F F421      BNE	0x1564
(0105) 			angle_2B(angle);
    1560 2D0A      MOV	R16,R10
    1561 940E 122A CALL	_angle_2B
    1563 C068      RJMP	0x15CC
(0106) 		else if (motor == MOTOR_C)
    1564 3443      CPI	R20,0x43
    1565 F009      BEQ	0x1567
    1566 C065      RJMP	0x15CC
(0107) 			angle_2C(angle);
    1567 2D0A      MOV	R16,R10
    1568 940E 1239 CALL	_angle_2C
(0108) 		break;
    156A C061      RJMP	0x15CC
(0109) 	case 3:
(0110) 		if (motor == MOTOR_A)
    156B 3441      CPI	R20,0x41
    156C F421      BNE	0x1571
(0111) 			angle_3A(angle);
    156D 2D0A      MOV	R16,R10
    156E 940E 1248 CALL	_angle_3A
    1570 C05B      RJMP	0x15CC
(0112) 		else if (motor == MOTOR_B)
    1571 3442      CPI	R20,0x42
    1572 F421      BNE	0x1577
(0113) 			angle_3B(angle);
    1573 2D0A      MOV	R16,R10
    1574 940E 1257 CALL	_angle_3B
    1576 C055      RJMP	0x15CC
(0114) 		else if (motor == MOTOR_C)
    1577 3443      CPI	R20,0x43
    1578 F009      BEQ	0x157A
    1579 C052      RJMP	0x15CC
(0115) 			angle_3C(angle);
    157A 2D0A      MOV	R16,R10
    157B 940E 1266 CALL	_angle_3C
(0116) 		break;
    157D C04E      RJMP	0x15CC
(0117) 	case 4:
(0118) 		if (motor == MOTOR_A)
    157E 3441      CPI	R20,0x41
    157F F421      BNE	0x1584
(0119) 			angle_4A(angle);
    1580 2D0A      MOV	R16,R10
    1581 940E 1275 CALL	_angle_4A
    1583 C048      RJMP	0x15CC
(0120) 		else if (motor == MOTOR_B)
    1584 3442      CPI	R20,0x42
    1585 F441      BNE	0x158E
(0121) 			angle_4B(180 - angle);
    1586 2C2A      MOV	R2,R10
    1587 2433      CLR	R3
    1588 EB04      LDI	R16,0xB4
    1589 1902      SUB	R16,R2
    158A 0913      SBC	R17,R3
    158B 940E 1284 CALL	_angle_4B
    158D C03E      RJMP	0x15CC
(0122) 		else if (motor == MOTOR_C)
    158E 3443      CPI	R20,0x43
    158F F009      BEQ	0x1591
    1590 C03B      RJMP	0x15CC
(0123) 			angle_4C(180 - angle);
    1591 2C2A      MOV	R2,R10
    1592 2433      CLR	R3
    1593 EB04      LDI	R16,0xB4
    1594 1902      SUB	R16,R2
    1595 0913      SBC	R17,R3
    1596 940E 1293 CALL	_angle_4C
(0124) 		break;
    1598 C033      RJMP	0x15CC
(0125) 	case 5:
(0126) 		if (motor == MOTOR_A)
    1599 3441      CPI	R20,0x41
    159A F421      BNE	0x159F
(0127) 			angle_5A(angle);
    159B 2D0A      MOV	R16,R10
    159C 940E 12A2 CALL	_angle_5A
    159E C02D      RJMP	0x15CC
(0128) 		else if (motor == MOTOR_B)
    159F 3442      CPI	R20,0x42
    15A0 F441      BNE	0x15A9
(0129) 			angle_5B(180 - angle);
    15A1 2C2A      MOV	R2,R10
    15A2 2433      CLR	R3
    15A3 EB04      LDI	R16,0xB4
    15A4 1902      SUB	R16,R2
    15A5 0913      SBC	R17,R3
    15A6 940E 12B1 CALL	_angle_5B
    15A8 C023      RJMP	0x15CC
(0130) 		else if (motor == MOTOR_C)
    15A9 3443      CPI	R20,0x43
    15AA F509      BNE	0x15CC
(0131) 			angle_5C(180 - angle);
    15AB 2C2A      MOV	R2,R10
    15AC 2433      CLR	R3
    15AD EB04      LDI	R16,0xB4
    15AE 1902      SUB	R16,R2
    15AF 0913      SBC	R17,R3
    15B0 940E 12C0 CALL	_angle_5C
(0132) 		break;
    15B2 C019      RJMP	0x15CC
(0133) 	case 6:
(0134) 		if (motor == MOTOR_A)
    15B3 3441      CPI	R20,0x41
    15B4 F421      BNE	0x15B9
(0135) 			angle_6A(angle);
    15B5 2D0A      MOV	R16,R10
    15B6 940E 12CF CALL	_angle_6A
    15B8 C013      RJMP	0x15CC
(0136) 		else if (motor == MOTOR_B)
    15B9 3442      CPI	R20,0x42
    15BA F441      BNE	0x15C3
(0137) 			angle_6B(180 - angle);
    15BB 2C2A      MOV	R2,R10
    15BC 2433      CLR	R3
    15BD EB04      LDI	R16,0xB4
    15BE 1902      SUB	R16,R2
    15BF 0913      SBC	R17,R3
    15C0 940E 12DE CALL	_angle_6B
    15C2 C009      RJMP	0x15CC
(0138) 		else if (motor == MOTOR_C)
    15C3 3443      CPI	R20,0x43
    15C4 F439      BNE	0x15CC
(0139) 			angle_6C(180 - angle);
    15C5 2C2A      MOV	R2,R10
    15C6 2433      CLR	R3
    15C7 EB04      LDI	R16,0xB4
    15C8 1902      SUB	R16,R2
    15C9 0913      SBC	R17,R3
    15CA 940E 12ED CALL	_angle_6C
(0140) 		break;
    15CC 9621      ADIW	R28,1
    15CD 940C 1E7B JMP	pop_xgsetF03C
_angle_XA:
  angle                --> R10
    15CF 92AA      ST	R10,-Y
    15D0 2EA0      MOV	R10,R16
(0141) 	}
(0142) }
(0143) 
(0144) 
(0145) /**
(0146) Sets the angle of all the MOTOR_XA servo
(0147) @param angle : The angle to be set
(0148) */
(0149) void angle_XA(unsigned char angle) {
(0150) 	angle_1A(angle);
    15D1 2D0A      MOV	R16,R10
    15D2 940E 11EE CALL	_angle_1A
(0151) 	angle_2A(angle);
    15D4 2D0A      MOV	R16,R10
    15D5 940E 121B CALL	_angle_2A
(0152) 	angle_3A(angle);
    15D7 2D0A      MOV	R16,R10
    15D8 940E 1248 CALL	_angle_3A
(0153) 	angle_4A(angle);
    15DA 2D0A      MOV	R16,R10
    15DB 940E 1275 CALL	_angle_4A
(0154) 	angle_5A(angle);
    15DD 2D0A      MOV	R16,R10
    15DE 940E 12A2 CALL	_angle_5A
(0155) 	angle_6A(angle);
    15E0 2D0A      MOV	R16,R10
    15E1 940E 12CF CALL	_angle_6A
    15E3 90A9      LD	R10,Y+
    15E4 9508      RET
_angle_XB:
  angle                --> R10
    15E5 92AA      ST	R10,-Y
    15E6 2EA0      MOV	R10,R16
(0156) }
(0157) 
(0158) /**
(0159) Sets the angle of all the MOTOR_XB servo
(0160) @param angle : The angle to be set
(0161) */
(0162) void angle_XB(unsigned char angle) {
(0163) 	angle_1B(angle);
    15E7 2D0A      MOV	R16,R10
    15E8 940E 11FD CALL	_angle_1B
(0164) 	angle_2B(angle);
    15EA 2D0A      MOV	R16,R10
    15EB 940E 122A CALL	_angle_2B
(0165) 	angle_3B(angle);
    15ED 2D0A      MOV	R16,R10
    15EE 940E 1257 CALL	_angle_3B
(0166) 	angle_4B(180 - angle);
    15F0 2C2A      MOV	R2,R10
    15F1 2433      CLR	R3
    15F2 EB04      LDI	R16,0xB4
    15F3 1902      SUB	R16,R2
    15F4 0913      SBC	R17,R3
    15F5 940E 1284 CALL	_angle_4B
(0167) 	angle_5B(180 - angle);
    15F7 2C2A      MOV	R2,R10
    15F8 2433      CLR	R3
    15F9 EB04      LDI	R16,0xB4
    15FA 1902      SUB	R16,R2
    15FB 0913      SBC	R17,R3
    15FC 940E 12B1 CALL	_angle_5B
(0168) 	angle_6B(180 - angle);
    15FE 2C2A      MOV	R2,R10
    15FF 2433      CLR	R3
    1600 EB04      LDI	R16,0xB4
    1601 1902      SUB	R16,R2
    1602 0913      SBC	R17,R3
    1603 940E 12DE CALL	_angle_6B
    1605 90A9      LD	R10,Y+
    1606 9508      RET
_angle_XC:
  angle                --> R10
    1607 92AA      ST	R10,-Y
    1608 2EA0      MOV	R10,R16
(0169) }
(0170) 
(0171) 
(0172) /**
(0173) Sets the angle of all the MOTOR_XC servo
(0174) @param angle : The angle to be set
(0175) */
(0176) void angle_XC(unsigned char angle) {
(0177) 	angle_1C(angle);
    1609 2D0A      MOV	R16,R10
    160A 940E 120C CALL	_angle_1C
(0178) 	angle_2C(angle);
    160C 2D0A      MOV	R16,R10
    160D 940E 1239 CALL	_angle_2C
(0179) 	angle_3C(angle);
    160F 2D0A      MOV	R16,R10
    1610 940E 1266 CALL	_angle_3C
(0180) 	angle_4C(180 - angle);
    1612 2C2A      MOV	R2,R10
    1613 2433      CLR	R3
    1614 EB04      LDI	R16,0xB4
    1615 1902      SUB	R16,R2
    1616 0913      SBC	R17,R3
    1617 940E 1293 CALL	_angle_4C
(0181) 	angle_5C(180 - angle);
    1619 2C2A      MOV	R2,R10
    161A 2433      CLR	R3
    161B EB04      LDI	R16,0xB4
    161C 1902      SUB	R16,R2
    161D 0913      SBC	R17,R3
    161E 940E 12C0 CALL	_angle_5C
(0182) 	angle_6C(180 - angle);
    1620 2C2A      MOV	R2,R10
    1621 2433      CLR	R3
    1622 EB04      LDI	R16,0xB4
    1623 1902      SUB	R16,R2
    1624 0913      SBC	R17,R3
    1625 940E 12ED CALL	_angle_6C
    1627 90A9      LD	R10,Y+
    1628 9508      RET
_swap:
  t                    --> R10
  b                    --> R18
  a                    --> R16
    1629 92AA      ST	R10,-Y
(0183) }
(0184) 
(0185) 
(0186) 
(0187) /**
(0188) Swaps two unsigned char
(0189) */
(0190) void swap(unsigned char *a, unsigned char *b) {
(0191) 	 unsigned char t = *a;
    162A 01F8      MOVW	R30,R16
    162B 80A0      LDD	R10,Z+0
(0192) 	 *a = *b;
    162C 01F9      MOVW	R30,R18
    162D 8020      LDD	R2,Z+0
    162E 01F8      MOVW	R30,R16
    162F 8220      STD	Z+0,R2
(0193) 	 *b = t;
    1630 01F9      MOVW	R30,R18
    1631 82A0      STD	Z+0,R10
    1632 90A9      LD	R10,Y+
    1633 9508      RET
(0194) }
(0195) 
(0196) void setAngle(unsigned char arm, unsigned char motor, unsigned char angle) {
(0197) 	 angleArr[arm][motor - 'A'] = angle;
_setAngle:
  angle                --> Y,+0
  motor                --> R18
  arm                  --> R16
    1634 E083      LDI	R24,3
    1635 9F80      MUL	R24,R16
    1636 0110      MOVW	R2,R0
    1637 E487      LDI	R24,0x47
    1638 E092      LDI	R25,2
    1639 0E28      ADD	R2,R24
    163A 1E39      ADC	R3,R25
    163B 2FE2      MOV	R30,R18
    163C 27FF      CLR	R31
    163D 54E1      SUBI	R30,0x41
    163E 40F0      SBCI	R31,0
    163F 0DE2      ADD	R30,R2
    1640 1DF3      ADC	R31,R3
    1641 8008      LDD	R0,Y+0
    1642 8200      STD	Z+0,R0
    1643 9508      RET
(0198) }
(0199) 
(0200) unsigned char getAngle(unsigned char arm, unsigned char motor) {
(0201) 	 return angleArr[arm][motor - 'A'];
_getAngle:
  motor                --> R18
  arm                  --> R16
    1644 E083      LDI	R24,3
    1645 9F80      MUL	R24,R16
    1646 0110      MOVW	R2,R0
    1647 E487      LDI	R24,0x47
    1648 E092      LDI	R25,2
    1649 0E28      ADD	R2,R24
    164A 1E39      ADC	R3,R25
    164B 2FE2      MOV	R30,R18
    164C 27FF      CLR	R31
    164D 54E1      SUBI	R30,0x41
    164E 40F0      SBCI	R31,0
    164F 0DE2      ADD	R30,R2
    1650 1DF3      ADC	R31,R3
    1651 8100      LDD	R16,Z+0
    1652 9508      RET
(0202) }
(0203) 
(0204) 
(0205) /**
(0206) Flips the state of the buzzer
(0207) */
(0208) void buzzer_on_off() {
(0209)      static int flag = 1;
(0210) 	 if(flag) {
_buzzer_on_off:
    1653 9020 020B LDS	R2,flag
    1655 9030 020C LDS	R3,flag+1
    1657 2022      TST	R2
    1658 F411      BNE	0x165B
    1659 2033      TST	R3
    165A F049      BEQ	0x1664
(0211) 	     buzzer_on();
    165B 940E 14C3 CALL	_buzzer_on
(0212) 	 	 flag = 0;
    165D 2422      CLR	R2
    165E 2433      CLR	R3
    165F 9230 020C STS	flag+1,R3
    1661 9220 020B STS	flag,R2
(0213) 	 }else {
    1663 C008      RJMP	0x166C
(0214) 	     buzzer_off();
    1664 940E 14C5 CALL	_buzzer_off
(0215) 	     flag = 1;  
    1666 E081      LDI	R24,1
    1667 E090      LDI	R25,0
    1668 9390 020C STS	flag+1,R25
    166A 9380 020B STS	flag,R24
(0216) 	 }
    166C 9508      RET
_angle_change:
  angle1               --> R20
  change               --> R22
  motor                --> R12
  arm                  --> R10
    166D 940E 1E45 CALL	push_xgsetF0FC
    166F 2EC2      MOV	R12,R18
    1670 2EA0      MOV	R10,R16
    1671 9721      SBIW	R28,1
    1672 856B      LDD	R22,Y+11
(0217) }
(0218) 
(0219) /**
(0220) Changes the angle of a servo by change
(0221) Problem with this routine
(0222) */
(0223) void angle_change(unsigned char arm, unsigned char motor, char change) {
(0224)     
(0225) 	unsigned char angle1;
(0226) 	
(0227) 	 if(change + getAngle(arm, motor) < DEGREE_MIN || change + getAngle(arm, motor)  > 240) {
    1673 2D2C      MOV	R18,R12
    1674 2D0A      MOV	R16,R10
    1675 DFCE      RCALL	_getAngle
    1676 2F86      MOV	R24,R22
    1677 0F80      ADD	R24,R16
    1678 3080      CPI	R24,0
    1679 F040      BCS	0x1682
    167A 2D2C      MOV	R18,R12
    167B 2D0A      MOV	R16,R10
    167C DFC7      RCALL	_getAngle
    167D 2E26      MOV	R2,R22
    167E 0E20      ADD	R2,R16
    167F EF80      LDI	R24,0xF0
    1680 1582      CP	R24,R2
    1681 F410      BCC	0x1684
(0228) 	 		   angle1 = DEGREE_MIN;
    1682 2744      CLR	R20
(0229) 			   //buzzer_on();
(0230) 	} else if(change + getAngle(arm, motor)  > DEGREE_MAX) {
    1683 C011      RJMP	0x1695
    1684 2D2C      MOV	R18,R12
    1685 2D0A      MOV	R16,R10
    1686 DFBD      RCALL	_getAngle
    1687 2EE0      MOV	R14,R16
    1688 2E26      MOV	R2,R22
    1689 0E20      ADD	R2,R16
    168A EB84      LDI	R24,0xB4
    168B 1582      CP	R24,R2
    168C F410      BCC	0x168F
(0231) 	           angle1 = DEGREE_MAX;
    168D EB44      LDI	R20,0xB4
(0232) 			   //buzzer_on();
(0233) 	} else {
    168E C006      RJMP	0x1695
(0234) 	 		   angle1 = change + getAngle(arm, motor);
    168F 2D2C      MOV	R18,R12
    1690 2D0A      MOV	R16,R10
    1691 DFB2      RCALL	_getAngle
    1692 2EE0      MOV	R14,R16
    1693 2F46      MOV	R20,R22
    1694 0F40      ADD	R20,R16
(0235) 	}
(0236) 	angle(arm, motor, angle1);
    1695 8348      STD	Y+0,R20
    1696 2D2C      MOV	R18,R12
    1697 2D0A      MOV	R16,R10
    1698 DE83      RCALL	_angle
    1699 9621      ADIW	R28,1
    169A 940C 1E3A JMP	pop_xgsetF0FC
(0237) 	
(0238) }
(0239) 
(0240) 
(0241) /**
(0242) The sets the direction for the angleMirror function
(0243) Used to move two legs with the same angle
(0244) */
(0245) void setMirrorDir(unsigned char dir) {
(0246) 	 dirMirror = dir;
_setMirrorDir:
  dir                  --> R16
    169C 9300 020A STS	hexapod_basic.c:dirMirror,R16
    169E 9508      RET
(0247) }
(0248) 
(0249) /**
(0250) Returns the Mirror diricetion
(0251) */
(0252) unsigned char getMirrorDir(void ) {
(0253) 	 return dirMirror;
_getMirrorDir:
    169F 9100 020A LDS	R16,hexapod_basic.c:dirMirror
    16A1 9508      RET
_getMirrorArm:
  arr_mirror           --> Y,+0
  arm                  --> R10
    16A2 92AA      ST	R10,-Y
    16A3 2EA0      MOV	R10,R16
    16A4 97A4      SBIW	R28,0x24
(0254) }
(0255) 
(0256) /**
(0257) Returns the arm which mirrors the arm according to the dirMirror
(0258) */
(0259) unsigned char getMirrorArm(unsigned char arm) {
(0260) 		 int arr_mirror[3][6] =  {{LEG_2, LEG_1, LEG_4, LEG_3, LEG_6, LEG_5}, 
    16A5 EA8A      LDI	R24,0xAA
    16A6 E091      LDI	R25,1
    16A7 01FE      MOVW	R30,R28
    16A8 E204      LDI	R16,0x24
    16A9 E010      LDI	R17,0
    16AA 93FA      ST	R31,-Y
    16AB 93EA      ST	R30,-Y
    16AC 939A      ST	R25,-Y
    16AD 938A      ST	R24,-Y
    16AE 940E 1E8D CALL	asgncblkx
(0261) 		 	 				   	{LEG_6, LEG_3, LEG_2, LEG_5, LEG_4, LEG_1}, 
(0262) 								{LEG_4, LEG_5, LEG_6, LEG_1, LEG_2, LEG_3}};
(0263) 		 return arr_mirror[getMirrorDir()][arm - 1];
    16B0 DFEE      RCALL	_getMirrorDir
    16B1 E08C      LDI	R24,0xC
    16B2 9F80      MUL	R24,R16
    16B3 0110      MOVW	R2,R0
    16B4 01CE      MOVW	R24,R28
    16B5 0E28      ADD	R2,R24
    16B6 1E39      ADC	R3,R25
    16B7 2DEA      MOV	R30,R10
    16B8 27FF      CLR	R31
    16B9 9731      SBIW	R30,1
    16BA 0FEE      LSL	R30
    16BB 1FFF      ROL	R31
    16BC 0DE2      ADD	R30,R2
    16BD 1DF3      ADC	R31,R3
    16BE 8100      LDD	R16,Z+0
    16BF 96A4      ADIW	R28,0x24
    16C0 90A9      LD	R10,Y+
    16C1 9508      RET
_angleMirror:
  arm_mirror           --> R10
  angleSet             --> R12
  motor                --> R20
  arm                  --> R14
    16C2 940E 1E47 CALL	push_xgset30FC
    16C4 2F42      MOV	R20,R18
    16C5 2EE0      MOV	R14,R16
    16C6 9721      SBIW	R28,1
    16C7 84C9      LDD	R12,Y+9
(0264) }
(0265) 
(0266) 
(0267) /**
(0268) Sets the angle of the arm servo and its Mirror arm to the angle angleSet
(0269) @param arm : Arm of the hexapod
(0270) @param motor : The motor of the hexapod
(0271) @param angleSet :  The angle to be set 
(0272) */
(0273) void angleMirror(unsigned char arm, unsigned char motor, unsigned char angleSet) {
(0274) 	 unsigned char arm_mirror = getMirrorArm(arm);
    16C8 2D0E      MOV	R16,R14
    16C9 DFD8      RCALL	_getMirrorArm
    16CA 2EA0      MOV	R10,R16
(0275) 	 angle(arm, motor, angleSet);
    16CB 82C8      STD	Y+0,R12
    16CC 2F24      MOV	R18,R20
    16CD 2D0E      MOV	R16,R14
    16CE DE4D      RCALL	_angle
(0276) 	 if(motor == MOTOR_A)
    16CF 3441      CPI	R20,0x41
    16D0 F459      BNE	0x16DC
(0277) 	 	 angle(arm_mirror, motor, 180 - angleSet);
    16D1 2C2C      MOV	R2,R12
    16D2 2433      CLR	R3
    16D3 EB84      LDI	R24,0xB4
    16D4 E090      LDI	R25,0
    16D5 1982      SUB	R24,R2
    16D6 0993      SBC	R25,R3
    16D7 8388      STD	Y+0,R24
    16D8 2F24      MOV	R18,R20
    16D9 2D0A      MOV	R16,R10
    16DA DE41      RCALL	_angle
    16DB C004      RJMP	0x16E0
(0278) 	 else
(0279) 	 	 angle(arm_mirror, motor, angleSet);
    16DC 82C8      STD	Y+0,R12
    16DD 2F24      MOV	R18,R20
    16DE 2D0A      MOV	R16,R10
    16DF DE3C      RCALL	_angle
    16E0 9621      ADIW	R28,1
    16E1 940C 1E31 JMP	pop_xgset30FC
_angleMirrorChange:
  arm_mirror           --> R10
  angleChange          --> R14
  motor                --> R12
  arm                  --> R20
    16E3 940E 1E47 CALL	push_xgset30FC
    16E5 2EC2      MOV	R12,R18
    16E6 2F40      MOV	R20,R16
    16E7 9721      SBIW	R28,1
    16E8 84E9      LDD	R14,Y+9
(0280) 	 	  		  
(0281) }
(0282) 
(0283) /**
(0284) Changes angle of the arm servo and its Mirror arm by the angle angleChange
(0285) @param arm : Arm of the hexapod
(0286) @param motor : The motor of the hexapod
(0287) @param angleChange :  The angle to change by 
(0288) */
(0289) void angleMirrorChange(unsigned char arm, unsigned char motor, char angleChange) {
(0290) 	 unsigned char arm_mirror = getMirrorArm(arm);
    16E9 2F04      MOV	R16,R20
    16EA DFB7      RCALL	_getMirrorArm
    16EB 2EA0      MOV	R10,R16
(0291) 	 angle_change(arm, motor, angleChange);
    16EC 82E8      STD	Y+0,R14
    16ED 2D2C      MOV	R18,R12
    16EE 2F04      MOV	R16,R20
    16EF DF7D      RCALL	_angle_change
(0292) 	 angle_change(arm_mirror, motor, angleChange);
    16F0 82E8      STD	Y+0,R14
    16F1 2D2C      MOV	R18,R12
    16F2 2D0A      MOV	R16,R10
    16F3 DF79      RCALL	_angle_change
    16F4 9621      ADIW	R28,1
    16F5 940C 1E31 JMP	pop_xgset30FC
_pose:
  dir6                 --> R10
  dir5                 --> Y,+17
  spread_out           --> R12
  step_side            --> R14
  lift                 --> R22
  legs_clock           --> Y,+8
  legs_anticlock       --> Y,+1
  dir4                 --> Y,+16
  dir3                 --> Y,+15
  i                    --> R22
  delay_time           --> R20
  steps                --> Y,+32
  dir2                 --> Y,+30
  dir1                 --> Y,+28
    16F7 940E 1DB6 CALL	push_arg4
    16F9 940E 1E45 CALL	push_xgsetF0FC
    16FB 9762      SBIW	R28,0x12
FILE: C:\Users\ERTSLA~1\Downloads\BUILDI~2\hexapod_motions.c
(0001) /***
(0002) @author  Srijit Dutt
(0003) Date Sun 07 Nov 2010 02:42:38 PM IST 
(0004) 
(0005) ICCAVR
(0006) 
(0007) hexapod_motions.c : File contains various advanced motion functions for the hexapod
(0008) Please include hexapod_motions.h file to call function from this file
(0009) 
(0010) */
(0011) 
(0012) 
(0013) 
(0014) /*********************************************************************************
(0015) 
(0016)    Copyright (c) 2010, ERTS Lab IIT Bombay erts@cse.iitb.ac.in               -*- c -*-
(0017)    All rights reserved.
(0018) 
(0019)    Redistribution and use in source and binary forms, with or without
(0020)    modification, are permitted provided that the following conditions are met:
(0021) 
(0022)    * Redistributions of source code must retain the above copyright
(0023)      notice, this list of conditions and the following disclaimer.
(0024) 
(0025)    * Redistributions in binary form must reproduce the above copyright
(0026)      notice, this list of conditions and the following disclaimer in
(0027)      the documentation and/or other materials provided with the
(0028)      distribution.
(0029) 
(0030)    * Neither the name of the copyright holders nor the names of
(0031)      contributors may be used to endorse or promote products derived
(0032)      from this software without specific prior written permission.
(0033) 
(0034)    * Source code can be used for academic purpose. 
(0035) 	 For commercial use permission form the author needs to be taken.
(0036) 
(0037)   THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
(0038)   AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
(0039)   IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
(0040)   ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
(0041)   LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
(0042)   CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
(0043)   SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
(0044)   INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
(0045)   CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
(0046)   ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
(0047)   POSSIBILITY OF SUCH DAMAGE. 
(0048) 
(0049)   Software released under Creative Commence cc by-nc-sa licence.
(0050)   For legal information refer to: 
(0051)   http://creativecommons.org/licenses/by-nc-sa/3.0/legalcode
(0052) 
(0053) ********************************************************************************/
(0054) 
(0055) 
(0056) #include "hexapod_macro.h"
(0057) #include "hexapod_basic.h"
(0058) #include "hexapod.h"
(0059) 
(0060) 
(0061) /**
(0062) The hexapod stands on 4 legs with two legs in the air
(0063) and moves its legs
(0064) @param dir1 : The first of the two legs to be in air 
(0065) @param dir2 : The second leg to be in air 
(0066) The legs should be consecutive
(0067) @param steps : The number of time the legs in the air are moved
(0068) */
(0069) void pose(unsigned char dir1, unsigned char dir2, int steps) {
(0070) 	 
(0071) 	 unsigned char legs_anticlock[] = {0,2,3,6,1,4,5};
    16FC EC8E      LDI	R24,0xCE
    16FD E091      LDI	R25,1
    16FE 01FE      MOVW	R30,R28
    16FF 9631      ADIW	R30,1
    1700 E007      LDI	R16,7
    1701 E010      LDI	R17,0
    1702 93FA      ST	R31,-Y
    1703 93EA      ST	R30,-Y
    1704 939A      ST	R25,-Y
    1705 938A      ST	R24,-Y
    1706 940E 1E8D CALL	asgncblkx
(0072) 	 unsigned char legs_clock[] = {0,4,1,2,5,6,3}; 
    1708 ED85      LDI	R24,0xD5
    1709 E091      LDI	R25,1
    170A 01FE      MOVW	R30,R28
    170B 9638      ADIW	R30,0x8
    170C E007      LDI	R16,7
    170D E010      LDI	R17,0
    170E 93FA      ST	R31,-Y
    170F 93EA      ST	R30,-Y
    1710 939A      ST	R25,-Y
    1711 938A      ST	R24,-Y
    1712 940E 1E8D CALL	asgncblkx
(0073) 	 unsigned char dir3 = legs_anticlock[dir2];
    1714 01CE      MOVW	R24,R28
    1715 9601      ADIW	R24,1
    1716 8DEE      LDD	R30,Y+30
    1717 27FF      CLR	R31
    1718 0FE8      ADD	R30,R24
    1719 1FF9      ADC	R31,R25
    171A 8020      LDD	R2,Z+0
    171B 862F      STD	Y+15,R2
(0074) 	 unsigned char dir4 = legs_clock[dir1];
    171C 01CE      MOVW	R24,R28
    171D 9608      ADIW	R24,0x8
    171E 8DEC      LDD	R30,Y+28
    171F 27FF      CLR	R31
    1720 0FE8      ADD	R30,R24
    1721 1FF9      ADC	R31,R25
    1722 8020      LDD	R2,Z+0
    1723 8A28      STD	Y+16,R2
(0075) 	 unsigned char dir5 = legs_clock[dir4];
    1724 01CE      MOVW	R24,R28
    1725 9608      ADIW	R24,0x8
    1726 2DE2      MOV	R30,R2
    1727 27FF      CLR	R31
    1728 0FE8      ADD	R30,R24
    1729 1FF9      ADC	R31,R25
    172A 8020      LDD	R2,Z+0
    172B 8A29      STD	Y+17,R2
(0076) 	 unsigned char dir6= legs_anticlock[dir3];
    172C 01CE      MOVW	R24,R28
    172D 9601      ADIW	R24,1
    172E 85EF      LDD	R30,Y+15
    172F 27FF      CLR	R31
    1730 0FE8      ADD	R30,R24
    1731 1FF9      ADC	R31,R25
    1732 80A0      LDD	R10,Z+0
(0077) 	 
(0078) 	 unsigned char lift = 40;
    1733 E268      LDI	R22,0x28
(0079) 	 unsigned char step_side = 50;
    1734 E382      LDI	R24,0x32
    1735 2EE8      MOV	R14,R24
(0080) 	 unsigned char spread_out = 60;
    1736 E38C      LDI	R24,0x3C
    1737 2EC8      MOV	R12,R24
(0081) 	 int delay_time = FIVE_HUNDRED_MSEC;
    1738 EC48      LDI	R20,0xC8
    1739 E050      LDI	R21,0
(0082) 	 int i;
(0083) 	 
(0084) 	 //lifting legs 3 & 4
(0085) 	 angle(dir3, MOTOR_B, lift);
    173A 8368      STD	Y+0,R22
    173B E422      LDI	R18,0x42
    173C 850F      LDD	R16,Y+15
    173D 940E 151C CALL	_angle
(0086) 	 angle(dir4, MOTOR_B, lift);
    173F 8368      STD	Y+0,R22
    1740 E422      LDI	R18,0x42
    1741 8908      LDD	R16,Y+16
    1742 940E 151C CALL	_angle
(0087) 	 
(0088) 	 delay(delay_time);
    1744 018A      MOVW	R16,R20
    1745 940E 14C9 CALL	_delay
(0089) 	 
(0090) 	 //moving legs 3 & 4 forward
(0091) 	 angle(dir3, MOTOR_A, 90 - step_side);
    1747 E58A      LDI	R24,0x5A
    1748 198E      SUB	R24,R14
    1749 8388      STD	Y+0,R24
    174A E421      LDI	R18,0x41
    174B 850F      LDD	R16,Y+15
    174C 940E 151C CALL	_angle
(0092) 	 angle(dir4, MOTOR_A, 90 + step_side);
    174E 2D8E      MOV	R24,R14
    174F 5A86      SUBI	R24,0xA6
    1750 8388      STD	Y+0,R24
    1751 E421      LDI	R18,0x41
    1752 8908      LDD	R16,Y+16
    1753 940E 151C CALL	_angle
(0093) 	 angle(dir3, MOTOR_C, 90 + 70);
    1755 EA80      LDI	R24,0xA0
    1756 8388      STD	Y+0,R24
    1757 E423      LDI	R18,0x43
    1758 850F      LDD	R16,Y+15
    1759 940E 151C CALL	_angle
(0094) 	 angle(dir4, MOTOR_C, 90 + 70);
    175B EA80      LDI	R24,0xA0
    175C 8388      STD	Y+0,R24
    175D E423      LDI	R18,0x43
    175E 8908      LDD	R16,Y+16
    175F 940E 151C CALL	_angle
(0095) 
(0096) 	 
(0097) 	 //spreading legs 5 & 6 out
(0098) 	 angle(dir5, MOTOR_C, 90 + spread_out);
    1761 2D8C      MOV	R24,R12
    1762 5A86      SUBI	R24,0xA6
    1763 8388      STD	Y+0,R24
    1764 E423      LDI	R18,0x43
    1765 8909      LDD	R16,Y+17
    1766 940E 151C CALL	_angle
(0099) 	 angle(dir6, MOTOR_C, 90 + spread_out);
    1768 2D8C      MOV	R24,R12
    1769 5A86      SUBI	R24,0xA6
    176A 8388      STD	Y+0,R24
    176B E423      LDI	R18,0x43
    176C 2D0A      MOV	R16,R10
    176D 940E 151C CALL	_angle
(0100) 	 
(0101) 	 delay(delay_time);
    176F 018A      MOVW	R16,R20
    1770 940E 14C9 CALL	_delay
(0102) 	 
(0103) 	 
(0104) 	 //putting down legs 3 & 4
(0105) 	 angle(dir3, MOTOR_B, 180);
    1772 EB84      LDI	R24,0xB4
    1773 8388      STD	Y+0,R24
    1774 E422      LDI	R18,0x42
    1775 850F      LDD	R16,Y+15
    1776 940E 151C CALL	_angle
(0106) 	 angle(dir4, MOTOR_B, 180);
    1778 EB84      LDI	R24,0xB4
    1779 8388      STD	Y+0,R24
    177A E422      LDI	R18,0x42
    177B 8908      LDD	R16,Y+16
    177C 940E 151C CALL	_angle
(0107) 
(0108) 	 delay(delay_time);
    177E 018A      MOVW	R16,R20
    177F 940E 14C9 CALL	_delay
(0109) 	 
(0110) 	 //lifting legs 1 & 2
(0111) 	 angle(dir1, MOTOR_B, 0);
    1781 2422      CLR	R2
    1782 8228      STD	Y+0,R2
    1783 E422      LDI	R18,0x42
    1784 8D0C      LDD	R16,Y+28
    1785 940E 151C CALL	_angle
(0112) 	 angle(dir2, MOTOR_B, 0);
    1787 2422      CLR	R2
    1788 8228      STD	Y+0,R2
    1789 E422      LDI	R18,0x42
    178A 8D0E      LDD	R16,Y+30
    178B 940E 151C CALL	_angle
(0113) 	 
(0114) 	 //aligning legs 1 & 2
(0115) 	 angle(dir1, MOTOR_A, 150);
    178D E986      LDI	R24,0x96
    178E 8388      STD	Y+0,R24
    178F E421      LDI	R18,0x41
    1790 8D0C      LDD	R16,Y+28
    1791 940E 151C CALL	_angle
(0116) 	 angle(dir2, MOTOR_A, 30);
    1793 E18E      LDI	R24,0x1E
    1794 8388      STD	Y+0,R24
    1795 E421      LDI	R18,0x41
    1796 8D0E      LDD	R16,Y+30
    1797 940E 151C CALL	_angle
(0117) 	 
(0118) 	 
(0119) 	 //shaking legs 1 & 2 in air
(0120) 	 for(i = 0; i < steps; i++) {
    1799 2766      CLR	R22
    179A 2777      CLR	R23
    179B C020      RJMP	0x17BC
(0121) 	 	   angle(dir1, MOTOR_B, 30);
    179C E18E      LDI	R24,0x1E
    179D 8388      STD	Y+0,R24
    179E E422      LDI	R18,0x42
    179F 8D0C      LDD	R16,Y+28
    17A0 940E 151C CALL	_angle
(0122) 		   angle(dir2, MOTOR_B, 30);
    17A2 E18E      LDI	R24,0x1E
    17A3 8388      STD	Y+0,R24
    17A4 E422      LDI	R18,0x42
    17A5 8D0E      LDD	R16,Y+30
    17A6 940E 151C CALL	_angle
(0123) 		   
(0124) 		   delay(delay_time);
    17A8 018A      MOVW	R16,R20
    17A9 940E 14C9 CALL	_delay
(0125) 		   
(0126) 		   angle(dir1, MOTOR_B, 0);
    17AB 2422      CLR	R2
    17AC 8228      STD	Y+0,R2
    17AD E422      LDI	R18,0x42
    17AE 8D0C      LDD	R16,Y+28
    17AF 940E 151C CALL	_angle
(0127) 	 	   angle(dir2, MOTOR_B, 0);
    17B1 2422      CLR	R2
    17B2 8228      STD	Y+0,R2
    17B3 E422      LDI	R18,0x42
    17B4 8D0E      LDD	R16,Y+30
    17B5 940E 151C CALL	_angle
(0128) 		   
(0129) 		   delay(delay_time);
    17B7 018A      MOVW	R16,R20
    17B8 940E 14C9 CALL	_delay
    17BA 5F6F      SUBI	R22,0xFF
    17BB 4F7F      SBCI	R23,0xFF
    17BC A008      LDD	R0,Y+32
    17BD A019      LDD	R1,Y+33
    17BE 1560      CP	R22,R0
    17BF 0571      CPC	R23,R1
    17C0 F2DC      BLT	0x179C
    17C1 9662      ADIW	R28,0x12
    17C2 940E 1E3A CALL	pop_xgsetF0FC
    17C4 9624      ADIW	R28,4
    17C5 9508      RET
_dance:
  array_opposite       --> Y,+1
  delay_time           --> R10
  dir2_opposite        --> R22
  dir1_opposite        --> R14
  stretch              --> R20
  steps                --> R12
  dir2                 --> Y,+27
  dir1                 --> Y,+25
    17C6 940E 1DB6 CALL	push_arg4
    17C8 940E 1E45 CALL	push_xgsetF0FC
    17CA 972F      SBIW	R28,0xF
    17CB 8CCD      LDD	R12,Y+29
    17CC 8CDE      LDD	R13,Y+30
(0130) 	 }
(0131) 	 
(0132) 	 //resetting to original position
(0133) 	 //servo_calibration();
(0134) }
(0135) 
(0136) 
(0137) /**
(0138) The hexapod moves its weight from legs dir1, dir2 to legs opposite to dir1, dir2 
(0139) steps : The nummber of steps in the dance move
(0140) @param dir1 : Direction of motion
(0141) @param dir2 : Direction of motion
(0142) @param steps : number of steps
(0143) */
(0144) void dance(unsigned char dir1, unsigned char dir2, int steps) {
(0145) 	 int array_opposite[] = {0,6,5,4,3,2,1};
    17CD ED8C      LDI	R24,0xDC
    17CE E091      LDI	R25,1
    17CF 01FE      MOVW	R30,R28
    17D0 9631      ADIW	R30,1
    17D1 E00E      LDI	R16,0xE
    17D2 E010      LDI	R17,0
    17D3 93FA      ST	R31,-Y
    17D4 93EA      ST	R30,-Y
    17D5 939A      ST	R25,-Y
    17D6 938A      ST	R24,-Y
    17D7 940E 1E8D CALL	asgncblkx
(0146) 	 unsigned char dir1_opposite = array_opposite[dir1];
    17D9 01CE      MOVW	R24,R28
    17DA 9601      ADIW	R24,1
    17DB 8DE9      LDD	R30,Y+25
    17DC 27FF      CLR	R31
    17DD 0FEE      LSL	R30
    17DE 1FFF      ROL	R31
    17DF 0FE8      ADD	R30,R24
    17E0 1FF9      ADC	R31,R25
    17E1 80E0      LDD	R14,Z+0
(0147) 	 unsigned char dir2_opposite = array_opposite[dir2];
    17E2 01CE      MOVW	R24,R28
    17E3 9601      ADIW	R24,1
    17E4 8DEB      LDD	R30,Y+27
    17E5 27FF      CLR	R31
    17E6 0FEE      LSL	R30
    17E7 1FFF      ROL	R31
    17E8 0FE8      ADD	R30,R24
    17E9 1FF9      ADC	R31,R25
    17EA 8160      LDD	R22,Z+0
(0148) 	 unsigned char stretch = 90;
    17EB E54A      LDI	R20,0x5A
(0149) 	 int delay_time = FIVE_HUNDRED_MSEC;
    17EC EC88      LDI	R24,0xC8
    17ED E090      LDI	R25,0
    17EE 015C      MOVW	R10,R24
    17EF C072      RJMP	0x1862
(0150) 	 
(0151) 	 while(steps-- > 0) {
(0152) 	 			   
(0153) 	 	//move towards 6 & 5
(0154) 		angle(dir1, MOTOR_B, 90 + stretch);
    17F0 2F84      MOV	R24,R20
    17F1 5A86      SUBI	R24,0xA6
    17F2 8388      STD	Y+0,R24
    17F3 E422      LDI	R18,0x42
    17F4 8D09      LDD	R16,Y+25
    17F5 940E 151C CALL	_angle
(0155) 	 	angle(dir1, MOTOR_C, 90 + 90);
    17F7 EB84      LDI	R24,0xB4
    17F8 8388      STD	Y+0,R24
    17F9 E423      LDI	R18,0x43
    17FA 8D09      LDD	R16,Y+25
    17FB 940E 151C CALL	_angle
(0156) 	 	angle(dir1_opposite, MOTOR_B, 90 - stretch); 
    17FD E58A      LDI	R24,0x5A
    17FE 1B84      SUB	R24,R20
    17FF 8388      STD	Y+0,R24
    1800 E422      LDI	R18,0x42
    1801 2D0E      MOV	R16,R14
    1802 940E 151C CALL	_angle
(0157) 	 	angle(dir1_opposite, MOTOR_C, 90 - stretch);	 
    1804 E58A      LDI	R24,0x5A
    1805 1B84      SUB	R24,R20
    1806 8388      STD	Y+0,R24
    1807 E423      LDI	R18,0x43
    1808 2D0E      MOV	R16,R14
    1809 940E 151C CALL	_angle
(0158) 	 	angle(dir2, MOTOR_B, 90 + stretch);
    180B 2F84      MOV	R24,R20
    180C 5A86      SUBI	R24,0xA6
    180D 8388      STD	Y+0,R24
    180E E422      LDI	R18,0x42
    180F 8D0B      LDD	R16,Y+27
    1810 940E 151C CALL	_angle
(0159) 	 	angle(dir2, MOTOR_C, 90 + 90);
    1812 EB84      LDI	R24,0xB4
    1813 8388      STD	Y+0,R24
    1814 E423      LDI	R18,0x43
    1815 8D0B      LDD	R16,Y+27
    1816 940E 151C CALL	_angle
(0160) 	 	angle(dir2_opposite, MOTOR_B, 90 - stretch); 
    1818 E58A      LDI	R24,0x5A
    1819 1B84      SUB	R24,R20
    181A 8388      STD	Y+0,R24
    181B E422      LDI	R18,0x42
    181C 2F06      MOV	R16,R22
    181D 940E 151C CALL	_angle
(0161) 	 	angle(dir2_opposite, MOTOR_C, 90 - stretch);
    181F E58A      LDI	R24,0x5A
    1820 1B84      SUB	R24,R20
    1821 8388      STD	Y+0,R24
    1822 E423      LDI	R18,0x43
    1823 2F06      MOV	R16,R22
    1824 940E 151C CALL	_angle
(0162) 		
(0163) 		//delay
(0164) 		delay(delay_time);
    1826 0185      MOVW	R16,R10
    1827 940E 14C9 CALL	_delay
(0165) 		
(0166) 		
(0167) 		//move towards 1 & 2
(0168) 		angle(dir1_opposite, MOTOR_B, 90 + stretch);
    1829 2F84      MOV	R24,R20
    182A 5A86      SUBI	R24,0xA6
    182B 8388      STD	Y+0,R24
    182C E422      LDI	R18,0x42
    182D 2D0E      MOV	R16,R14
    182E 940E 151C CALL	_angle
(0169) 	 	angle(dir1_opposite, MOTOR_C, 90 + 90);
    1830 EB84      LDI	R24,0xB4
    1831 8388      STD	Y+0,R24
    1832 E423      LDI	R18,0x43
    1833 2D0E      MOV	R16,R14
    1834 940E 151C CALL	_angle
(0170) 	 	angle(dir1, MOTOR_B, 90 - stretch); 
    1836 E58A      LDI	R24,0x5A
    1837 1B84      SUB	R24,R20
    1838 8388      STD	Y+0,R24
    1839 E422      LDI	R18,0x42
    183A 8D09      LDD	R16,Y+25
    183B 940E 151C CALL	_angle
(0171) 	 	angle(dir1, MOTOR_C, 90 - stretch);	 
    183D E58A      LDI	R24,0x5A
    183E 1B84      SUB	R24,R20
    183F 8388      STD	Y+0,R24
    1840 E423      LDI	R18,0x43
    1841 8D09      LDD	R16,Y+25
    1842 940E 151C CALL	_angle
(0172) 	 	angle(dir2_opposite, MOTOR_B, 90 + stretch);
    1844 2F84      MOV	R24,R20
    1845 5A86      SUBI	R24,0xA6
    1846 8388      STD	Y+0,R24
    1847 E422      LDI	R18,0x42
    1848 2F06      MOV	R16,R22
    1849 940E 151C CALL	_angle
(0173) 	 	angle(dir2_opposite, MOTOR_C, 90 + 90);
    184B EB84      LDI	R24,0xB4
    184C 8388      STD	Y+0,R24
    184D E423      LDI	R18,0x43
    184E 2F06      MOV	R16,R22
    184F 940E 151C CALL	_angle
(0174) 	 	angle(dir2, MOTOR_B, 90 - stretch); 
    1851 E58A      LDI	R24,0x5A
    1852 1B84      SUB	R24,R20
    1853 8388      STD	Y+0,R24
    1854 E422      LDI	R18,0x42
    1855 8D0B      LDD	R16,Y+27
    1856 940E 151C CALL	_angle
(0175) 	 	angle(dir2, MOTOR_C, 90 - stretch);
    1858 E58A      LDI	R24,0x5A
    1859 1B84      SUB	R24,R20
    185A 8388      STD	Y+0,R24
    185B E423      LDI	R18,0x43
    185C 8D0B      LDD	R16,Y+27
    185D 940E 151C CALL	_angle
(0176) 		
(0177) 		
(0178) 		//delay
(0179) 		delay(delay_time);
    185F 0185      MOVW	R16,R10
    1860 940E 14C9 CALL	_delay
    1862 0126      MOVW	R4,R12
    1863 01C2      MOVW	R24,R4
    1864 9701      SBIW	R24,1
    1865 016C      MOVW	R12,R24
    1866 2422      CLR	R2
    1867 2433      CLR	R3
    1868 1424      CP	R2,R4
    1869 0435      CPC	R3,R5
    186A F40C      BGE	0x186C
    186B CF84      RJMP	0x17F0
    186C 962F      ADIW	R28,0xF
    186D 940E 1E3A CALL	pop_xgsetF0FC
    186F 9624      ADIW	R28,4
    1870 9508      RET
_sway:
  array_opposite       --> Y,+15
  delay_time           --> R10
  legs_clock           --> Y,+8
  legs_anticlock       --> Y,+1
  dir2_opposite        --> R20
  dir1_opposite        --> R14
  dir_centre_opposite  --> R12
  dir_centre           --> Y,+31
  dir2                 --> Y,+30
  dir1                 --> Y,+29
  stretch              --> R22
  movement             --> Y,+44
  steps                --> Y,+42
    1871 940E 1DB6 CALL	push_arg4
    1873 940E 1E45 CALL	push_xgsetF0FC
    1875 97A0      SBIW	R28,0x20
(0180) 	}	
(0181) }
(0182) 
(0183) /**
(0184) Servo control the hexapod shifts its weight clockwise
(0185) @param steps : number of steps to be carried out
(0186) @param movement : clockwise or anticlockwise
(0187) */
(0188) void sway(int steps, unsigned char movement) {
(0189) 	 int array_opposite[] = {0,6,5,4,3,2,1};
    1876 EE8A      LDI	R24,0xEA
    1877 E091      LDI	R25,1
    1878 01FE      MOVW	R30,R28
    1879 963F      ADIW	R30,0xF
    187A E00E      LDI	R16,0xE
    187B E010      LDI	R17,0
    187C 93FA      ST	R31,-Y
    187D 93EA      ST	R30,-Y
    187E 939A      ST	R25,-Y
    187F 938A      ST	R24,-Y
    1880 940E 1E8D CALL	asgncblkx
(0190) 	 unsigned char legs_anticlock[] = {0,2,3,6,1,4,5};
    1882 EF88      LDI	R24,0xF8
    1883 E091      LDI	R25,1
    1884 01FE      MOVW	R30,R28
    1885 9631      ADIW	R30,1
    1886 E007      LDI	R16,7
    1887 E010      LDI	R17,0
    1888 93FA      ST	R31,-Y
    1889 93EA      ST	R30,-Y
    188A 939A      ST	R25,-Y
    188B 938A      ST	R24,-Y
    188C 940E 1E8D CALL	asgncblkx
(0191) 	 unsigned char legs_clock[] = {0,4,1,2,5,6,3};
    188E EF8F      LDI	R24,0xFF
    188F E091      LDI	R25,1
    1890 01FE      MOVW	R30,R28
    1891 9638      ADIW	R30,0x8
    1892 E007      LDI	R16,7
    1893 E010      LDI	R17,0
    1894 93FA      ST	R31,-Y
    1895 93EA      ST	R30,-Y
    1896 939A      ST	R25,-Y
    1897 938A      ST	R24,-Y
    1898 940E 1E8D CALL	asgncblkx
(0192) 	 unsigned char dir1 = LEG_1;
    189A 2400      CLR	R0
    189B 9403      INC	R0
    189C 8E0D      STD	Y+29,R0
(0193) 	 unsigned char dir2  = LEG_2;
    189D E082      LDI	R24,2
    189E 8F8E      STD	Y+30,R24
(0194) 	 unsigned char dir_centre = LEG_3;
    189F E083      LDI	R24,3
    18A0 8F8F      STD	Y+31,R24
(0195) 	 unsigned char dir_centre_opposite  = LEG_4;
    18A1 E084      LDI	R24,4
    18A2 2EC8      MOV	R12,R24
(0196) 	 unsigned char dir1_opposite = array_opposite[dir1];
    18A3 01CE      MOVW	R24,R28
    18A4 960F      ADIW	R24,0xF
    18A5 8DED      LDD	R30,Y+29
    18A6 27FF      CLR	R31
    18A7 0FEE      LSL	R30
    18A8 1FFF      ROL	R31
    18A9 0FE8      ADD	R30,R24
    18AA 1FF9      ADC	R31,R25
    18AB 80E0      LDD	R14,Z+0
(0197) 	 unsigned char dir2_opposite = array_opposite[dir2];
    18AC 01CE      MOVW	R24,R28
    18AD 960F      ADIW	R24,0xF
    18AE 8DEE      LDD	R30,Y+30
    18AF 27FF      CLR	R31
    18B0 0FEE      LSL	R30
    18B1 1FFF      ROL	R31
    18B2 0FE8      ADD	R30,R24
    18B3 1FF9      ADC	R31,R25
    18B4 8140      LDD	R20,Z+0
(0198) 	 unsigned char stretch = 90;
    18B5 E56A      LDI	R22,0x5A
(0199) 	 int delay_time = TWO_HUNDRED_FIFTY_MSEC;
    18B6 E684      LDI	R24,0x64
    18B7 E090      LDI	R25,0
    18B8 015C      MOVW	R10,R24
    18B9 C0B0      RJMP	0x196A
(0200) 	 
(0201) 	 while(steps-- > 0) {
(0202) 	 			   
(0203) 	 	//move towards 6 & 5 opposite legs
(0204) 		angle(dir1, MOTOR_B, 90 + stretch);
    18BA 2F86      MOV	R24,R22
    18BB 5A86      SUBI	R24,0xA6
    18BC 8388      STD	Y+0,R24
    18BD E422      LDI	R18,0x42
    18BE 8D0D      LDD	R16,Y+29
    18BF 940E 151C CALL	_angle
(0205) 	 	angle(dir1, MOTOR_C, 90 + 90);
    18C1 EB84      LDI	R24,0xB4
    18C2 8388      STD	Y+0,R24
    18C3 E423      LDI	R18,0x43
    18C4 8D0D      LDD	R16,Y+29
    18C5 940E 151C CALL	_angle
(0206) 	 	angle(dir1_opposite, MOTOR_B, 90 - stretch); 
    18C7 E58A      LDI	R24,0x5A
    18C8 1B86      SUB	R24,R22
    18C9 8388      STD	Y+0,R24
    18CA E422      LDI	R18,0x42
    18CB 2D0E      MOV	R16,R14
    18CC 940E 151C CALL	_angle
(0207) 	 	angle(dir1_opposite, MOTOR_C, 90 - stretch);	 
    18CE E58A      LDI	R24,0x5A
    18CF 1B86      SUB	R24,R22
    18D0 8388      STD	Y+0,R24
    18D1 E423      LDI	R18,0x43
    18D2 2D0E      MOV	R16,R14
    18D3 940E 151C CALL	_angle
(0208) 	 	angle(dir2, MOTOR_B, 90 + stretch);
    18D5 2F86      MOV	R24,R22
    18D6 5A86      SUBI	R24,0xA6
    18D7 8388      STD	Y+0,R24
    18D8 E422      LDI	R18,0x42
    18D9 8D0E      LDD	R16,Y+30
    18DA 940E 151C CALL	_angle
(0209) 	 	angle(dir2, MOTOR_C, 90 + 90);
    18DC EB84      LDI	R24,0xB4
    18DD 8388      STD	Y+0,R24
    18DE E423      LDI	R18,0x43
    18DF 8D0E      LDD	R16,Y+30
    18E0 940E 151C CALL	_angle
(0210) 	 	angle(dir2_opposite, MOTOR_B, 90 - stretch); 
    18E2 E58A      LDI	R24,0x5A
    18E3 1B86      SUB	R24,R22
    18E4 8388      STD	Y+0,R24
    18E5 E422      LDI	R18,0x42
    18E6 2F04      MOV	R16,R20
    18E7 940E 151C CALL	_angle
(0211) 	 	angle(dir2_opposite, MOTOR_C, 90 - stretch);
    18E9 E58A      LDI	R24,0x5A
    18EA 1B86      SUB	R24,R22
    18EB 8388      STD	Y+0,R24
    18EC E423      LDI	R18,0x43
    18ED 2F04      MOV	R16,R20
    18EE 940E 151C CALL	_angle
(0212) 		
(0213) 		//reset leg 3 & 4 centre legs
(0214) 		angle(dir_centre, MOTOR_B, 90);
    18F0 E58A      LDI	R24,0x5A
    18F1 8388      STD	Y+0,R24
    18F2 E422      LDI	R18,0x42
    18F3 8D0F      LDD	R16,Y+31
    18F4 940E 151C CALL	_angle
(0215) 		angle(dir_centre_opposite, MOTOR_B, 90);	
    18F6 E58A      LDI	R24,0x5A
    18F7 8388      STD	Y+0,R24
    18F8 E422      LDI	R18,0x42
    18F9 2D0C      MOV	R16,R12
    18FA 940E 151C CALL	_angle
(0216) 		angle(dir_centre, MOTOR_C, 90);
    18FC E58A      LDI	R24,0x5A
    18FD 8388      STD	Y+0,R24
    18FE E423      LDI	R18,0x43
    18FF 8D0F      LDD	R16,Y+31
    1900 940E 151C CALL	_angle
(0217) 		angle(dir_centre_opposite, MOTOR_C, 90);
    1902 E58A      LDI	R24,0x5A
    1903 8388      STD	Y+0,R24
    1904 E423      LDI	R18,0x43
    1905 2D0C      MOV	R16,R12
    1906 940E 151C CALL	_angle
(0218) 		
(0219) 		//delay
(0220) 		delay(delay_time);
    1908 0185      MOVW	R16,R10
    1909 940E 14C9 CALL	_delay
(0221) 		
(0222) 		//update legs
(0223) 		if(movement == CLOCK_WISE) {
    190B A58C      LDD	R24,Y+44
    190C 3081      CPI	R24,1
    190D F009      BEQ	0x190F
    190E C02E      RJMP	0x193D
(0224) 			dir1 = legs_clock[dir1];
    190F 01CE      MOVW	R24,R28
    1910 9608      ADIW	R24,0x8
    1911 8DED      LDD	R30,Y+29
    1912 27FF      CLR	R31
    1913 0FE8      ADD	R30,R24
    1914 1FF9      ADC	R31,R25
    1915 8020      LDD	R2,Z+0
    1916 8E2D      STD	Y+29,R2
(0225) 			dir2 = legs_clock[dir2];
    1917 01CE      MOVW	R24,R28
    1918 9608      ADIW	R24,0x8
    1919 8DEE      LDD	R30,Y+30
    191A 27FF      CLR	R31
    191B 0FE8      ADD	R30,R24
    191C 1FF9      ADC	R31,R25
    191D 8020      LDD	R2,Z+0
    191E 8E2E      STD	Y+30,R2
(0226) 			dir1_opposite = legs_clock[dir1_opposite];
    191F 01CE      MOVW	R24,R28
    1920 9608      ADIW	R24,0x8
    1921 2DEE      MOV	R30,R14
    1922 27FF      CLR	R31
    1923 0FE8      ADD	R30,R24
    1924 1FF9      ADC	R31,R25
    1925 80E0      LDD	R14,Z+0
(0227) 			dir2_opposite = legs_clock[dir2_opposite];
    1926 01CE      MOVW	R24,R28
    1927 9608      ADIW	R24,0x8
    1928 2FE4      MOV	R30,R20
    1929 27FF      CLR	R31
    192A 0FE8      ADD	R30,R24
    192B 1FF9      ADC	R31,R25
    192C 8140      LDD	R20,Z+0
(0228) 			dir_centre = legs_clock[dir_centre];
    192D 01CE      MOVW	R24,R28
    192E 9608      ADIW	R24,0x8
    192F 8DEF      LDD	R30,Y+31
    1930 27FF      CLR	R31
    1931 0FE8      ADD	R30,R24
    1932 1FF9      ADC	R31,R25
    1933 8020      LDD	R2,Z+0
    1934 8E2F      STD	Y+31,R2
(0229) 			dir_centre_opposite = legs_clock[dir_centre_opposite];
    1935 01CE      MOVW	R24,R28
    1936 9608      ADIW	R24,0x8
    1937 2DEC      MOV	R30,R12
    1938 27FF      CLR	R31
    1939 0FE8      ADD	R30,R24
    193A 1FF9      ADC	R31,R25
    193B 80C0      LDD	R12,Z+0
(0230) 		} else {
    193C C02D      RJMP	0x196A
(0231) 			dir1 = legs_anticlock[dir1];
    193D 01CE      MOVW	R24,R28
    193E 9601      ADIW	R24,1
    193F 8DED      LDD	R30,Y+29
    1940 27FF      CLR	R31
    1941 0FE8      ADD	R30,R24
    1942 1FF9      ADC	R31,R25
    1943 8020      LDD	R2,Z+0
    1944 8E2D      STD	Y+29,R2
(0232) 			dir2 = legs_anticlock[dir2];
    1945 01CE      MOVW	R24,R28
    1946 9601      ADIW	R24,1
    1947 8DEE      LDD	R30,Y+30
    1948 27FF      CLR	R31
    1949 0FE8      ADD	R30,R24
    194A 1FF9      ADC	R31,R25
    194B 8020      LDD	R2,Z+0
    194C 8E2E      STD	Y+30,R2
(0233) 			dir1_opposite = legs_anticlock[dir1_opposite];
    194D 01CE      MOVW	R24,R28
    194E 9601      ADIW	R24,1
    194F 2DEE      MOV	R30,R14
    1950 27FF      CLR	R31
    1951 0FE8      ADD	R30,R24
    1952 1FF9      ADC	R31,R25
    1953 80E0      LDD	R14,Z+0
(0234) 			dir2_opposite = legs_anticlock[dir2_opposite];
    1954 01CE      MOVW	R24,R28
    1955 9601      ADIW	R24,1
    1956 2FE4      MOV	R30,R20
    1957 27FF      CLR	R31
    1958 0FE8      ADD	R30,R24
    1959 1FF9      ADC	R31,R25
    195A 8140      LDD	R20,Z+0
(0235) 			dir_centre = legs_anticlock[dir_centre];
    195B 01CE      MOVW	R24,R28
    195C 9601      ADIW	R24,1
    195D 8DEF      LDD	R30,Y+31
    195E 27FF      CLR	R31
    195F 0FE8      ADD	R30,R24
    1960 1FF9      ADC	R31,R25
    1961 8020      LDD	R2,Z+0
    1962 8E2F      STD	Y+31,R2
(0236) 			dir_centre_opposite = legs_anticlock[dir_centre_opposite];
    1963 01CE      MOVW	R24,R28
    1964 9601      ADIW	R24,1
    1965 2DEC      MOV	R30,R12
    1966 27FF      CLR	R31
    1967 0FE8      ADD	R30,R24
    1968 1FF9      ADC	R31,R25
    1969 80C0      LDD	R12,Z+0
    196A A44A      LDD	R4,Y+42
    196B A45B      LDD	R5,Y+43
    196C 01C2      MOVW	R24,R4
    196D 9701      SBIW	R24,1
    196E A79B      STD	Y+43,R25
    196F A78A      STD	Y+42,R24
    1970 2422      CLR	R2
    1971 2433      CLR	R3
    1972 1424      CP	R2,R4
    1973 0435      CPC	R3,R5
    1974 F40C      BGE	0x1976
    1975 CF44      RJMP	0x18BA
    1976 96A0      ADIW	R28,0x20
    1977 940E 1E3A CALL	pop_xgsetF0FC
    1979 9624      ADIW	R28,4
    197A 9508      RET
_climb:
  lift                 --> R20
  delay_time2          --> R22
  delay_time1          --> R20
    197B 940E 1E5A CALL	push_xgsetF000
    197D 9721      SBIW	R28,1
(0237) 		}
(0238) 	}	
(0239) }
(0240) 
(0241) /**
(0242) Used to make the hexapod climb steps
(0243) */
(0244) void climb() {
(0245) 	 unsigned char lift = 50;
(0246) 	 int delay_time1  =  FIVE_HUNDRED_MSEC;
    197E EC48      LDI	R20,0xC8
    197F E050      LDI	R21,0
(0247) 	 int delay_time2 = ONE_SEC;
    1980 E960      LDI	R22,0x90
    1981 E071      LDI	R23,1
(0248) 	 
(0249) 	 setMirrorDir(DIR_MIRROR_LEG_1_2);
    1982 2700      CLR	R16
    1983 940E 169C CALL	_setMirrorDir
(0250) 	 
(0251) 	 /* ---increase bot height --- */
(0252) 	 angleMirror(LEG_1, MOTOR_B, 180);
    1985 EB84      LDI	R24,0xB4
    1986 8388      STD	Y+0,R24
    1987 E422      LDI	R18,0x42
    1988 E030      LDI	R19,0
    1989 E001      LDI	R16,1
    198A E010      LDI	R17,0
    198B 940E 16C2 CALL	_angleMirror
(0253) 	 angleMirror(LEG_1, MOTOR_C, 180);
    198D EB84      LDI	R24,0xB4
    198E 8388      STD	Y+0,R24
    198F E423      LDI	R18,0x43
    1990 E030      LDI	R19,0
    1991 E001      LDI	R16,1
    1992 E010      LDI	R17,0
    1993 940E 16C2 CALL	_angleMirror
(0254) 	 
(0255) 	 angleMirror(LEG_4, MOTOR_B, 180);
    1995 EB84      LDI	R24,0xB4
    1996 8388      STD	Y+0,R24
    1997 E422      LDI	R18,0x42
    1998 E030      LDI	R19,0
    1999 E004      LDI	R16,4
    199A E010      LDI	R17,0
    199B 940E 16C2 CALL	_angleMirror
(0256) 	 angleMirror(LEG_4, MOTOR_C, 180);
    199D EB84      LDI	R24,0xB4
    199E 8388      STD	Y+0,R24
    199F E423      LDI	R18,0x43
    19A0 E030      LDI	R19,0
    19A1 E004      LDI	R16,4
    19A2 E010      LDI	R17,0
    19A3 940E 16C2 CALL	_angleMirror
(0257) 	 
(0258) 	 angleMirror(LEG_5, MOTOR_B, 180);
    19A5 EB84      LDI	R24,0xB4
    19A6 8388      STD	Y+0,R24
    19A7 E422      LDI	R18,0x42
    19A8 E030      LDI	R19,0
    19A9 E005      LDI	R16,5
    19AA E010      LDI	R17,0
    19AB 940E 16C2 CALL	_angleMirror
(0259) 	 angleMirror(LEG_5, MOTOR_C, 180);
    19AD EB84      LDI	R24,0xB4
    19AE 8388      STD	Y+0,R24
    19AF E423      LDI	R18,0x43
    19B0 E030      LDI	R19,0
    19B1 E005      LDI	R16,5
    19B2 E010      LDI	R17,0
    19B3 940E 16C2 CALL	_angleMirror
(0260) 	 
(0261) 	 delay(delay_time1);
    19B5 018A      MOVW	R16,R20
    19B6 940E 14C9 CALL	_delay
(0262) 	 
(0263) 	 
(0264) 	 /* ---- Thrust the body of the robot forward ----*/
(0265) 	 
(0266) 	 //pick up leg 3 & 4
(0267) 	 angleMirror(LEG_4, MOTOR_B, 90);
    19B8 E58A      LDI	R24,0x5A
    19B9 8388      STD	Y+0,R24
    19BA E422      LDI	R18,0x42
    19BB E030      LDI	R19,0
    19BC E004      LDI	R16,4
    19BD E010      LDI	R17,0
    19BE 940E 16C2 CALL	_angleMirror
(0268) 	 	 
(0269) 	 delay(delay_time1);
    19C0 018A      MOVW	R16,R20
    19C1 940E 14C9 CALL	_delay
(0270) 		
(0271) 		
(0272) 	 //Leg 3 moves more than leg 4 bot goes towards left 	 
(0273) 	 //move leg 3 & 4 in air
(0274) 	 //angleMirror(LEG_4, MOTOR_A, 180);
(0275) 	 angle(LEG_4, MOTOR_A, 180);
    19C3 EB84      LDI	R24,0xB4
    19C4 8388      STD	Y+0,R24
    19C5 E421      LDI	R18,0x41
    19C6 E004      LDI	R16,4
    19C7 940E 151C CALL	_angle
(0276) 	 angle(LEG_3, MOTOR_A, 20);
    19C9 E184      LDI	R24,0x14
    19CA 8388      STD	Y+0,R24
    19CB E421      LDI	R18,0x41
    19CC E003      LDI	R16,3
    19CD 940E 151C CALL	_angle
(0277) 	 
(0278) 	 delay(delay_time2);
    19CF 018B      MOVW	R16,R22
    19D0 940E 14C9 CALL	_delay
(0279) 	 	 
(0280) 	 //put leg 3 & 4 down
(0281) 	 angleMirror(LEG_4, MOTOR_B, 180);
    19D2 EB84      LDI	R24,0xB4
    19D3 8388      STD	Y+0,R24
    19D4 E422      LDI	R18,0x42
    19D5 E030      LDI	R19,0
    19D6 E004      LDI	R16,4
    19D7 E010      LDI	R17,0
    19D8 940E 16C2 CALL	_angleMirror
(0282) 	 
(0283) 	 delay(delay_time1);
    19DA 018A      MOVW	R16,R20
    19DB 940E 14C9 CALL	_delay
(0284) 	 
(0285) 	 //move legs 1 & 2	 
(0286) 	 angleMirror(LEG_1, MOTOR_A, 30);
    19DD E18E      LDI	R24,0x1E
    19DE 8388      STD	Y+0,R24
    19DF E421      LDI	R18,0x41
    19E0 E030      LDI	R19,0
    19E1 E001      LDI	R16,1
    19E2 E010      LDI	R17,0
    19E3 940E 16C2 CALL	_angleMirror
(0287) 
(0288) 	 delay(delay_time1);
    19E5 018A      MOVW	R16,R20
    19E6 940E 14C9 CALL	_delay
(0289) 	 
(0290) 	 //pick up leg 1 & 2
(0291) 	 angleMirror(LEG_1, MOTOR_B, 0);
    19E8 2422      CLR	R2
    19E9 8228      STD	Y+0,R2
    19EA E422      LDI	R18,0x42
    19EB E030      LDI	R19,0
    19EC E001      LDI	R16,1
    19ED E010      LDI	R17,0
    19EE 940E 16C2 CALL	_angleMirror
(0292) 	 angleMirror(LEG_1, MOTOR_C, 180);
    19F0 EB84      LDI	R24,0xB4
    19F1 8388      STD	Y+0,R24
    19F2 E423      LDI	R18,0x43
    19F3 E030      LDI	R19,0
    19F4 E001      LDI	R16,1
    19F5 E010      LDI	R17,0
    19F6 940E 16C2 CALL	_angleMirror
(0293) 	 
(0294) 	 delay(delay_time2);
    19F8 018B      MOVW	R16,R22
    19F9 940E 14C9 CALL	_delay
(0295) 	 
(0296) 	 //move legs 1 & 2 in air
(0297) 	 angleMirror(LEG_1, MOTOR_A, 150);
    19FB E986      LDI	R24,0x96
    19FC 8388      STD	Y+0,R24
    19FD E421      LDI	R18,0x41
    19FE E030      LDI	R19,0
    19FF E001      LDI	R16,1
    1A00 E010      LDI	R17,0
    1A01 940E 16C2 CALL	_angleMirror
(0298) 	 
(0299) 	 delay(delay_time1);
    1A03 018A      MOVW	R16,R20
    1A04 940E 14C9 CALL	_delay
(0300) 	 
(0301) 	 /*---- Bot pushes itself on the platform -- */
(0302) 	 
(0303) 	 //move body on leg 3 & 4
(0304) 	 angleMirror(LEG_4, MOTOR_A, 0);
    1A06 2422      CLR	R2
    1A07 8228      STD	Y+0,R2
    1A08 E421      LDI	R18,0x41
    1A09 E030      LDI	R19,0
    1A0A E004      LDI	R16,4
    1A0B E010      LDI	R17,0
    1A0C 940E 16C2 CALL	_angleMirror
(0305) 	 
(0306) 	 delay(ONE_SEC);
    1A0E E900      LDI	R16,0x90
    1A0F E011      LDI	R17,1
    1A10 940E 14C9 CALL	_delay
(0307) 	 
(0308) 	 // move leg 1 & 2
(0309) 	 angleMirror(LEG_1, MOTOR_B, 50); //tune for height
    1A12 E382      LDI	R24,0x32
    1A13 8388      STD	Y+0,R24
    1A14 E422      LDI	R18,0x42
    1A15 E030      LDI	R19,0
    1A16 E001      LDI	R16,1
    1A17 E010      LDI	R17,0
    1A18 940E 16C2 CALL	_angleMirror
(0310) 	 angleMirror(LEG_1, MOTOR_C, 90); //tune this too
    1A1A E58A      LDI	R24,0x5A
    1A1B 8388      STD	Y+0,R24
    1A1C E423      LDI	R18,0x43
    1A1D E030      LDI	R19,0
    1A1E E001      LDI	R16,1
    1A1F E010      LDI	R17,0
    1A20 940E 16C2 CALL	_angleMirror
(0311) 	 
(0312) 	 delay(delay_time1);
    1A22 018A      MOVW	R16,R20
    1A23 940E 14C9 CALL	_delay
(0313) 	 
(0314) 	 //pick up 3&4
(0315) 	 angleMirror(LEG_4, MOTOR_B, 0);
    1A25 2422      CLR	R2
    1A26 8228      STD	Y+0,R2
    1A27 E422      LDI	R18,0x42
    1A28 E030      LDI	R19,0
    1A29 E004      LDI	R16,4
    1A2A E010      LDI	R17,0
    1A2B 940E 16C2 CALL	_angleMirror
(0316) 	 angleMirror(LEG_4, MOTOR_C, 180);
    1A2D EB84      LDI	R24,0xB4
    1A2E 8388      STD	Y+0,R24
    1A2F E423      LDI	R18,0x43
    1A30 E030      LDI	R19,0
    1A31 E004      LDI	R16,4
    1A32 E010      LDI	R17,0
    1A33 940E 16C2 CALL	_angleMirror
(0317) 	 
(0318) 	 delay(delay_time1);
    1A35 018A      MOVW	R16,R20
    1A36 940E 14C9 CALL	_delay
(0319) 	 
(0320) 	 //moving leg 3&4 in air
(0321) 	 angleMirror(LEG_4, MOTOR_A, 180);
    1A38 EB84      LDI	R24,0xB4
    1A39 8388      STD	Y+0,R24
    1A3A E421      LDI	R18,0x41
    1A3B E030      LDI	R19,0
    1A3C E004      LDI	R16,4
    1A3D E010      LDI	R17,0
    1A3E 940E 16C2 CALL	_angleMirror
(0322) 	 
(0323) 	 delay(delay_time1);
    1A40 018A      MOVW	R16,R20
    1A41 940E 14C9 CALL	_delay
(0324) 	 
(0325) 	 //make leg 3 &4 touch ground
(0326) 	 angleMirror(LEG_4, MOTOR_B, 50);
    1A43 E382      LDI	R24,0x32
    1A44 8388      STD	Y+0,R24
    1A45 E422      LDI	R18,0x42
    1A46 E030      LDI	R19,0
    1A47 E004      LDI	R16,4
    1A48 E010      LDI	R17,0
    1A49 940E 16C2 CALL	_angleMirror
(0327) 	 angleMirror(LEG_4, MOTOR_C, 50);
    1A4B E382      LDI	R24,0x32
    1A4C 8388      STD	Y+0,R24
    1A4D E423      LDI	R18,0x43
    1A4E E030      LDI	R19,0
    1A4F E004      LDI	R16,4
    1A50 E010      LDI	R17,0
    1A51 940E 16C2 CALL	_angleMirror
(0328) 	 
(0329) 	 
(0330) 	 delay(delay_time1);
    1A53 018A      MOVW	R16,R20
    1A54 940E 14C9 CALL	_delay
(0331) 	 
(0332) 	 //move body on leg 3 & 4 
(0333) 	 angleMirror(LEG_4, MOTOR_A, 0);
    1A56 2422      CLR	R2
    1A57 8228      STD	Y+0,R2
    1A58 E421      LDI	R18,0x41
    1A59 E030      LDI	R19,0
    1A5A E004      LDI	R16,4
    1A5B E010      LDI	R17,0
    1A5C 940E 16C2 CALL	_angleMirror
(0334) 	 angleMirror(LEG_1, MOTOR_C, 0);
    1A5E 2422      CLR	R2
    1A5F 8228      STD	Y+0,R2
    1A60 E423      LDI	R18,0x43
    1A61 E030      LDI	R19,0
    1A62 E001      LDI	R16,1
    1A63 E010      LDI	R17,0
    1A64 940E 16C2 CALL	_angleMirror
(0335) 	 	 	 
(0336) 	 delay(delay_time2);
    1A66 018B      MOVW	R16,R22
    1A67 940E 14C9 CALL	_delay
(0337) 	 
(0338) 	 angleMirror(LEG_1, MOTOR_C, 90);
    1A69 E58A      LDI	R24,0x5A
    1A6A 8388      STD	Y+0,R24
    1A6B E423      LDI	R18,0x43
    1A6C E030      LDI	R19,0
    1A6D E001      LDI	R16,1
    1A6E E010      LDI	R17,0
    1A6F 940E 16C2 CALL	_angleMirror
(0339) 	 angleMirror(LEG_1, MOTOR_B, 90);
    1A71 E58A      LDI	R24,0x5A
    1A72 8388      STD	Y+0,R24
    1A73 E422      LDI	R18,0x42
    1A74 E030      LDI	R19,0
    1A75 E001      LDI	R16,1
    1A76 E010      LDI	R17,0
    1A77 940E 16C2 CALL	_angleMirror
(0340) 	 
(0341) 	 delay(delay_time1);
    1A79 018A      MOVW	R16,R20
    1A7A 940E 14C9 CALL	_delay
(0342) 	 
(0343) 	 
(0344) 	 //drag body forward on legs 1 & 2 
(0345) 	 angleMirror(LEG_1, MOTOR_A, 0);
    1A7C 2422      CLR	R2
    1A7D 8228      STD	Y+0,R2
    1A7E E421      LDI	R18,0x41
    1A7F E030      LDI	R19,0
    1A80 E001      LDI	R16,1
    1A81 E010      LDI	R17,0
    1A82 940E 16C2 CALL	_angleMirror
(0346) 	 
(0347) 	 delay(delay_time2);
    1A84 018B      MOVW	R16,R22
    1A85 940E 14C9 CALL	_delay
(0348) 	
(0349) 	
(0350) 	 //pick up 3 & 4
(0351) 	 angleMirror(LEG_4, MOTOR_B, 0);
    1A87 2422      CLR	R2
    1A88 8228      STD	Y+0,R2
    1A89 E422      LDI	R18,0x42
    1A8A E030      LDI	R19,0
    1A8B E004      LDI	R16,4
    1A8C E010      LDI	R17,0
    1A8D 940E 16C2 CALL	_angleMirror
(0352) 	 angleMirror(LEG_4, MOTOR_C, 0);
    1A8F 2422      CLR	R2
    1A90 8228      STD	Y+0,R2
    1A91 E423      LDI	R18,0x43
    1A92 E030      LDI	R19,0
    1A93 E004      LDI	R16,4
    1A94 E010      LDI	R17,0
    1A95 940E 16C2 CALL	_angleMirror
(0353) 	
(0354) 	
(0355) 	 delay(delay_time1);
    1A97 018A      MOVW	R16,R20
    1A98 940E 14C9 CALL	_delay
(0356) 	
(0357) 	 //move forward in air 
(0358) 	 angleMirror(LEG_4, MOTOR_A, 180);
    1A9A EB84      LDI	R24,0xB4
    1A9B 8388      STD	Y+0,R24
    1A9C E421      LDI	R18,0x41
    1A9D E030      LDI	R19,0
    1A9E E004      LDI	R16,4
    1A9F E010      LDI	R17,0
    1AA0 940E 16C2 CALL	_angleMirror
(0359) 	
(0360) 	 delay(delay_time1);
    1AA2 018A      MOVW	R16,R20
    1AA3 940E 14C9 CALL	_delay
(0361) 	
(0362) 	//put 3 & 4 down
(0363) 	angleMirror(LEG_4, MOTOR_B, 50);
    1AA5 E382      LDI	R24,0x32
    1AA6 8388      STD	Y+0,R24
    1AA7 E422      LDI	R18,0x42
    1AA8 E030      LDI	R19,0
    1AA9 E004      LDI	R16,4
    1AAA E010      LDI	R17,0
    1AAB 940E 16C2 CALL	_angleMirror
(0364) 	angleMirror(LEG_4, MOTOR_C, 50);
    1AAD E382      LDI	R24,0x32
    1AAE 8388      STD	Y+0,R24
    1AAF E423      LDI	R18,0x43
    1AB0 E030      LDI	R19,0
    1AB1 E004      LDI	R16,4
    1AB2 E010      LDI	R17,0
    1AB3 940E 16C2 CALL	_angleMirror
(0365) 	
(0366) 	delay(delay_time1);
    1AB5 018A      MOVW	R16,R20
    1AB6 940E 14C9 CALL	_delay
(0367) 	
(0368) 	//push body on 3 & 4
(0369) 	angleMirror(LEG_4, MOTOR_A, 0);
    1AB8 2422      CLR	R2
    1AB9 8228      STD	Y+0,R2
    1ABA E421      LDI	R18,0x41
    1ABB E030      LDI	R19,0
    1ABC E004      LDI	R16,4
    1ABD E010      LDI	R17,0
    1ABE 940E 16C2 CALL	_angleMirror
(0370) 	
(0371) 	delay(delay_time2);
    1AC0 018B      MOVW	R16,R22
    1AC1 940E 14C9 CALL	_delay
(0372) 	
(0373) 	// make this more smooth
(0374) 	//make hexapod sit
(0375) 	angleMirror(LEG_4, MOTOR_B, 0);
    1AC3 2422      CLR	R2
    1AC4 8228      STD	Y+0,R2
    1AC5 E422      LDI	R18,0x42
    1AC6 E030      LDI	R19,0
    1AC7 E004      LDI	R16,4
    1AC8 E010      LDI	R17,0
    1AC9 940E 16C2 CALL	_angleMirror
(0376) 	angleMirror(LEG_4, MOTOR_C, 180);
    1ACB EB84      LDI	R24,0xB4
    1ACC 8388      STD	Y+0,R24
    1ACD E423      LDI	R18,0x43
    1ACE E030      LDI	R19,0
    1ACF E004      LDI	R16,4
    1AD0 E010      LDI	R17,0
    1AD1 940E 16C2 CALL	_angleMirror
(0377) 	delay(delay_time1);
    1AD3 018A      MOVW	R16,R20
    1AD4 940E 14C9 CALL	_delay
(0378) 	
(0379) 	angleMirror(LEG_1, MOTOR_B, 0);
    1AD6 2422      CLR	R2
    1AD7 8228      STD	Y+0,R2
    1AD8 E422      LDI	R18,0x42
    1AD9 E030      LDI	R19,0
    1ADA E001      LDI	R16,1
    1ADB E010      LDI	R17,0
    1ADC 940E 16C2 CALL	_angleMirror
(0380) 	
(0381) 	delay(delay_time1);	
    1ADE 018A      MOVW	R16,R20
    1ADF 940E 14C9 CALL	_delay
(0382) 	
(0383) 	angleMirror(LEG_4, MOTOR_A, 90);
    1AE1 E58A      LDI	R24,0x5A
    1AE2 8388      STD	Y+0,R24
    1AE3 E421      LDI	R18,0x41
    1AE4 E030      LDI	R19,0
    1AE5 E004      LDI	R16,4
    1AE6 E010      LDI	R17,0
    1AE7 940E 16C2 CALL	_angleMirror
(0384) 	 
(0385) 	delay(delay_time1);
    1AE9 018A      MOVW	R16,R20
    1AEA 940E 14C9 CALL	_delay
(0386) 	 
(0387) 	//pick up legs 5 & 6
(0388) 	angleMirror(LEG_5, MOTOR_B, 0);
    1AEC 2422      CLR	R2
    1AED 8228      STD	Y+0,R2
    1AEE E422      LDI	R18,0x42
    1AEF E030      LDI	R19,0
    1AF0 E005      LDI	R16,5
    1AF1 E010      LDI	R17,0
    1AF2 940E 16C2 CALL	_angleMirror
(0389) 	angleMirror(LEG_5, MOTOR_C, 180);
    1AF4 EB84      LDI	R24,0xB4
    1AF5 8388      STD	Y+0,R24
    1AF6 E423      LDI	R18,0x43
    1AF7 E030      LDI	R19,0
    1AF8 E005      LDI	R16,5
    1AF9 E010      LDI	R17,0
    1AFA 940E 16C2 CALL	_angleMirror
(0390) 	 
(0391) 	delay(delay_time1);
    1AFC 018A      MOVW	R16,R20
    1AFD 940E 14C9 CALL	_delay
(0392) 	 
(0393) 	//move legs 5 & 6 in air 
(0394) 	angleMirror(LEG_5, MOTOR_A, 180);
    1AFF EB84      LDI	R24,0xB4
    1B00 8388      STD	Y+0,R24
    1B01 E421      LDI	R18,0x41
    1B02 E030      LDI	R19,0
    1B03 E005      LDI	R16,5
    1B04 E010      LDI	R17,0
    1B05 940E 16C2 CALL	_angleMirror
(0395) 	 
(0396) 	delay(delay_time1);
    1B07 018A      MOVW	R16,R20
    1B08 940E 14C9 CALL	_delay
(0397) 	 
(0398) 	//crawl on 1, 2 , 3 ,4
(0399) 	angleMirror(LEG_1, MOTOR_A, 180);
    1B0A EB84      LDI	R24,0xB4
    1B0B 8388      STD	Y+0,R24
    1B0C E421      LDI	R18,0x41
    1B0D E030      LDI	R19,0
    1B0E E001      LDI	R16,1
    1B0F E010      LDI	R17,0
    1B10 940E 16C2 CALL	_angleMirror
(0400) 	angleMirror(LEG_4, MOTOR_A, 180);
    1B12 EB84      LDI	R24,0xB4
    1B13 8388      STD	Y+0,R24
    1B14 E421      LDI	R18,0x41
    1B15 E030      LDI	R19,0
    1B16 E004      LDI	R16,4
    1B17 E010      LDI	R17,0
    1B18 940E 16C2 CALL	_angleMirror
(0401) 	 
(0402) 	delay(delay_time2);
    1B1A 018B      MOVW	R16,R22
    1B1B 940E 14C9 CALL	_delay
(0403) 	 
(0404) 	//put down 1, 2, 3, 4
(0405) 	angleMirror(LEG_1, MOTOR_B, 50);
    1B1D E382      LDI	R24,0x32
    1B1E 8388      STD	Y+0,R24
    1B1F E422      LDI	R18,0x42
    1B20 E030      LDI	R19,0
    1B21 E001      LDI	R16,1
    1B22 E010      LDI	R17,0
    1B23 940E 16C2 CALL	_angleMirror
(0406) 	angleMirror(LEG_1, MOTOR_C, 50);
    1B25 E382      LDI	R24,0x32
    1B26 8388      STD	Y+0,R24
    1B27 E423      LDI	R18,0x43
    1B28 E030      LDI	R19,0
    1B29 E001      LDI	R16,1
    1B2A E010      LDI	R17,0
    1B2B 940E 16C2 CALL	_angleMirror
(0407) 	angleMirror(LEG_4, MOTOR_B, 50);
    1B2D E382      LDI	R24,0x32
    1B2E 8388      STD	Y+0,R24
    1B2F E422      LDI	R18,0x42
    1B30 E030      LDI	R19,0
    1B31 E004      LDI	R16,4
    1B32 E010      LDI	R17,0
    1B33 940E 16C2 CALL	_angleMirror
(0408) 	angleMirror(LEG_4, MOTOR_C, 50);
    1B35 E382      LDI	R24,0x32
    1B36 8388      STD	Y+0,R24
    1B37 E423      LDI	R18,0x43
    1B38 E030      LDI	R19,0
    1B39 E004      LDI	R16,4
    1B3A E010      LDI	R17,0
    1B3B 940E 16C2 CALL	_angleMirror
(0409) 	 
(0410) 	delay(delay_time1);
    1B3D 018A      MOVW	R16,R20
    1B3E 940E 14C9 CALL	_delay
(0411) 	 
(0412) 	//crawl on 1, 2 , 3 ,4
(0413) 	angleMirror(LEG_1, MOTOR_A, 0);
    1B40 2422      CLR	R2
    1B41 8228      STD	Y+0,R2
    1B42 E421      LDI	R18,0x41
    1B43 E030      LDI	R19,0
    1B44 E001      LDI	R16,1
    1B45 E010      LDI	R17,0
    1B46 940E 16C2 CALL	_angleMirror
(0414) 	angleMirror(LEG_4, MOTOR_A, 0);
    1B48 2422      CLR	R2
    1B49 8228      STD	Y+0,R2
    1B4A E421      LDI	R18,0x41
    1B4B E030      LDI	R19,0
    1B4C E004      LDI	R16,4
    1B4D E010      LDI	R17,0
    1B4E 940E 16C2 CALL	_angleMirror
(0415) 	
(0416) 	delay(delay_time2);
    1B50 018B      MOVW	R16,R22
    1B51 940E 14C9 CALL	_delay
(0417) 	 
(0418) 	 
(0419) 	//put down 5 & 6 
(0420) 	angleMirror(LEG_5, MOTOR_B, 50);
    1B53 E382      LDI	R24,0x32
    1B54 8388      STD	Y+0,R24
    1B55 E422      LDI	R18,0x42
    1B56 E030      LDI	R19,0
    1B57 E005      LDI	R16,5
    1B58 E010      LDI	R17,0
    1B59 940E 16C2 CALL	_angleMirror
(0421) 	angleMirror(LEG_5, MOTOR_C, 50);
    1B5B E382      LDI	R24,0x32
    1B5C 8388      STD	Y+0,R24
    1B5D E423      LDI	R18,0x43
    1B5E E030      LDI	R19,0
    1B5F E005      LDI	R16,5
    1B60 E010      LDI	R17,0
    1B61 940E 16C2 CALL	_angleMirror
(0422) 	 
(0423) 	delay(delay_time1);
    1B63 018A      MOVW	R16,R20
    1B64 940E 14C9 CALL	_delay
(0424) 	 
(0425) 	//stand up and dance
(0426) 	 
(0427) 	angleMirror(LEG_1, MOTOR_B, 90);
    1B66 E58A      LDI	R24,0x5A
    1B67 8388      STD	Y+0,R24
    1B68 E422      LDI	R18,0x42
    1B69 E030      LDI	R19,0
    1B6A E001      LDI	R16,1
    1B6B E010      LDI	R17,0
    1B6C 940E 16C2 CALL	_angleMirror
(0428) 	angleMirror(LEG_1, MOTOR_C, 90);
    1B6E E58A      LDI	R24,0x5A
    1B6F 8388      STD	Y+0,R24
    1B70 E423      LDI	R18,0x43
    1B71 E030      LDI	R19,0
    1B72 E001      LDI	R16,1
    1B73 E010      LDI	R17,0
    1B74 940E 16C2 CALL	_angleMirror
(0429) 	angleMirror(LEG_4, MOTOR_B, 90);
    1B76 E58A      LDI	R24,0x5A
    1B77 8388      STD	Y+0,R24
    1B78 E422      LDI	R18,0x42
    1B79 E030      LDI	R19,0
    1B7A E004      LDI	R16,4
    1B7B E010      LDI	R17,0
    1B7C 940E 16C2 CALL	_angleMirror
(0430) 	angleMirror(LEG_4, MOTOR_C, 90);
    1B7E E58A      LDI	R24,0x5A
    1B7F 8388      STD	Y+0,R24
    1B80 E423      LDI	R18,0x43
    1B81 E030      LDI	R19,0
    1B82 E004      LDI	R16,4
    1B83 E010      LDI	R17,0
    1B84 940E 16C2 CALL	_angleMirror
(0431) 	angleMirror(LEG_5, MOTOR_B, 90);
    1B86 E58A      LDI	R24,0x5A
    1B87 8388      STD	Y+0,R24
    1B88 E422      LDI	R18,0x42
    1B89 E030      LDI	R19,0
    1B8A E005      LDI	R16,5
    1B8B E010      LDI	R17,0
    1B8C 940E 16C2 CALL	_angleMirror
(0432) 	angleMirror(LEG_5, MOTOR_C, 90);
    1B8E E58A      LDI	R24,0x5A
    1B8F 8388      STD	Y+0,R24
    1B90 E423      LDI	R18,0x43
    1B91 E030      LDI	R19,0
    1B92 E005      LDI	R16,5
    1B93 E010      LDI	R17,0
    1B94 940E 16C2 CALL	_angleMirror
(0433) 	 
(0434) 	delay(delay_time1);
    1B96 018A      MOVW	R16,R20
    1B97 940E 14C9 CALL	_delay
(0435) 	 
(0436) 	angleMirror(LEG_5, MOTOR_A, 90);
    1B99 E58A      LDI	R24,0x5A
    1B9A 8388      STD	Y+0,R24
    1B9B E421      LDI	R18,0x41
    1B9C E030      LDI	R19,0
    1B9D E005      LDI	R16,5
    1B9E E010      LDI	R17,0
    1B9F 940E 16C2 CALL	_angleMirror
(0437) 	 
(0438) 	delay(ONE_SEC);
    1BA1 E900      LDI	R16,0x90
    1BA2 E011      LDI	R17,1
    1BA3 940E 14C9 CALL	_delay
(0439) 	 
(0440) 	servo_calibration(); //must be called as the first instruction
    1BA5 940E 12FC CALL	_servo_calibration
(0441) 	 
(0442) 	delay(ONE_SEC);
    1BA7 E900      LDI	R16,0x90
    1BA8 E011      LDI	R17,1
    1BA9 940E 14C9 CALL	_delay
    1BAB 9621      ADIW	R28,1
    1BAC 940C 1E5F JMP	pop_xgsetF000
_walk_on_four:
  i                    --> R10
  lift                 --> R22
  delay_time           --> R20
    1BAE 940E 1E64 CALL	push_xgsetF00C
    1BB0 9722      SBIW	R28,2
(0443) 	 
(0444) 	 	 
(0445) }
(0446) 
(0447) /**
(0448) The hexapod moves on four legs
(0449) This method doesnt work as planned
(0450) */
(0451) void walk_on_four() {
(0452) 	 
(0453) 	 unsigned char lift = 120;
    1BB1 E768      LDI	R22,0x78
(0454) 	 unsigned char delay_time  = HUNDRED_MSEC;
    1BB2 E248      LDI	R20,0x28
(0455) 	 int i = 10;
    1BB3 E08A      LDI	R24,0xA
    1BB4 E090      LDI	R25,0
    1BB5 015C      MOVW	R10,R24
(0456) 	 //come to pose
(0457) 	 pose(1,2,0);
    1BB6 2422      CLR	R2
    1BB7 2433      CLR	R3
    1BB8 8239      STD	Y+1,R3
    1BB9 8228      STD	Y+0,R2
    1BBA E022      LDI	R18,2
    1BBB E001      LDI	R16,1
    1BBC DB3A      RCALL	_pose
(0458) 	 
(0459) 	 delay(ONE_SEC);
    1BBD E900      LDI	R16,0x90
    1BBE E011      LDI	R17,1
    1BBF 940E 14C9 CALL	_delay
(0460) 	 delay(ONE_SEC);
    1BC1 E900      LDI	R16,0x90
    1BC2 E011      LDI	R17,1
    1BC3 940E 14C9 CALL	_delay
    1BC5 C03E      RJMP	0x1C04
(0461) 	 
(0462) 	 
(0463) 	 while(i-- > 0) {
(0464) 	 
(0465) 	 //adjust body weight
(0466) 	 //angle(LEG_6, MOTOR_A, 90 - 50);	
(0467) 	 //angle(LEG_5, MOTOR_A, 90 + 50);
(0468) 	 
(0469) 	 //delay(ONE_SEC);
(0470) 	 
(0471) 	 angle(LEG_3, MOTOR_B, lift);
    1BC6 8368      STD	Y+0,R22
    1BC7 E422      LDI	R18,0x42
    1BC8 E003      LDI	R16,3
    1BC9 940E 151C CALL	_angle
(0472) 	 angle(LEG_4, MOTOR_B, 180);
    1BCB EB84      LDI	R24,0xB4
    1BCC 8388      STD	Y+0,R24
    1BCD E422      LDI	R18,0x42
    1BCE E004      LDI	R16,4
    1BCF 940E 151C CALL	_angle
(0473) 	 
(0474) 	 delay(delay_time);
    1BD1 2F04      MOV	R16,R20
    1BD2 2711      CLR	R17
    1BD3 940E 14C9 CALL	_delay
(0475) 	 
(0476) 	 //move left forward leg forward in air
(0477) 	 angle(LEG_3, MOTOR_A, 70);
    1BD5 E486      LDI	R24,0x46
    1BD6 8388      STD	Y+0,R24
    1BD7 E421      LDI	R18,0x41
    1BD8 E003      LDI	R16,3
    1BD9 940E 151C CALL	_angle
(0478) 	 angle(LEG_4, MOTOR_A, 90);
    1BDB E58A      LDI	R24,0x5A
    1BDC 8388      STD	Y+0,R24
    1BDD E421      LDI	R18,0x41
    1BDE E004      LDI	R16,4
    1BDF 940E 151C CALL	_angle
(0479) 	 
(0480) 	 delay(delay_time);
    1BE1 2F04      MOV	R16,R20
    1BE2 2711      CLR	R17
    1BE3 940E 14C9 CALL	_delay
(0481) 	 
(0482) 	 angle(LEG_3, MOTOR_B, 180);
    1BE5 EB84      LDI	R24,0xB4
    1BE6 8388      STD	Y+0,R24
    1BE7 E422      LDI	R18,0x42
    1BE8 E003      LDI	R16,3
    1BE9 940E 151C CALL	_angle
(0483) 	 angle(LEG_4, MOTOR_B, lift);
    1BEB 8368      STD	Y+0,R22
    1BEC E422      LDI	R18,0x42
    1BED E004      LDI	R16,4
    1BEE 940E 151C CALL	_angle
(0484) 	 
(0485) 	 delay(delay_time);
    1BF0 2F04      MOV	R16,R20
    1BF1 2711      CLR	R17
    1BF2 940E 14C9 CALL	_delay
(0486) 	 
(0487) 	 angle(LEG_3, MOTOR_A, 90);
    1BF4 E58A      LDI	R24,0x5A
    1BF5 8388      STD	Y+0,R24
    1BF6 E421      LDI	R18,0x41
    1BF7 E003      LDI	R16,3
    1BF8 940E 151C CALL	_angle
(0488) 	 angle(LEG_4, MOTOR_A, 70);
    1BFA E486      LDI	R24,0x46
    1BFB 8388      STD	Y+0,R24
    1BFC E421      LDI	R18,0x41
    1BFD E004      LDI	R16,4
    1BFE 940E 151C CALL	_angle
(0489) 	 	 
(0490) 	 delay(delay_time);
    1C00 2F04      MOV	R16,R20
    1C01 2711      CLR	R17
    1C02 940E 14C9 CALL	_delay
    1C04 0125      MOVW	R4,R10
    1C05 01C2      MOVW	R24,R4
    1C06 9701      SBIW	R24,1
    1C07 015C      MOVW	R10,R24
    1C08 2422      CLR	R2
    1C09 2433      CLR	R3
    1C0A 1424      CP	R2,R4
    1C0B 0435      CPC	R3,R5
    1C0C F40C      BGE	0x1C0E
    1C0D CFB8      RJMP	0x1BC6
    1C0E 9622      ADIW	R28,2
    1C0F 940C 1E6B JMP	pop_xgsetF00C
_keyboard_control:
    1C11 940E 1E50 CALL	push_xgset300C
FILE: C:\Users\ERTSLA~1\Downloads\BUILDI~2\keyboard.c
(0001) /***
(0002) Author : Srijit Dutt
(0003) Date Sun 07 Nov 2010 02:42:38 PM IST 
(0004) 
(0005) keyboard.c : File contains various advanced motion functions for the hexapod
(0006) Please include keyboard.h file to call function from this file
(0007) 
(0008) The various functions are : 
(0009) keyboard_control
(0010) */
(0011) 
(0012) /*********************************************************************************
(0013) 
(0014)    Copyright (c) 2010, ERTS Lab IIT Bombay erts@cse.iitb.ac.in               -*- c -*-
(0015)    All rights reserved.
(0016) 
(0017)    Redistribution and use in source and binary forms, with or without
(0018)    modification, are permitted provided that the following conditions are met:
(0019) 
(0020)    * Redistributions of source code must retain the above copyright
(0021)      notice, this list of conditions and the following disclaimer.
(0022) 
(0023)    * Redistributions in binary form must reproduce the above copyright
(0024)      notice, this list of conditions and the following disclaimer in
(0025)      the documentation and/or other materials provided with the
(0026)      distribution.
(0027) 
(0028)    * Neither the name of the copyright holders nor the names of
(0029)      contributors may be used to endorse or promote products derived
(0030)      from this software without specific prior written permission.
(0031) 
(0032)    * Source code can be used for academic purpose. 
(0033) 	 For commercial use permission form the author needs to be taken.
(0034) 
(0035)   THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
(0036)   AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
(0037)   IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
(0038)   ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
(0039)   LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
(0040)   CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
(0041)   SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
(0042)   INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
(0043)   CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
(0044)   ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
(0045)   POSSIBILITY OF SUCH DAMAGE. 
(0046) 
(0047)   Software released under Creative Commence cc by-nc-sa licence.
(0048)   For legal information refer to: 
(0049)   http://creativecommons.org/licenses/by-nc-sa/3.0/legalcode
(0050) 
(0051) ********************************************************************************/
(0052) 
(0053) 
(0054) 
(0055) 
(0056) #include "hexapod_macro.h"
(0057) #include "hexapod.h"
(0058) #include "gait.h"
(0059) #include "hexapod_motions.h"
(0060) #include "hexapod_basic.h"
(0061) 
(0062) 
(0063) extern unsigned char data;//!< The keyborad command given by user
(0064) extern unsigned char mode;
(0065) extern unsigned int legNo;
(0066) extern unsigned int dir;
(0067) extern double movementScaling;
(0068) 
(0069) /**
(0070) Controls hexapod through keyboard using ZigBee communication
(0071) */
(0072) void keyboard_control(void) 
(0073) {	
(0074) 	static char change = 15;
(0075) 	
(0076) 	switch(data) 
    1C13 9140 0219 LDS	R20,data
    1C15 2755      CLR	R21
    1C16 364C      CPI	R20,0x6C
    1C17 E0E0      LDI	R30,0
    1C18 075E      CPC	R21,R30
    1C19 F409      BNE	0x1C1B
    1C1A C04C      RJMP	0x1C67
    1C1B 364D      CPI	R20,0x6D
    1C1C E0E0      LDI	R30,0
    1C1D 075E      CPC	R21,R30
    1C1E F409      BNE	0x1C20
    1C1F C03F      RJMP	0x1C5F
    1C20 E68D      LDI	R24,0x6D
    1C21 E090      LDI	R25,0
    1C22 1784      CP	R24,R20
    1C23 0795      CPC	R25,R21
    1C24 F124      BLT	0x1C49
    1C25 324B      CPI	R20,0x2B
    1C26 E0E0      LDI	R30,0
    1C27 075E      CPC	R21,R30
    1C28 F40C      BGE	0x1C2A
    1C29 C184      RJMP	0x1DAE
    1C2A E38E      LDI	R24,0x3E
    1C2B E090      LDI	R25,0
    1C2C 1784      CP	R24,R20
    1C2D 0795      CPC	R25,R21
    1C2E F084      BLT	0x1C3F
    1C2F E003      LDI	R16,3
    1C30 E010      LDI	R17,0
    1C31 019A      MOVW	R18,R20
    1C32 940E 1E21 CALL	empy16s
    1C34 01F8      MOVW	R30,R16
    1C35 EA8B      LDI	R24,0xAB
    1C36 E090      LDI	R25,0
    1C37 0FE8      ADD	R30,R24
    1C38 1FF9      ADC	R31,R25
    1C39 9027      ELPM	R2,Z+
    1C3A 9037      ELPM	R3,Z+
    1C3B 9006      ELPM	R0,0(Z)
    1C3C BE0C      OUT	0x3C,R0
    1C3D 01F1      MOVW	R30,R2
    1C3E 9419      IJMP
    1C3F 3642      CPI	R20,0x62
    1C40 E0E0      LDI	R30,0
    1C41 075E      CPC	R21,R30
    1C42 F409      BNE	0x1C44
    1C43 C167      RJMP	0x1DAB
    1C44 3644      CPI	R20,0x64
    1C45 E0E0      LDI	R30,0
    1C46 075E      CPC	R21,R30
    1C47 F189      BEQ	0x1C79
    1C48 C165      RJMP	0x1DAE
    1C49 3743      CPI	R20,0x73
    1C4A E0E0      LDI	R30,0
    1C4B 075E      CPC	R21,R30
    1C4C F079      BEQ	0x1C5C
    1C4D 3744      CPI	R20,0x74
    1C4E E0E0      LDI	R30,0
    1C4F 075E      CPC	R21,R30
    1C50 F091      BEQ	0x1C63
    1C51 3743      CPI	R20,0x73
    1C52 E0E0      LDI	R30,0
    1C53 075E      CPC	R21,R30
    1C54 F40C      BGE	0x1C56
    1C55 C158      RJMP	0x1DAE
    1C56 374A      CPI	R20,0x7A
    1C57 E0E0      LDI	R30,0
    1C58 075E      CPC	R21,R30
    1C59 F409      BNE	0x1C5B
    1C5A C153      RJMP	0x1DAE
    1C5B C152      RJMP	0x1DAE
(0077) 	{
(0078) 	   case 's': //mode to reset the hexapod
(0079) 	         servo_calibration();
    1C5C 940E 12FC CALL	_servo_calibration
(0080) 			 break;	
    1C5E C152      RJMP	0x1DB1
(0081) 	   case 'm': //mode to move the hexapod
(0082) 	         mode = 'm';
    1C5F E68D      LDI	R24,0x6D
    1C60 9380 0218 STS	mode,R24
(0083) 			 break;
    1C62 C14E      RJMP	0x1DB1
(0084) 	   case 't': //mode to turn the hexapod
(0085) 	   		mode = 't';
    1C63 E784      LDI	R24,0x74
    1C64 9380 0218 STS	mode,R24
(0086) 			break;
    1C66 C14A      RJMP	0x1DB1
(0087) 	   case 'l':
(0088) 	   		mode = 'l';
    1C67 E68C      LDI	R24,0x6C
    1C68 9380 0218 STS	mode,R24
(0089) 			break;
    1C6A C146      RJMP	0x1DB1
(0090) 	   case '<':
(0091) 	   		dir = CLOCK_WISE;
    1C6B E081      LDI	R24,1
    1C6C E090      LDI	R25,0
    1C6D 9390 0215 STS	dir+1,R25
    1C6F 9380 0214 STS	dir,R24
(0092) 			break;
    1C71 C13F      RJMP	0x1DB1
(0093) 	   case '>':
(0094) 	   		dir = ANTI_CLOCK_WISE;
    1C72 2422      CLR	R2
    1C73 2433      CLR	R3
    1C74 9230 0215 STS	dir+1,R3
    1C76 9220 0214 STS	dir,R2
(0095) 			break;
    1C78 C138      RJMP	0x1DB1
(0096) 	   case 'd':
(0097) 	   		mode = 'd';
    1C79 E684      LDI	R24,0x64
    1C7A 9380 0218 STS	mode,R24
(0098) 			break;
    1C7C C134      RJMP	0x1DB1
(0099) 	   case '-': // case num-2
(0100) 	   		movementScaling -= 0.1;
    1C7D 9040 0210 LDS	R4,movementScaling+2
    1C7F 9050 0211 LDS	R5,movementScaling+3
    1C81 9020 020E LDS	R2,movementScaling
    1C83 9030 020F LDS	R3,movementScaling+1
    1C85 E00A      LDI	R16,0xA
    1C86 E012      LDI	R17,2
    1C87 940E 1E0D CALL	elpm32
    1C89 933A      ST	R19,-Y
    1C8A 932A      ST	R18,-Y
    1C8B 931A      ST	R17,-Y
    1C8C 930A      ST	R16,-Y
    1C8D 0181      MOVW	R16,R2
    1C8E 0192      MOVW	R18,R4
    1C8F 940E 1F19 CALL	fpsub2
    1C91 9310 020F STS	movementScaling+1,R17
    1C93 9300 020E STS	movementScaling,R16
    1C95 9330 0211 STS	movementScaling+3,R19
    1C97 9320 0210 STS	movementScaling+2,R18
(0101) 			if (movementScaling < 0.1) movementScaling = 0.1;
    1C99 0118      MOVW	R2,R16
    1C9A 0129      MOVW	R4,R18
    1C9B E00A      LDI	R16,0xA
    1C9C E012      LDI	R17,2
    1C9D 940E 1E0D CALL	elpm32
    1C9F 933A      ST	R19,-Y
    1CA0 932A      ST	R18,-Y
    1CA1 931A      ST	R17,-Y
    1CA2 930A      ST	R16,-Y
    1CA3 0181      MOVW	R16,R2
    1CA4 0192      MOVW	R18,R4
    1CA5 940E 204A CALL	fpcmp2
    1CA7 F00C      BLT	0x1CA9
    1CA8 C108      RJMP	0x1DB1
    1CA9 E00A      LDI	R16,0xA
    1CAA E012      LDI	R17,2
    1CAB 940E 1E0D CALL	elpm32
    1CAD 9310 020F STS	movementScaling+1,R17
    1CAF 9300 020E STS	movementScaling,R16
    1CB1 9330 0211 STS	movementScaling+3,R19
    1CB3 9320 0210 STS	movementScaling+2,R18
(0102) 			break;
    1CB5 C0FB      RJMP	0x1DB1
(0103) 	   case '+': // case num-8 
(0104) 	   		movementScaling += 0.1;
    1CB6 9040 0210 LDS	R4,movementScaling+2
    1CB8 9050 0211 LDS	R5,movementScaling+3
    1CBA 9020 020E LDS	R2,movementScaling
    1CBC 9030 020F LDS	R3,movementScaling+1
    1CBE E00A      LDI	R16,0xA
    1CBF E012      LDI	R17,2
    1CC0 940E 1E0D CALL	elpm32
    1CC2 933A      ST	R19,-Y
    1CC3 932A      ST	R18,-Y
    1CC4 931A      ST	R17,-Y
    1CC5 930A      ST	R16,-Y
    1CC6 0181      MOVW	R16,R2
    1CC7 0192      MOVW	R18,R4
    1CC8 940E 1F0E CALL	fpadd2
    1CCA 9310 020F STS	movementScaling+1,R17
    1CCC 9300 020E STS	movementScaling,R16
    1CCE 9330 0211 STS	movementScaling+3,R19
    1CD0 9320 0210 STS	movementScaling+2,R18
(0105) 			if (movementScaling > 1.0) movementScaling = 1.0;
    1CD2 E08E      LDI	R24,0xE
    1CD3 E092      LDI	R25,2
    1CD4 E006      LDI	R16,6
    1CD5 E012      LDI	R17,2
    1CD6 940E 1E0D CALL	elpm32
    1CD8 939A      ST	R25,-Y
    1CD9 938A      ST	R24,-Y
    1CDA 940E 203F CALL	fpcmp1
    1CDC F00C      BLT	0x1CDE
    1CDD C0D3      RJMP	0x1DB1
    1CDE E006      LDI	R16,6
    1CDF E012      LDI	R17,2
    1CE0 940E 1E0D CALL	elpm32
    1CE2 9310 020F STS	movementScaling+1,R17
    1CE4 9300 020E STS	movementScaling,R16
    1CE6 9330 0211 STS	movementScaling+3,R19
    1CE8 9320 0210 STS	movementScaling+2,R18
(0106) 			break;
    1CEA C0C6      RJMP	0x1DB1
(0107) 	   case '1': 
(0108) 	   		if (mode == 'l') legNo = 1;
    1CEB 9180 0218 LDS	R24,mode
    1CED 368C      CPI	R24,0x6C
    1CEE F431      BNE	0x1CF5
    1CEF E081      LDI	R24,1
    1CF0 E090      LDI	R25,0
    1CF1 9390 0217 STS	legNo+1,R25
    1CF3 9380 0216 STS	legNo,R24
(0109) 			if (mode == 'm') mode = 1;
    1CF5 9180 0218 LDS	R24,mode
    1CF7 368D      CPI	R24,0x6D
    1CF8 F419      BNE	0x1CFC
    1CF9 E081      LDI	R24,1
    1CFA 9380 0218 STS	mode,R24
(0110) 			if (mode == 't') mode = 11;
    1CFC 9180 0218 LDS	R24,mode
    1CFE 3784      CPI	R24,0x74
    1CFF F419      BNE	0x1D03
    1D00 E08B      LDI	R24,0xB
    1D01 9380 0218 STS	mode,R24
(0111) 			if (mode == 'd') mode = 21;
    1D03 9180 0218 LDS	R24,mode
    1D05 3684      CPI	R24,0x64
    1D06 F009      BEQ	0x1D08
    1D07 C0A9      RJMP	0x1DB1
    1D08 E185      LDI	R24,0x15
    1D09 9380 0218 STS	mode,R24
(0112) 			break;
    1D0B C0A5      RJMP	0x1DB1
(0113) 	   case '2':
(0114) 	   		 if (mode == 'l') legNo = 2;
    1D0C 9180 0218 LDS	R24,mode
    1D0E 368C      CPI	R24,0x6C
    1D0F F431      BNE	0x1D16
    1D10 E082      LDI	R24,2
    1D11 E090      LDI	R25,0
    1D12 9390 0217 STS	legNo+1,R25
    1D14 9380 0216 STS	legNo,R24
(0115) 			 if (mode == 'm') mode = 2;
    1D16 9180 0218 LDS	R24,mode
    1D18 368D      CPI	R24,0x6D
    1D19 F419      BNE	0x1D1D
    1D1A E082      LDI	R24,2
    1D1B 9380 0218 STS	mode,R24
(0116) 			 if (mode == 't') mode = 12;
    1D1D 9180 0218 LDS	R24,mode
    1D1F 3784      CPI	R24,0x74
    1D20 F419      BNE	0x1D24
    1D21 E08C      LDI	R24,0xC
    1D22 9380 0218 STS	mode,R24
(0117) 			 if (mode == 'd') mode = 22; 
    1D24 9180 0218 LDS	R24,mode
    1D26 3684      CPI	R24,0x64
    1D27 F009      BEQ	0x1D29
    1D28 C088      RJMP	0x1DB1
    1D29 E186      LDI	R24,0x16
    1D2A 9380 0218 STS	mode,R24
(0118) 			 break;
    1D2C C084      RJMP	0x1DB1
(0119) 	   case '3':
(0120) 	   		if (mode == 'l') legNo = 3; 
    1D2D 9180 0218 LDS	R24,mode
    1D2F 368C      CPI	R24,0x6C
    1D30 F431      BNE	0x1D37
    1D31 E083      LDI	R24,3
    1D32 E090      LDI	R25,0
    1D33 9390 0217 STS	legNo+1,R25
    1D35 9380 0216 STS	legNo,R24
(0121) 			if (mode == 'm') mode = 3;
    1D37 9180 0218 LDS	R24,mode
    1D39 368D      CPI	R24,0x6D
    1D3A F419      BNE	0x1D3E
    1D3B E083      LDI	R24,3
    1D3C 9380 0218 STS	mode,R24
(0122) 			if (mode == 't') mode = 13;
    1D3E 9180 0218 LDS	R24,mode
    1D40 3784      CPI	R24,0x74
    1D41 F419      BNE	0x1D45
    1D42 E08D      LDI	R24,0xD
    1D43 9380 0218 STS	mode,R24
(0123) 			if (mode == 'd') mode = 23;
    1D45 9180 0218 LDS	R24,mode
    1D47 3684      CPI	R24,0x64
    1D48 F009      BEQ	0x1D4A
    1D49 C067      RJMP	0x1DB1
    1D4A E187      LDI	R24,0x17
    1D4B 9380 0218 STS	mode,R24
(0124) 			break;
    1D4D C063      RJMP	0x1DB1
(0125) 	   case '4':
(0126) 	   		if (mode == 'l') legNo = 4;
    1D4E 9180 0218 LDS	R24,mode
    1D50 368C      CPI	R24,0x6C
    1D51 F431      BNE	0x1D58
    1D52 E084      LDI	R24,4
    1D53 E090      LDI	R25,0
    1D54 9390 0217 STS	legNo+1,R25
    1D56 9380 0216 STS	legNo,R24
(0127) 			if (mode == 'm') mode = 4;
    1D58 9180 0218 LDS	R24,mode
    1D5A 368D      CPI	R24,0x6D
    1D5B F419      BNE	0x1D5F
    1D5C E084      LDI	R24,4
    1D5D 9380 0218 STS	mode,R24
(0128) 			if (mode == 't') mode = 14;
    1D5F 9180 0218 LDS	R24,mode
    1D61 3784      CPI	R24,0x74
    1D62 F419      BNE	0x1D66
    1D63 E08E      LDI	R24,0xE
    1D64 9380 0218 STS	mode,R24
(0129) 			if (mode == 'd') mode = 24;
    1D66 9180 0218 LDS	R24,mode
    1D68 3684      CPI	R24,0x64
    1D69 F009      BEQ	0x1D6B
    1D6A C046      RJMP	0x1DB1
    1D6B E188      LDI	R24,0x18
    1D6C 9380 0218 STS	mode,R24
(0130) 			break;
    1D6E C042      RJMP	0x1DB1
(0131) 	   case '5':
(0132) 	   		if (mode == 'l') legNo = 5;
    1D6F 9180 0218 LDS	R24,mode
    1D71 368C      CPI	R24,0x6C
    1D72 F431      BNE	0x1D79
    1D73 E085      LDI	R24,5
    1D74 E090      LDI	R25,0
    1D75 9390 0217 STS	legNo+1,R25
    1D77 9380 0216 STS	legNo,R24
(0133) 			if (mode == 'm') mode = 5; 
    1D79 9180 0218 LDS	R24,mode
    1D7B 368D      CPI	R24,0x6D
    1D7C F5A1      BNE	0x1DB1
    1D7D E085      LDI	R24,5
    1D7E 9380 0218 STS	mode,R24
(0134) 			break;
    1D80 C030      RJMP	0x1DB1
(0135) 	   case '6':
(0136) 	   		if (mode == 'l') legNo = 6;
    1D81 9180 0218 LDS	R24,mode
    1D83 368C      CPI	R24,0x6C
    1D84 F431      BNE	0x1D8B
    1D85 E086      LDI	R24,6
    1D86 E090      LDI	R25,0
    1D87 9390 0217 STS	legNo+1,R25
    1D89 9380 0216 STS	legNo,R24
(0137) 			if (mode == 'm') mode = 6;
    1D8B 9180 0218 LDS	R24,mode
    1D8D 368D      CPI	R24,0x6D
    1D8E F511      BNE	0x1DB1
    1D8F E086      LDI	R24,6
    1D90 9380 0218 STS	mode,R24
(0138) 			break;
    1D92 C01E      RJMP	0x1DB1
(0139) 	   case '7':
(0140) 	   		if (mode == 'm') mode = 7;
    1D93 9180 0218 LDS	R24,mode
    1D95 368D      CPI	R24,0x6D
    1D96 F4D1      BNE	0x1DB1
    1D97 E087      LDI	R24,7
    1D98 9380 0218 STS	mode,R24
(0141) 			break;
    1D9A C016      RJMP	0x1DB1
(0142) 	   case '8':
(0143) 	   		if (mode == 'm') mode = 8;
    1D9B 9180 0218 LDS	R24,mode
    1D9D 368D      CPI	R24,0x6D
    1D9E F491      BNE	0x1DB1
    1D9F E088      LDI	R24,0x8
    1DA0 9380 0218 STS	mode,R24
(0144) 			break;
    1DA2 C00E      RJMP	0x1DB1
(0145) 	   case '9':
(0146) 	   		if (mode == 'm') mode = 9;
    1DA3 9180 0218 LDS	R24,mode
    1DA5 368D      CPI	R24,0x6D
    1DA6 F451      BNE	0x1DB1
    1DA7 E089      LDI	R24,0x9
    1DA8 9380 0218 STS	mode,R24
(0147) 			break;
    1DAA C006      RJMP	0x1DB1
(0148) 	   case 'b':
(0149) 	   		buzzer_on_off();
    1DAB 940E 1653 CALL	_buzzer_on_off
(0150) 			break;
    1DAD C003      RJMP	0x1DB1
(0151) 	   case 'z':	
(0152) 	   default :
(0153) 			mode = 'z';
    1DAE E78A      LDI	R24,0x7A
    1DAF 9380 0218 STS	mode,R24
(0154) 			break;
(0155) 	}	           
(0156) 	 	
(0157) 	data = '';
FILE: <library>
    1DB1 2422      CLR	R2
    1DB2 9220 0219 STS	data,R2
    1DB4 940C 1E55 JMP	pop_xgset300C
push_arg4:
    1DB6 933A      ST	R19,-Y
    1DB7 932A      ST	R18,-Y
push_arg2:
    1DB8 931A      ST	R17,-Y
    1DB9 930A      ST	R16,-Y
    1DBA 9508      RET
mod16s:
    1DBB 9468      BSET	6
    1DBC 92DA      ST	R13,-Y
    1DBD 2ED1      MOV	R13,R17
    1DBE C004      RJMP	0x1DC3
div16s:
    1DBF 94E8      BCLR	6
    1DC0 92DA      ST	R13,-Y
    1DC1 2ED1      MOV	R13,R17
    1DC2 26D3      EOR	R13,R19
    1DC3 FF17      SBRS	R17,7
    1DC4 C004      RJMP	0x1DC9
    1DC5 9510      COM	R17
    1DC6 9500      COM	R16
    1DC7 5F0F      SUBI	R16,0xFF
    1DC8 4F1F      SBCI	R17,0xFF
    1DC9 FF37      SBRS	R19,7
    1DCA C004      RJMP	0x1DCF
    1DCB 9530      COM	R19
    1DCC 9520      COM	R18
    1DCD 5F2F      SUBI	R18,0xFF
    1DCE 4F3F      SBCI	R19,0xFF
    1DCF 940E 1DDC CALL	xdiv16u
    1DD1 FED7      SBRS	R13,7
    1DD2 C004      RJMP	0x1DD7
    1DD3 9510      COM	R17
    1DD4 9500      COM	R16
    1DD5 5F0F      SUBI	R16,0xFF
    1DD6 4F1F      SBCI	R17,0xFF
    1DD7 90D9      LD	R13,Y+
    1DD8 9508      RET
mod16u:
    1DD9 9468      BSET	6
    1DDA C001      RJMP	xdiv16u
div16u:
    1DDB 94E8      BCLR	6
xdiv16u:
    1DDC 92EA      ST	R14,-Y
    1DDD 92FA      ST	R15,-Y
    1DDE 938A      ST	R24,-Y
    1DDF 24EE      CLR	R14
    1DE0 24FF      CLR	R15
    1DE1 E180      LDI	R24,0x10
    1DE2 0F00      LSL	R16
    1DE3 1F11      ROL	R17
    1DE4 1CEE      ROL	R14
    1DE5 1CFF      ROL	R15
    1DE6 16E2      CP	R14,R18
    1DE7 06F3      CPC	R15,R19
    1DE8 F018      BCS	0x1DEC
    1DE9 1AE2      SUB	R14,R18
    1DEA 0AF3      SBC	R15,R19
    1DEB 9503      INC	R16
    1DEC 958A      DEC	R24
    1DED F7A1      BNE	0x1DE2
    1DEE F416      BRTC	0x1DF1
    1DEF 2D0E      MOV	R16,R14
    1DF0 2D1F      MOV	R17,R15
    1DF1 9189      LD	R24,Y+
    1DF2 90F9      LD	R15,Y+
    1DF3 90E9      LD	R14,Y+
    1DF4 9508      RET
mod8u:
    1DF5 9468      BSET	6
    1DF6 C001      RJMP	xdiv8u
div8u:
    1DF7 94E8      BCLR	6
xdiv8u:
    1DF8 932A      ST	R18,-Y
    1DF9 92FA      ST	R15,-Y
    1DFA 92EA      ST	R14,-Y
    1DFB 24FF      CLR	R15
    1DFC 24EE      CLR	R14
    1DFD E120      LDI	R18,0x10
    1DFE 0F00      LSL	R16
    1DFF 1CFF      ROL	R15
    1E00 1CEE      ROL	R14
    1E01 16E1      CP	R14,R17
    1E02 F010      BCS	0x1E05
    1E03 1AE1      SUB	R14,R17
    1E04 9503      INC	R16
    1E05 952A      DEC	R18
    1E06 F7B9      BNE	0x1DFE
    1E07 F40E      BRTC	0x1E09
    1E08 2D0E      MOV	R16,R14
    1E09 90E9      LD	R14,Y+
    1E0A 90F9      LD	R15,Y+
    1E0B 9129      LD	R18,Y+
    1E0C 9508      RET
elpm32:
    1E0D 93EA      ST	R30,-Y
    1E0E 93FA      ST	R31,-Y
    1E0F 920A      ST	R0,-Y
    1E10 2FE0      MOV	R30,R16
    1E11 2FF1      MOV	R31,R17
    1E12 95D8      ELPM
    1E13 2D00      MOV	R16,R0
    1E14 9631      ADIW	R30,1
    1E15 95D8      ELPM
    1E16 2D10      MOV	R17,R0
    1E17 9631      ADIW	R30,1
    1E18 95D8      ELPM
    1E19 2D20      MOV	R18,R0
    1E1A 9631      ADIW	R30,1
    1E1B 95D8      ELPM
    1E1C 2D30      MOV	R19,R0
    1E1D 9009      LD	R0,Y+
    1E1E 91F9      LD	R31,Y+
    1E1F 91E9      LD	R30,Y+
    1E20 9508      RET
empy16s:
    1E21 920A      ST	R0,-Y
    1E22 921A      ST	R1,-Y
    1E23 938A      ST	R24,-Y
    1E24 939A      ST	R25,-Y
    1E25 9F02      MUL	R16,R18
    1E26 01C0      MOVW	R24,R0
    1E27 9F12      MUL	R17,R18
    1E28 0D90      ADD	R25,R0
    1E29 9F03      MUL	R16,R19
    1E2A 0D90      ADD	R25,R0
    1E2B 018C      MOVW	R16,R24
    1E2C 9199      LD	R25,Y+
    1E2D 9189      LD	R24,Y+
    1E2E 9019      LD	R1,Y+
    1E2F 9009      LD	R0,Y+
    1E30 9508      RET
pop_xgset30FC:
    1E31 90A9      LD	R10,Y+
    1E32 90B9      LD	R11,Y+
    1E33 90C9      LD	R12,Y+
    1E34 90D9      LD	R13,Y+
    1E35 90E9      LD	R14,Y+
    1E36 90F9      LD	R15,Y+
    1E37 9149      LD	R20,Y+
    1E38 9159      LD	R21,Y+
    1E39 9508      RET
pop_xgsetF0FC:
    1E3A 90A9      LD	R10,Y+
    1E3B 90B9      LD	R11,Y+
    1E3C 90C9      LD	R12,Y+
    1E3D 90D9      LD	R13,Y+
    1E3E 90E9      LD	R14,Y+
    1E3F 90F9      LD	R15,Y+
    1E40 9149      LD	R20,Y+
    1E41 9159      LD	R21,Y+
    1E42 9169      LD	R22,Y+
    1E43 9179      LD	R23,Y+
    1E44 9508      RET
push_xgsetF0FC:
    1E45 937A      ST	R23,-Y
    1E46 936A      ST	R22,-Y
push_xgset30FC:
    1E47 935A      ST	R21,-Y
    1E48 934A      ST	R20,-Y
push_xgset00FC:
    1E49 92FA      ST	R15,-Y
    1E4A 92EA      ST	R14,-Y
push_xgset003C:
    1E4B 92DA      ST	R13,-Y
    1E4C 92CA      ST	R12,-Y
    1E4D 92BA      ST	R11,-Y
    1E4E 92AA      ST	R10,-Y
    1E4F 9508      RET
push_xgset300C:
    1E50 935A      ST	R21,-Y
    1E51 934A      ST	R20,-Y
    1E52 92BA      ST	R11,-Y
    1E53 92AA      ST	R10,-Y
    1E54 9508      RET
pop_xgset300C:
    1E55 90A9      LD	R10,Y+
    1E56 90B9      LD	R11,Y+
    1E57 9149      LD	R20,Y+
    1E58 9159      LD	R21,Y+
    1E59 9508      RET
push_xgsetF000:
    1E5A 937A      ST	R23,-Y
    1E5B 936A      ST	R22,-Y
    1E5C 935A      ST	R21,-Y
    1E5D 934A      ST	R20,-Y
    1E5E 9508      RET
pop_xgsetF000:
    1E5F 9149      LD	R20,Y+
    1E60 9159      LD	R21,Y+
    1E61 9169      LD	R22,Y+
    1E62 9179      LD	R23,Y+
    1E63 9508      RET
push_xgsetF00C:
    1E64 937A      ST	R23,-Y
    1E65 936A      ST	R22,-Y
    1E66 935A      ST	R21,-Y
    1E67 934A      ST	R20,-Y
    1E68 92BA      ST	R11,-Y
    1E69 92AA      ST	R10,-Y
    1E6A 9508      RET
pop_xgsetF00C:
    1E6B 90A9      LD	R10,Y+
    1E6C 90B9      LD	R11,Y+
    1E6D 9149      LD	R20,Y+
    1E6E 9159      LD	R21,Y+
    1E6F 9169      LD	R22,Y+
    1E70 9179      LD	R23,Y+
    1E71 9508      RET
push_xgsetF03C:
    1E72 937A      ST	R23,-Y
    1E73 936A      ST	R22,-Y
    1E74 935A      ST	R21,-Y
    1E75 934A      ST	R20,-Y
    1E76 92DA      ST	R13,-Y
    1E77 92CA      ST	R12,-Y
    1E78 92BA      ST	R11,-Y
    1E79 92AA      ST	R10,-Y
    1E7A 9508      RET
pop_xgsetF03C:
    1E7B 90A9      LD	R10,Y+
    1E7C 90B9      LD	R11,Y+
    1E7D 90C9      LD	R12,Y+
    1E7E 90D9      LD	R13,Y+
    1E7F 9149      LD	R20,Y+
    1E80 9159      LD	R21,Y+
    1E81 9169      LD	R22,Y+
    1E82 9179      LD	R23,Y+
    1E83 9508      RET
neg32:
    1E84 9500      COM	R16
    1E85 9510      COM	R17
    1E86 9520      COM	R18
    1E87 9530      COM	R19
    1E88 5F0F      SUBI	R16,0xFF
    1E89 4F1F      SBCI	R17,0xFF
    1E8A 4F2F      SBCI	R18,0xFF
    1E8B 4F3F      SBCI	R19,0xFF
    1E8C 9508      RET
asgncblkx:
    1E8D 93AA      ST	R26,-Y
    1E8E 93BA      ST	R27,-Y
    1E8F 93EA      ST	R30,-Y
    1E90 93FA      ST	R31,-Y
    1E91 920A      ST	R0,-Y
    1E92 81AF      LDD	R26,Y+7
    1E93 85B8      LDD	R27,Y+8
    1E94 81ED      LDD	R30,Y+5
    1E95 81FE      LDD	R31,Y+6
    1E96 3000      CPI	R16,0
    1E97 0701      CPC	R16,R17
    1E98 F031      BEQ	0x1E9F
    1E99 95D8      ELPM
    1E9A 920D      ST	R0,X+
    1E9B 9631      ADIW	R30,1
    1E9C 5001      SUBI	R16,1
    1E9D 4010      SBCI	R17,0
    1E9E CFF7      RJMP	0x1E96
    1E9F 9009      LD	R0,Y+
    1EA0 91F9      LD	R31,Y+
    1EA1 91E9      LD	R30,Y+
    1EA2 91B9      LD	R27,Y+
    1EA3 91A9      LD	R26,Y+
    1EA4 9624      ADIW	R28,4
    1EA5 9508      RET
fpsub:
    1EA6 9468      BSET	6
    1EA7 C001      RJMP	fpadd_alt
fpadd:
    1EA8 94E8      BCLR	6
fpadd_alt:
    1EA9 940E 1FBA CALL	saveR8toR25
    1EAB 940E 1F50 CALL	unpacks
    1EAD F409      BNE	0x1EAF
    1EAE C047      RJMP	0x1EF6
    1EAF 2EE6      MOV	R14,R22
    1EB0 2ED5      MOV	R13,R21
    1EB1 2EC4      MOV	R12,R20
    1EB2 2EB3      MOV	R11,R19
    1EB3 2EA2      MOV	R10,R18
    1EB4 2E91      MOV	R9,R17
    1EB5 2E80      MOV	R8,R16
    1EB6 8100      LDD	R16,Z+0
    1EB7 8111      LDD	R17,Z+1
    1EB8 8122      LDD	R18,Z+2
    1EB9 8133      LDD	R19,Z+3
    1EBA 940E 1F50 CALL	unpacks
    1EBC F409      BNE	0x1EBE
    1EBD C043      RJMP	0x1F01
    1EBE 2F84      MOV	R24,R20
    1EBF 2F95      MOV	R25,R21
    1EC0 198C      SUB	R24,R12
    1EC1 099D      SBC	R25,R13
    1EC2 F0B9      BEQ	0x1EDA
    1EC3 F472      BPL	0x1ED2
    1EC4 9590      COM	R25
    1EC5 9580      COM	R24
    1EC6 9601      ADIW	R24,1
    1EC7 2D4C      MOV	R20,R12
    1EC8 2D5D      MOV	R21,R13
    1EC9 3188      CPI	R24,0x18
    1ECA F5B0      BCC	0x1F01
    1ECB 9535      ASR	R19
    1ECC 9527      ROR	R18
    1ECD 9517      ROR	R17
    1ECE 9507      ROR	R16
    1ECF 9701      SBIW	R24,1
    1ED0 F7D1      BNE	0x1ECB
    1ED1 C008      RJMP	0x1EDA
    1ED2 3188      CPI	R24,0x18
    1ED3 F510      BCC	0x1EF6
    1ED4 94B5      ASR	R11
    1ED5 94A7      ROR	R10
    1ED6 9497      ROR	R9
    1ED7 9487      ROR	R8
    1ED8 9701      SBIW	R24,1
    1ED9 F7D1      BNE	0x1ED4
    1EDA 2766      CLR	R22
    1EDB F02E      BRTS	0x1EE1
    1EDC 0D08      ADD	R16,R8
    1EDD 1D19      ADC	R17,R9
    1EDE 1D2A      ADC	R18,R10
    1EDF 1D3B      ADC	R19,R11
    1EE0 C009      RJMP	0x1EEA
    1EE1 1A80      SUB	R8,R16
    1EE2 0A91      SBC	R9,R17
    1EE3 0AA2      SBC	R10,R18
    1EE4 0AB3      SBC	R11,R19
    1EE5 2D08      MOV	R16,R8
    1EE6 2D19      MOV	R17,R9
    1EE7 2D2A      MOV	R18,R10
    1EE8 2D3B      MOV	R19,R11
    1EE9 2333      TST	R19
    1EEA F41A      BPL	0x1EEE
    1EEB 940E 1E84 CALL	neg32
    1EED E860      LDI	R22,0x80
    1EEE 940E 1F75 CALL	normalize_and_pack
    1EF0 C002      RJMP	0x1EF3
    1EF1 940E 1FA3 CALL	pack
    1EF3 940E 1FC9 CALL	restoreR8toR25
    1EF5 9508      RET
    1EF6 8100      LDD	R16,Z+0
    1EF7 8111      LDD	R17,Z+1
    1EF8 8122      LDD	R18,Z+2
    1EF9 8133      LDD	R19,Z+3
    1EFA F7C6      BRTC	0x1EF3
    1EFB 940E 1F58 CALL	tstR16_R19
    1EFD F3A9      BEQ	0x1EF3
    1EFE E840      LDI	R20,0x80
    1EFF 2734      EOR	R19,R20
    1F00 CFF2      RJMP	0x1EF3
    1F01 2D08      MOV	R16,R8
    1F02 2D19      MOV	R17,R9
    1F03 2D2A      MOV	R18,R10
    1F04 2D3B      MOV	R19,R11
    1F05 2D4C      MOV	R20,R12
    1F06 2D5D      MOV	R21,R13
    1F07 2D6E      MOV	R22,R14
    1F08 2333      TST	R19
    1F09 F73A      BPL	0x1EF1
    1F0A 940E 1E84 CALL	neg32
    1F0C E860      LDI	R22,0x80
    1F0D CFE3      RJMP	0x1EF1
fpadd2:
    1F0E 93FA      ST	R31,-Y
    1F0F 93EA      ST	R30,-Y
    1F10 2FEC      MOV	R30,R28
    1F11 2FFD      MOV	R31,R29
    1F12 9632      ADIW	R30,2
    1F13 940E 1EA8 CALL	fpadd
    1F15 91E9      LD	R30,Y+
    1F16 91F9      LD	R31,Y+
    1F17 9624      ADIW	R28,4
    1F18 9508      RET
fpsub2:
    1F19 93FA      ST	R31,-Y
    1F1A 93EA      ST	R30,-Y
    1F1B 2FEC      MOV	R30,R28
    1F1C 2FFD      MOV	R31,R29
    1F1D 9632      ADIW	R30,2
    1F1E 940E 1EA6 CALL	fpsub
    1F20 91E9      LD	R30,Y+
    1F21 91F9      LD	R31,Y+
    1F22 9624      ADIW	R28,4
    1F23 9508      RET
fpint:
    1F24 934A      ST	R20,-Y
    1F25 935A      ST	R21,-Y
    1F26 936A      ST	R22,-Y
    1F27 940E 1F60 CALL	unpacku
    1F29 F0F1      BEQ	0x1F48
    1F2A 2355      TST	R21
    1F2B F0C2      BMI	0x1F44
    1F2C 314F      CPI	R20,0x1F
    1F2D F4A8      BCC	0x1F43
    1F2E 3147      CPI	R20,0x17
    1F2F F0C1      BEQ	0x1F48
    1F30 F450      BCC	0x1F3B
    1F31 9541      NEG	R20
    1F32 5E49      SUBI	R20,0xE9
    1F33 C005      RJMP	0x1F39
    1F34 9535      ASR	R19
    1F35 9527      ROR	R18
    1F36 9517      ROR	R17
    1F37 9507      ROR	R16
    1F38 954A      DEC	R20
    1F39 F7D1      BNE	0x1F34
    1F3A C00D      RJMP	0x1F48
    1F3B 5147      SUBI	R20,0x17
    1F3C 0F00      LSL	R16
    1F3D 1F11      ROL	R17
    1F3E 1F22      ROL	R18
    1F3F 1F33      ROL	R19
    1F40 954A      DEC	R20
    1F41 F7D1      BNE	0x1F3C
    1F42 C005      RJMP	0x1F48
    1F43 E73F      LDI	R19,0x7F
    1F44 2F23      MOV	R18,R19
    1F45 2F13      MOV	R17,R19
    1F46 2F03      MOV	R16,R19
    1F47 C004      RJMP	0x1F4C
    1F48 2366      TST	R22
    1F49 F011      BEQ	0x1F4C
    1F4A 940E 1E84 CALL	neg32
    1F4C 9169      LD	R22,Y+
    1F4D 9159      LD	R21,Y+
    1F4E 9149      LD	R20,Y+
    1F4F 9508      RET
unpacks:
    1F50 D00F      RCALL	unpacku
    1F51 F029      BEQ	0x1F57
    1F52 2366      TST	R22
    1F53 F011      BEQ	0x1F56
    1F54 940E 1E84 CALL	neg32
    1F56 9498      BCLR	1
    1F57 9508      RET
tstR16_R19:
    1F58 2300      TST	R16
    1F59 F429      BNE	0x1F5F
    1F5A 2311      TST	R17
    1F5B F419      BNE	0x1F5F
    1F5C 2322      TST	R18
    1F5D F409      BNE	0x1F5F
    1F5E 2333      TST	R19
    1F5F 9508      RET
unpacku:
    1F60 DFF7      RCALL	tstR16_R19
    1F61 F079      BEQ	0x1F71
    1F62 2F63      MOV	R22,R19
    1F63 7860      ANDI	R22,0x80
    1F64 0F22      LSL	R18
    1F65 1F33      ROL	R19
    1F66 2F43      MOV	R20,R19
    1F67 E75F      LDI	R21,0x7F
    1F68 1B45      SUB	R20,R21
    1F69 2755      CLR	R21
    1F6A 4050      SBCI	R21,0
    1F6B 9526      LSR	R18
    1F6C E830      LDI	R19,0x80
    1F6D 2B23      OR	R18,R19
    1F6E 2733      CLR	R19
    1F6F 9498      BCLR	1
    1F70 9508      RET
    1F71 2744      CLR	R20
    1F72 2755      CLR	R21
    1F73 2766      CLR	R22
    1F74 9508      RET
normalize_and_pack:
    1F75 DFE2      RCALL	tstR16_R19
    1F76 F121      BEQ	0x1F9B
    1F77 939A      ST	R25,-Y
    1F78 938A      ST	R24,-Y
    1F79 E78E      LDI	R24,0x7E
    1F7A E090      LDI	R25,0
    1F7B 2333      TST	R19
    1F7C F051      BEQ	0x1F87
    1F7D 9536      LSR	R19
    1F7E 9527      ROR	R18
    1F7F 9517      ROR	R17
    1F80 9507      ROR	R16
    1F81 1748      CP	R20,R24
    1F82 0759      CPC	R21,R25
    1F83 F4C4      BGE	0x1F9C
    1F84 5F4F      SUBI	R20,0xFF
    1F85 4F5F      SBCI	R21,0xFF
    1F86 CFF4      RJMP	0x1F7B
    1F87 9580      COM	R24
    1F88 9590      COM	R25
    1F89 9601      ADIW	R24,1
    1F8A 2322      TST	R18
    1F8B F0AA      BMI	0x1FA1
    1F8C 0F00      LSL	R16
    1F8D 1F11      ROL	R17
    1F8E 1F22      ROL	R18
    1F8F 1748      CP	R20,R24
    1F90 0759      CPC	R21,R25
    1F91 F01C      BLT	0x1F95
    1F92 5041      SUBI	R20,1
    1F93 4050      SBCI	R21,0
    1F94 CFF5      RJMP	0x1F8A
    1F95 2700      CLR	R16
    1F96 2711      CLR	R17
    1F97 2722      CLR	R18
    1F98 2733      CLR	R19
    1F99 9189      LD	R24,Y+
    1F9A 9199      LD	R25,Y+
    1F9B 9508      RET
    1F9C 2733      CLR	R19
    1F9D EF0F      LDI	R16,0xFF
    1F9E 2F10      MOV	R17,R16
    1F9F E72F      LDI	R18,0x7F
    1FA0 2F32      MOV	R19,R18
    1FA1 9189      LD	R24,Y+
    1FA2 9199      LD	R25,Y+
pack:
    1FA3 DFB4      RCALL	tstR16_R19
    1FA4 F039      BEQ	0x1FAC
    1FA5 5841      SUBI	R20,0x81
    1FA6 4F5F      SBCI	R21,0xFF
    1FA7 2F34      MOV	R19,R20
    1FA8 0F22      LSL	R18
    1FA9 9536      LSR	R19
    1FAA 9527      ROR	R18
    1FAB 2B36      OR	R19,R22
    1FAC 9508      RET
fpneg:
    1FAD DFAA      RCALL	tstR16_R19
    1FAE F021      BEQ	0x1FB3
    1FAF 930F      PUSH	R16
    1FB0 E800      LDI	R16,0x80
    1FB1 2730      EOR	R19,R16
    1FB2 910F      POP	R16
    1FB3 9508      RET
fpneg2:
    1FB4 DFF8      RCALL	fpneg
    1FB5 933A      ST	R19,-Y
    1FB6 932A      ST	R18,-Y
    1FB7 931A      ST	R17,-Y
    1FB8 930A      ST	R16,-Y
    1FB9 9508      RET
saveR8toR25:
    1FBA 928A      ST	R8,-Y
    1FBB 929A      ST	R9,-Y
    1FBC 92AA      ST	R10,-Y
    1FBD 92BA      ST	R11,-Y
    1FBE 92CA      ST	R12,-Y
    1FBF 92DA      ST	R13,-Y
    1FC0 92EA      ST	R14,-Y
    1FC1 92FA      ST	R15,-Y
    1FC2 934A      ST	R20,-Y
    1FC3 935A      ST	R21,-Y
    1FC4 936A      ST	R22,-Y
    1FC5 937A      ST	R23,-Y
    1FC6 938A      ST	R24,-Y
    1FC7 939A      ST	R25,-Y
    1FC8 9508      RET
restoreR8toR25:
    1FC9 9199      LD	R25,Y+
    1FCA 9189      LD	R24,Y+
    1FCB 9179      LD	R23,Y+
    1FCC 9169      LD	R22,Y+
    1FCD 9159      LD	R21,Y+
    1FCE 9149      LD	R20,Y+
    1FCF 90F9      LD	R15,Y+
    1FD0 90E9      LD	R14,Y+
    1FD1 90D9      LD	R13,Y+
    1FD2 90C9      LD	R12,Y+
    1FD3 90B9      LD	R11,Y+
    1FD4 90A9      LD	R10,Y+
    1FD5 9099      LD	R9,Y+
    1FD6 9089      LD	R8,Y+
    1FD7 9508      RET
fpmule:
    1FD8 940E 1FBA CALL	saveR8toR25
    1FDA 93AA      ST	R26,-Y
    1FDB 93BA      ST	R27,-Y
    1FDC 940E 1F60 CALL	unpacku
    1FDE F1D1      BEQ	0x2019
    1FDF 2EE6      MOV	R14,R22
    1FE0 2ED5      MOV	R13,R21
    1FE1 2EC4      MOV	R12,R20
    1FE2 2EB3      MOV	R11,R19
    1FE3 2EA2      MOV	R10,R18
    1FE4 2E91      MOV	R9,R17
    1FE5 2E80      MOV	R8,R16
    1FE6 8100      LDD	R16,Z+0
    1FE7 8111      LDD	R17,Z+1
    1FE8 8122      LDD	R18,Z+2
    1FE9 8133      LDD	R19,Z+3
    1FEA 940E 1F60 CALL	unpacku
    1FEC F161      BEQ	0x2019
    1FED 256E      EOR	R22,R14
    1FEE 0D4C      ADD	R20,R12
    1FEF 1D5D      ADC	R21,R13
    1FF0 3840      CPI	R20,0x80
    1FF1 0753      CPC	R21,R19
    1FF2 F55C      BGE	0x201E
    1FF3 3841      CPI	R20,0x81
    1FF4 EF7F      LDI	R23,0xFF
    1FF5 0757      CPC	R21,R23
    1FF6 F164      BLT	0x2023
    1FF7 9EA2      MUL	R10,R18
    1FF8 2DB1      MOV	R27,R1
    1FF9 2DA0      MOV	R26,R0
    1FFA 9E91      MUL	R9,R17
    1FFB 2D91      MOV	R25,R1
    1FFC 2D80      MOV	R24,R0
    1FFD 9EA0      MUL	R10,R16
    1FFE 0D80      ADD	R24,R0
    1FFF 1D91      ADC	R25,R1
    2000 1FA3      ADC	R26,R19
    2001 1FB3      ADC	R27,R19
    2002 9E82      MUL	R8,R18
    2003 0D80      ADD	R24,R0
    2004 1D91      ADC	R25,R1
    2005 1FA3      ADC	R26,R19
    2006 1FB3      ADC	R27,R19
    2007 9E92      MUL	R9,R18
    2008 0D90      ADD	R25,R0
    2009 1DA1      ADC	R26,R1
    200A 1FB3      ADC	R27,R19
    200B 9EA1      MUL	R10,R17
    200C 0D90      ADD	R25,R0
    200D 1DA1      ADC	R26,R1
    200E 1FB3      ADC	R27,R19
    200F 2F2B      MOV	R18,R27
    2010 2F1A      MOV	R17,R26
    2011 2F09      MOV	R16,R25
    2012 0F88      LSL	R24
    2013 1F00      ROL	R16
    2014 1F11      ROL	R17
    2015 1F22      ROL	R18
    2016 1F33      ROL	R19
    2017 940E 1F75 CALL	normalize_and_pack
    2019 91B9      LD	R27,Y+
    201A 91A9      LD	R26,Y+
    201B 940E 1FC9 CALL	restoreR8toR25
    201D 9508      RET
    201E EF0F      LDI	R16,0xFF
    201F 2F10      MOV	R17,R16
    2020 E72F      LDI	R18,0x7F
    2021 E74F      LDI	R20,0x7F
    2022 CFF6      RJMP	0x2019
    2023 2700      CLR	R16
    2024 2F10      MOV	R17,R16
    2025 2F20      MOV	R18,R16
    2026 2F30      MOV	R19,R16
    2027 CFF1      RJMP	0x2019
fpmule1:
    2028 93FA      ST	R31,-Y
    2029 93EA      ST	R30,-Y
    202A 81EA      LDD	R30,Y+2
    202B 81FB      LDD	R31,Y+3
    202C 940E 1FD8 CALL	fpmule
    202E 91E9      LD	R30,Y+
    202F 91F9      LD	R31,Y+
    2030 9622      ADIW	R28,2
    2031 9508      RET
fpcmp:
    2032 940E 1EA6 CALL	fpsub
    2034 2333      TST	R19
    2035 F03A      BMI	0x203D
    2036 940E 1F58 CALL	tstR16_R19
    2038 F011      BEQ	0x203B
    2039 E001      LDI	R16,1
    203A 9508      RET
    203B 2700      CLR	R16
    203C 9508      RET
    203D EF0F      LDI	R16,0xFF
    203E 9508      RET
fpcmp1:
    203F 93FA      ST	R31,-Y
    2040 93EA      ST	R30,-Y
    2041 81EA      LDD	R30,Y+2
    2042 81FB      LDD	R31,Y+3
    2043 940E 2032 CALL	fpcmp
    2045 91E9      LD	R30,Y+
    2046 91F9      LD	R31,Y+
    2047 9622      ADIW	R28,2
    2048 2300      TST	R16
    2049 9508      RET
fpcmp2:
    204A 93FA      ST	R31,-Y
    204B 93EA      ST	R30,-Y
    204C 2FEC      MOV	R30,R28
    204D 2FFD      MOV	R31,R29
    204E 9632      ADIW	R30,2
    204F 940E 2032 CALL	fpcmp
    2051 91E9      LD	R30,Y+
    2052 91F9      LD	R31,Y+
    2053 9624      ADIW	R28,4
    2054 2300      TST	R16
    2055 9508      RET
